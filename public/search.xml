<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Altium Designer</title>
    <url>/2021/05/27/Altium-Designer/</url>
    <content><![CDATA[<p>创建PCB项目 </p>
<p>| 元件库 原理图  PCB元件库   PCB  四个文件 完成工程创建 </p>
<p><img src="/2021/05/27/Altium-Designer/images/image-20210527235717243.png" alt="image-20210527235717243"></p>
]]></content>
  </entry>
  <entry>
    <title>Arduino开发</title>
    <url>/2021/03/17/Arduino%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一-Arduino-端口及组成部件"><a href="#一-Arduino-端口及组成部件" class="headerlink" title="一.Arduino 端口及组成部件"></a>一.Arduino 端口及组成部件</h2><ol>
<li>0～13为14个数字输入/输出（Digital I/O）端口，最大输入/输出电流为40mA，其中，端口0和1可用作串口通信数据发送和接收引脚，端口3、5、6、9、10、11具有PWM（脉冲宽度调制）功能，端口13与板载LED灯连接。注：这里的数字指数字量，数字量指在一定范围内不连续变化的物理量；输入/输出端口指输入或输出的引脚，引脚电压的变化范围为0～5V，数字端口的返回值为数字0或1，当引脚电压低于0.8V时，数字端口的返回值为数字0，数字0表示低电平，当引脚电压高于2.0V时，数字端口的返回值为数字1，数字1表示高电平，当引脚电压高于0.8V且低于2.0V时，数字端口的返回值将无法确定；当端口13输出数字1时，板载LED灯点亮，当端口13输出数字0时，板载LED灯熄灭.</li>
</ol>
<a id="more"></a>
<ol>
<li>A0～A5为6个模拟输入（Analog In）端口，具有10位的分辨率，默认输入信号为0～5V电压。</li>
<li>GND为电路公共逻辑参考电平引脚、电线接地端口，对于电源而言，GND为电源负极。Arduino Uno开发板上共有3个GND。</li>
<li>AREF为模拟输入的基准电压（Reference Voltage for the AnalogInputs），使用analogReference（）命令调用。</li>
<li>复位（Reset）键，又称重新启动键，在设备通电状态下手动按下复位键可使设备重新启动，程序从起始状态重新开始运行。</li>
<li>外接电源插孔连接7～12V直流电源适配器，外接电源插孔的正极与1N4007二极管的正极连接，1N4007二极管的负极与VIN端口、AMS1117三端稳压器输入端连接。当Arduino Uno开发板的耗电电流小于500mA时，采用USB接口供电即可，无须外接电源；当耗电电流大于500mA时，必须外接电源，否则，开发板不能正常工作。</li>
<li>5V和3.3V端口可向外部电路提供5V和3.3V电源。</li>
<li>RESET端口与复位键的引脚连接。将此端口与GND端口快速连接一下然后断开，可使设备重新启动，从起始状态重新开始。</li>
<li>VIN端口为外接电源输入（Voltage In）端口，外接电源的输入电压为7～12V。</li>
<li>16MHz晶振表示使用的晶体振荡器的振荡频率为16MHz（16000000Hz），晶振在Arduino Uno开发板上的主要作用是产生基准频率，微控制器通过基准频率控制电路中的频率的准确性。注：频率指单位时间内变化的次数，频率的单位是赫兹，简称“赫”，符号为Hz。16MHz表示1秒钟变化16000000次。</li>
</ol>
<h2 id="二-Arduino-语言"><a href="#二-Arduino-语言" class="headerlink" title="二.Arduino 语言"></a>二.Arduino 语言</h2><p>arduino 语言的结构主要包括 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;<span class="comment">//设置初始化代码，此代码只运行一次&#125;;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;<span class="comment">//放置主程序代码，此代码无限循环&#125;</span></span><br></pre></td></tr></table></figure>
<p>setup 函数用于初始化变量，设置引脚的输入、输出模式，配置引脚，引入库函数文件等。只在Arduino Uno 上电或者复位后运行一次。</p>
<p>LED 闪烁程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pinMode(<span class="number">13</span>,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    digitalWrite(<span class="number">13</span>,HIGH);</span><br><span class="line">    delay(<span class="number">10000</span>);</span><br><span class="line">    digitalWrite(<span class="number">13</span>,Low);</span><br><span class="line">    delay(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">13</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pinMode(n,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    digitalWrite(n,HIGH);</span><br><span class="line">    delay(<span class="number">10000</span>);</span><br><span class="line">    digitalWrite(<span class="number">13</span>,Low);</span><br><span class="line">    delay(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Arduino 与PC 串口通信</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);<span class="comment">//设置串口的波特率</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Serial.println(<span class="string">&quot;Hello,PC&quot;</span>);<span class="comment">//通过串口发送一行字符</span></span><br><span class="line">  delay(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三-Arduino-基础实验"><a href="#三-Arduino-基础实验" class="headerlink" title="三.Arduino 基础实验"></a>三.Arduino 基础实验</h2><h3 id="3-1-LED-控制"><a href="#3-1-LED-控制" class="headerlink" title="3.1 LED 控制"></a>3.1 LED 控制</h3><p>Arduino 控制LED 小灯闪烁</p>
<p>硬件连接部分.</p>
<p><img src="/images/image-20210317143833620.png" alt="image-20210317143833620"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=<span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pinMode(n,OUTPUT);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    digitalWrite(n,High);</span><br><span class="line">    delay(<span class="number">100</span>);</span><br><span class="line">    digitalWrite(n,Low);</span><br><span class="line">    delay(<span class="number">100</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PMW 呼吸灯程序</p>
<p>只有开发板上数字旁带“～”符号的引脚才能够使用PWM。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> led=<span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> fadeVale =<span class="number">0</span>;fadeVale&lt;=<span class="number">255</span>;fadeVale +=<span class="number">5</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    analogWrite(led,fadeVale);</span><br><span class="line">    delay(<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> fadeVale =<span class="number">255</span>; fadeVale&gt;=<span class="number">0</span>;fadeVale -=<span class="number">5</span>)&#123;</span><br><span class="line">    analogWrite(led,fadeVale);</span><br><span class="line">    delay(<span class="number">30</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-信号输入"><a href="#3-2-信号输入" class="headerlink" title="3.2 信号输入"></a>3.2 信号输入</h3><h4 id="3-2-1-按键控制"><a href="#3-2-1-按键控制" class="headerlink" title="3.2.1 按键控制"></a>3.2.1 按键控制</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> buttonPin =<span class="number">2</span>; <span class="comment">//相当于宏定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> led =<span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> State =<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pinMode(led,OUTPUT);</span><br><span class="line">    pinMode(buttonPin,INPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    State =digitalRead(buttonPin);</span><br><span class="line">    <span class="keyword">if</span>(State ==<span class="number">1</span>)&#123;</span><br><span class="line">        digitalWrite(led,HIGH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        digitalWrite(led,LOW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210317164124125.png" alt></p>
<p>改程序实现按下开关后LED灯熄灭的功能。</p>
<h4 id="3-2-2-电位器控制"><a href="#3-2-2-电位器控制" class="headerlink" title="3.2.2 电位器控制"></a>3.2.2 电位器控制</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sensorPin =A0;</span><br><span class="line"><span class="keyword">int</span> ledPin =<span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> sensorValue =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  pinMode(ledPin, OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sensorValue = analogRead(sensorPin);</span><br><span class="line">  digitalWrite(ledPin,<span class="number">1</span>);</span><br><span class="line">  <span class="comment">//延时</span></span><br><span class="line">  delay(sensorValue*<span class="number">10000</span>);</span><br><span class="line">  digitalWrite(ledPin,LOW);</span><br><span class="line">  delay(sensorValue*<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210317170525637.png" alt="image-20210317170525637"></p>
<p>连接图</p>
<h3 id="3-3-电机控制"><a href="#3-3-电机控制" class="headerlink" title="3.3 电机控制"></a>3.3 电机控制</h3><h4 id="3-3-1-直流电机"><a href="#3-3-1-直流电机" class="headerlink" title="3.3.1 直流电机"></a>3.3.1 直流电机</h4><p>直流电机是最简单的电机，将其接入合适的电源即可驱动。在电机电气参数范围内调整其工作电压即可调速，电流反向可使电机反转。但并不是说可以直接使用Arduino的数字引脚输出电流来控制电机。电机的工作电流大型的往往在A级，而数字引脚能提供的电流只有mA级，这显然是不可行的。解决这个驱动电流问题的方法有很多，可以借助继电器、晶体管或多种控制芯片。为了能灵活控制，在此以L293D芯片驱动电机为例来说明如何用Arduino控制电机。</p>
<p>电路连接图</p>
<p><img src="/images/image-20210317172014181.png" alt="image-20210317172014181"></p>
<p>L293D是一款宽电压、大电流、四通道电机驱动芯片，如图8-17所示为其封装后的外观，图8-18为其引脚标注（引脚序号由芯片上缺口左端算起）。</p>
<p><img src="/images/image-20210317172107730.png" alt="image-20210317172107730"></p>
<p>芯片引脚中，VCC1为芯片工作电压输入（4.5～7V），接地引脚需接地方可工作。1Y、2Y、3Y、4Y与1A、2A、3A、4A为四路电流输出极与其对应控制极，“1,2EN”控制第1、2路是否被启用（称为1、2路使能极），“3,4EN”亦为3、4路使能极。VCC2则是为4路输出提供电压的引脚，允许输入电压为Vcc1～36V（即VCC2电压不能低于芯片工作电压VCC1）。</p>
<h4 id="3-3-2-舵机"><a href="#3-3-2-舵机" class="headerlink" title="3.3.2 舵机"></a>3.3.2 舵机</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Servo.h&gt;</span></span></span><br><span class="line">Servo myservo;</span><br><span class="line"><span class="comment">//电位器</span></span><br><span class="line"><span class="keyword">int</span> potpin =A0;</span><br><span class="line"><span class="keyword">int</span> val=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">  myservo.attach(<span class="number">9</span>);<span class="comment">//将引脚为9的舵机附加到伺服对象。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//val=analogRead(potpin);//读取电位器的值</span></span><br><span class="line">  <span class="comment">//val=map(val,0,1023,0,180);//缩放为可用于控制舵机的角度值</span></span><br><span class="line">  myservo.write(<span class="number">1</span>);<span class="comment">//设置舵机位置</span></span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  myservo.write(<span class="number">90</span>);</span><br><span class="line">  delay(<span class="number">1500</span>);<span class="comment">//防止抖动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210317182902118.png" alt="image-20210317182902118"></p>
<h4 id="3-3-3-继电器控制"><a href="#3-3-3-继电器控制" class="headerlink" title="3.3.3 继电器控制"></a>3.3.3 继电器控制</h4><p>Arduino实现对电机的控制，利用了其他芯片以控制较大电流。而实现较宽电压的控制的时候就要使用到继电器了。</p>
<p><img src="/images/image-20210317183111038.png" alt="image-20210317183111038"></p>
<p>左上脚和左下脚串接线圈，中间公共脚与右下常闭（意为未工作时闭合）脚在线圈未通电时闭合，与右上常开（意为未工作时开路）脚断开。当继电器线圈接通直流电工作时，将产生磁场吸引衔铁使公共脚与常开脚接通，从而实现继电控制较宽电压。</p>
<h3 id="3-4-传输数据"><a href="#3-4-传输数据" class="headerlink" title="3.4 传输数据"></a>3.4 传输数据</h3><h4 id="3-4-1-UART通信"><a href="#3-4-1-UART通信" class="headerlink" title="3.4.1 UART通信"></a>3.4.1 UART通信</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UART 的数据传递</span><br><span class="line">语法：</span><br><span class="line">Serial.begin(int 速度);  通过此函数，设置UART传输的速度，列端口通信波特率。</span><br><span class="line">Serial.print(字符串);  将文字通过TX传递出去。 文本输出 </span><br><span class="line">Serial.write(字符串);  数据输出  </span><br><span class="line">Serial.available()判断Arduino 串行端口是否收到数据,返回值为int类型。</span><br><span class="line">Serial.read()  返回值为串行端口数据，int 型</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给arduino 传输数据并且在串口监视上查看传入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;HOw are you?&quot;</span>);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过UART在两个Arduino 之间传递数据  上述为发送端代码 以下为接收端</span></span><br><span class="line"><span class="keyword">int</span> inByte=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        inByte=Serial.read();</span><br><span class="line">        Serial.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        Serial.write(inByte);</span><br><span class="line">        Serial.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">函数名</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Serial.print(thisByte);</td>
<td style="text-align:center">打印文字</td>
</tr>
<tr>
<td style="text-align:center">Serial.print(thisByte，HEX);</td>
<td style="text-align:center">打印十六进制数</td>
</tr>
<tr>
<td style="text-align:center">Serial.print(thisByte，OCT);</td>
<td style="text-align:center">打印八进制数</td>
</tr>
<tr>
<td style="text-align:center">Serial.print(thisByte，BIN);</td>
<td style="text-align:center">打印二进制数</td>
</tr>
</tbody>
</table>
</div>
<h3 id="3-5PWM脉冲宽度调制"><a href="#3-5PWM脉冲宽度调制" class="headerlink" title="3.5PWM脉冲宽度调制"></a>3.5PWM脉冲宽度调制</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> ledPin =<span class="number">13</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pinMode(ledPin,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t_PWMMax=<span class="number">5000</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i=t_PWMMax;i=i+<span class="number">100</span>)</span><br><span class="line">    &#123;PWMfun(i,t_PWMMax-i);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PWMfun</span><span class="params">(<span class="keyword">int</span> Ontime,<span class="keyword">int</span> OffTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    digitalWrite(ledPin,HIGH);</span><br><span class="line">    delay(OnTime);</span><br><span class="line">    digitalWrite(ledPin,LOW);</span><br><span class="line">    delay(OffTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-6-Pulse脉冲"><a href="#3-6-Pulse脉冲" class="headerlink" title="3.6 Pulse脉冲"></a>3.6 Pulse脉冲</h3><p>pulseIn 函数用于读取引脚脉冲的时间长度，脉冲可以是HIGH或LOW,只要电压由低到高或是由高到低，就会检测到</p>
<p>pulseIn(pin,HIGH/LOW,timeout) </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;读取脉冲高电平持续时间</span><br><span class="line">int keypin&#x3D;2;</span><br><span class="line">void setup()</span><br><span class="line">&#123;</span><br><span class="line">	pinMode(keypin,INPUT);</span><br><span class="line">	Serial.begin(9600);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">void loop()</span><br><span class="line">&#123;</span><br><span class="line">	unsigned long duration&#x3D;pulseIn(keyin,HIGH,600000000);</span><br><span class="line">	Serial.println(duration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-7-SPI"><a href="#3-7-SPI" class="headerlink" title="3.7 SPI"></a>3.7 SPI</h3><p>Arduino 中的SPI通信是通过SPIClass类实现的，使用SPIClass 类能够方便地将Arduino作为主设备与其他从设备通信。SPIClass类提供了6个成员函数供使用者调用，如下所示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">begin();</span><br><span class="line">setBitOrder();</span><br><span class="line">setClockDivider();</span><br><span class="line">setDataMode();  作用是设置SPI数据模式，由于在SPI通信中没有定义任何通用时钟的规范，所以在具体使用的时候有上升沿采样，下降沿采样，SPI有<span class="number">4</span>种数据模式.</span><br><span class="line">transfer(); 用来传输一个数据，由于SPI是一种全双工、同步的通信总线。所以传输一个数据实际上会发送一个数据，同时接收一个数据。函数的参数为发送的数据值，返回的参数为接收的数据值。</span><br><span class="line">end();</span><br></pre></td></tr></table></figure>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><h3 id="1-数字信号的输入与输出"><a href="#1-数字信号的输入与输出" class="headerlink" title="1.数字信号的输入与输出"></a>1.数字信号的输入与输出</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数字信号输出 </span></span><br><span class="line">Int ledPin1= <span class="number">10</span>;</span><br><span class="line">Int ledPin2= <span class="number">11</span>;</span><br><span class="line">Int ledPin3= <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pinMode(ledPin1,OUTPUT);</span><br><span class="line">    pinMode(ledPin2,OUTPUT);</span><br><span class="line">    pinMode(ledPin3,OUTPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    digitalWrite(ledPin1,HIGH);</span><br><span class="line">    delay(<span class="number">100</span>);</span><br><span class="line">    digitalWrite(ledPin2,HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">    digitalWrite(ledPin3,HIGH);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">    </span><br><span class="line">    digitalWrite(ledPin1,LOW);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">    digitalWrite(ledPin2,LOW);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">    digitalWrite(ledPin3,LOW);</span><br><span class="line">    delay(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//数字信号输入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> buttonPin =<span class="number">2</span>; <span class="comment">//相当于宏定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> led =<span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> State =<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span>&#123;</span><br><span class="line">    pinMode(led,OUTPUT);</span><br><span class="line">    pinMode(buttonPin,INPUT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    State =digitalRead(buttonPin);</span><br><span class="line">    <span class="keyword">if</span>(State ==<span class="number">1</span>)&#123;</span><br><span class="line">        digitalWrite(led,HIGH);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        digitalWrite(led,LOW);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Analog-模拟"><a href="#2-Analog-模拟" class="headerlink" title="2.Analog 模拟"></a>2.Analog 模拟</h3><p>DigitalWrite/Read 输出/输入的是数字值0/1 而analogRead/Write 数据范围在(0,1023)之间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取电位器输入数值 并在串口监视器中输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> analogInPin=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> semsorValue =<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sensorValue=analogRead(analogInPin);</span><br><span class="line">    Serial.println(sensorValue);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Analog Output 输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Int ledPin =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">for</span>(value =<span class="number">0</span>;value&lt;=<span class="number">255</span>;value+=<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        analogWrite(ledPin,value);</span><br><span class="line">        delay(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(value=<span class="number">255</span>;value&gt;=<span class="number">0</span>;value-=<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        analogWrite(ledPin,value);</span><br><span class="line">        delay(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3.传输数据"></a>3.传输数据</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给arduino 传输数据并且在串口监视上查看传入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;HOw are you?&quot;</span>);</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过UART在两个Arduino 之间传递数据  上述为发送端代码 以下为接收端</span></span><br><span class="line"><span class="keyword">int</span> inByte=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">9600</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Serial.available()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        inByte=Serial.read();</span><br><span class="line">        Serial.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        Serial.write(inByte);</span><br><span class="line">        Serial.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="实际项目程序"><a href="#实际项目程序" class="headerlink" title="实际项目程序"></a>实际项目程序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SoftwareSerial.h&gt;</span></span></span><br><span class="line"><span class="function">SoftwareSerial <span class="title">BT</span><span class="params">(<span class="number">6</span>, <span class="number">5</span>)</span></span>;           <span class="comment">//设置蓝牙与板子的连接端口。  pin 6  接蓝牙的 TXD    pin 5 接蓝牙的 RXD</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENA 9<span class="comment">// 设置A为左侧轮子 对应的信号输入为1 2 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN1 8</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN2 7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENB 12<span class="comment">// 设置B 为右侧轮子 对应信号为 2 3  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN3 11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN4 10</span></span><br><span class="line"><span class="keyword">char</span> X;   <span class="comment">//定义一个储存变量的 字符X</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">( )</span></span>;</span><br><span class="line"><span class="comment">//  程序1  俺下按键发送一个指令(即更改按键状态就发送指令 ) </span></span><br><span class="line"><span class="comment">//  程序2  程序 2           (一直发送实时 指令)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// put your setup code here, to run once:</span></span><br><span class="line">  pinMode(ENA,OUTPUT);</span><br><span class="line">  pinMode(IN1,OUTPUT);</span><br><span class="line">  pinMode(IN2,OUTPUT);</span><br><span class="line">  pinMode(ENB,OUTPUT);</span><br><span class="line">  pinMode(IN3,OUTPUT);</span><br><span class="line">  pinMode(IN4,OUTPUT);</span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Serial.println(<span class="string">&quot;蓝牙连接正常&quot;</span>);</span><br><span class="line">  BT.begin(<span class="number">9600</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forward</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  analogWrite(IN1,<span class="number">180</span>);      </span><br><span class="line">  analogWrite(IN2,<span class="number">0</span>);         <span class="comment">//左轮前进</span></span><br><span class="line">  analogWrite(IN3,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN4,<span class="number">180</span>);         <span class="comment">//右轮前进</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  analogWrite(IN1,<span class="number">180</span>);      </span><br><span class="line">  analogWrite(IN2,<span class="number">0</span>);         <span class="comment">//左轮前进</span></span><br><span class="line">  analogWrite(IN3,<span class="number">180</span>);      </span><br><span class="line">  analogWrite(IN4,<span class="number">0</span>);         <span class="comment">//右轮前进</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">back</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  analogWrite(IN1,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN2,<span class="number">180</span>);         <span class="comment">//左轮前进</span></span><br><span class="line">  analogWrite(IN3,<span class="number">180</span>);      </span><br><span class="line">  analogWrite(IN4,<span class="number">0</span>);         <span class="comment">//右轮前进</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">right</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  analogWrite(IN1,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN2,<span class="number">180</span>);         <span class="comment">//左轮前进</span></span><br><span class="line">  analogWrite(IN3,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN4,<span class="number">180</span>);         <span class="comment">//右轮前进</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _stop()</span><br><span class="line">&#123;</span><br><span class="line">  analogWrite(IN1,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN2,<span class="number">0</span>);         <span class="comment">//左轮静止不动</span></span><br><span class="line">  analogWrite(IN3,<span class="number">0</span>);      </span><br><span class="line">  analogWrite(IN4,<span class="number">0</span>);         <span class="comment">//右轮静止不动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> n;</span><br><span class="line"><span class="comment">//构建主循环函数 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  analogWrite(ENA,<span class="number">200</span>);</span><br><span class="line">  analogWrite(ENB,<span class="number">200</span>);</span><br><span class="line">  <span class="keyword">char</span> n;</span><br><span class="line">  n = BT.read();</span><br><span class="line">  <span class="keyword">int</span> w=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">  &#123; </span><br><span class="line">    forward();</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    back();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(n==<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    left();</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(n==<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    right();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(n==<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    _stop();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取脉冲高电平持续时间</span></span><br><span class="line"><span class="keyword">int</span> keypin=<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	pinMode(keypin,INPUT);</span><br><span class="line">	Serial.begin(<span class="number">9600</span>);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">long</span> duration=pulseIn(keyin,HIGH,<span class="number">600000000</span>);</span><br><span class="line">	Serial.println(duration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>LeNet</title>
    <url>/2021/02/20/LeNet/</url>
    <content><![CDATA[<p>参考文章：<a href="https://blog.csdn.net/qq_42570457/article/details/81460807">https://blog.csdn.net/qq_42570457/article/details/81460807</a></p>
<p><code>model.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LeNet</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment">#super函数解决多层继承中调用父类方法中可能出现的一系列问题</span></span><br><span class="line">        <span class="comment">#涉及继承一般要用super函数</span></span><br><span class="line">        <span class="built_in">super</span>(LeNet, self).__init__()</span><br><span class="line">        <span class="comment">#in_channals out_channals，kernel_size</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool1 = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">16</span>, <span class="number">32</span>, <span class="number">5</span>)</span><br><span class="line">        self.pool2 = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">32</span>*<span class="number">5</span>*<span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">#定义正向传播过程</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = F.relu(self.conv1(x))    <span class="comment"># input(3, 32, 32) output(16, 28, 28)</span></span><br><span class="line">        x = self.pool1(x)            <span class="comment"># output(16, 14, 14)</span></span><br><span class="line">        x = F.relu(self.conv2(x))    <span class="comment"># output(32, 10, 10)</span></span><br><span class="line">        x = self.pool2(x)            <span class="comment"># output(32, 5, 5)</span></span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">32</span>*<span class="number">5</span>*<span class="number">5</span>)       <span class="comment"># output(32*5*5)</span></span><br><span class="line">        x = F.relu(self.fc1(x))      <span class="comment"># output(120)</span></span><br><span class="line">        x = F.relu(self.fc2(x))      <span class="comment"># output(84)</span></span><br><span class="line">        x = self.fc3(x)              <span class="comment"># output(10)</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># import torch</span></span><br><span class="line"><span class="comment"># input1= torch.rand([32,3,32,32]) #batch channal heigh weigh</span></span><br><span class="line"><span class="comment"># model=LeNet()</span></span><br><span class="line"><span class="comment"># print(model)</span></span><br><span class="line"><span class="comment"># output=model(input1)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>train.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> LeNet</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.ToTensor(),</span><br><span class="line">         transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 50000张训练图片</span></span><br><span class="line">    <span class="comment"># 第一次使用时要将download设置为True才会自动去下载数据集</span></span><br><span class="line">    train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>,</span><br><span class="line">                                             download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">    train_loader = torch.utils.data.DataLoader(train_set, batch_size=<span class="number">36</span>,</span><br><span class="line">                                               shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 10000张验证图片</span></span><br><span class="line">    <span class="comment"># 第一次使用时要将download设置为True才会自动去下载数据集</span></span><br><span class="line">    val_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>,</span><br><span class="line">                                           download=<span class="literal">False</span>, transform=transform)</span><br><span class="line">    val_loader = torch.utils.data.DataLoader(val_set, batch_size=<span class="number">5000</span>,</span><br><span class="line">                                             shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">    val_data_iter = <span class="built_in">iter</span>(val_loader)</span><br><span class="line">    val_image, val_label = val_data_iter.<span class="built_in">next</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># classes = (&#x27;plane&#x27;, &#x27;car&#x27;, &#x27;bird&#x27;, &#x27;cat&#x27;,</span></span><br><span class="line">    <span class="comment">#            &#x27;deer&#x27;, &#x27;dog&#x27;, &#x27;frog&#x27;, &#x27;horse&#x27;, &#x27;ship&#x27;, &#x27;truck&#x27;)</span></span><br><span class="line"></span><br><span class="line">    net = LeNet()</span><br><span class="line">    loss_function = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.Adam(net.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># loop over the dataset multiple times</span></span><br><span class="line"></span><br><span class="line">        running_loss = <span class="number">0.0</span></span><br><span class="line">        <span class="keyword">for</span> step, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, start=<span class="number">0</span>):</span><br><span class="line">            <span class="comment"># get the inputs; data is a list of [inputs, labels]</span></span><br><span class="line">            inputs, labels = data</span><br><span class="line"></span><br><span class="line">            <span class="comment"># zero the parameter gradients</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            <span class="comment"># forward + backward + optimize</span></span><br><span class="line">            outputs = net(inputs)</span><br><span class="line">            loss = loss_function(outputs, labels)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print statistics</span></span><br><span class="line">            running_loss += loss.item()</span><br><span class="line">            <span class="keyword">if</span> step % <span class="number">500</span> == <span class="number">499</span>:    <span class="comment"># print every 500 mini-batches</span></span><br><span class="line">                <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">                    outputs = net(val_image)  <span class="comment"># [batch, 10]</span></span><br><span class="line">                    predict_y = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">                    accuracy = torch.eq(predict_y, val_label).<span class="built_in">sum</span>().item() / val_label.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                    print(<span class="string">&#x27;[%d, %5d] train_loss: %.3f  test_accuracy: %.3f&#x27;</span> %</span><br><span class="line">                          (epoch + <span class="number">1</span>, step + <span class="number">1</span>, running_loss / <span class="number">500</span>, accuracy))</span><br><span class="line">                    running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    save_path = <span class="string">&#x27;./Lenet.pth&#x27;</span></span><br><span class="line">    torch.save(net.state_dict(), save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>predict.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> LeNet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    transform = transforms.Compose(</span><br><span class="line">        [transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">         transforms.ToTensor(),</span><br><span class="line">         transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">    classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    net = LeNet()</span><br><span class="line">    net.load_state_dict(torch.load(<span class="string">&#x27;Lenet.pth&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    im = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.jpg&#x27;</span>)</span><br><span class="line">    im = transform(im)  <span class="comment"># [C, H, W]</span></span><br><span class="line">    im = torch.unsqueeze(im, dim=<span class="number">0</span>)  <span class="comment"># [N, C, H, W]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        outputs = net(im)</span><br><span class="line">        predict = torch.<span class="built_in">max</span>(outputs, dim=<span class="number">1</span>)[<span class="number">1</span>].data.numpy()</span><br><span class="line">    print(classes[<span class="built_in">int</span>(predict)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>cv</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>MATLAB</title>
    <url>/2021/03/29/MATLAB/</url>
    <content><![CDATA[<h2 id="MATLAB-基础知识"><a href="#MATLAB-基础知识" class="headerlink" title="MATLAB 基础知识"></a>MATLAB 基础知识</h2><a id="more"></a>
<p><img src="/images/image-20210329163552620.png" alt="image-20210329163552620"></p>
<p><img src="/images/image-20210329163840182.png" alt="image-20210329163840182"></p>
<p><img src="/images/image-20210329164235820.png" alt="image-20210329164235820"></p>
<p><img src="/images/image-20210329164416739.png" alt="image-20210329164416739"></p>
<p>运用变量计算 </p>
<p>MATLAB中内置关键字  </p>
<ul>
<li>ans</li>
<li>i,j: complex number</li>
<li>Inf: 无穷 </li>
<li>eps: 非常小的数 </li>
<li>NaN: Not a number</li>
<li>pi:π</li>
</ul>
<ul>
<li><p>format rat 显示分式 如1/3</p>
</li>
<li><p>format long 显示15位小数</p>
</li>
<li><p>format short 显示4位小数 </p>
</li>
</ul>
<p>; 不显示结果 </p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">a=<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<h4 id="清除命令"><a href="#清除命令" class="headerlink" title="清除命令"></a>清除命令</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc: clear command window display </span><br><span class="line">clear: remove all variables in workspace </span><br><span class="line">who : variables in the workspace </span><br><span class="line">whos :variable information of workspace </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">EXE:</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line">b=<span class="number">4</span>;</span><br><span class="line">who</span><br><span class="line">whos</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="矩阵和向量（Vector-and-Matrix"><a href="#矩阵和向量（Vector-and-Matrix" class="headerlink" title="矩阵和向量（Vector and Matrix)"></a>矩阵和向量（Vector and Matrix)</h4><ul>
<li>行矩阵 （row vector)</li>
</ul>
<p>​        A=[1 2 3 4]</p>
<ul>
<li>列矩阵 (column vector)</li>
</ul>
<p>​       A=[1;2;3;4]</p>
<h4 id="矩阵输入"><a href="#矩阵输入" class="headerlink" title="矩阵输入"></a>矩阵输入</h4><p>a=[1 2;3 4;]</p>
<h4 id="矩阵索引"><a href="#矩阵索引" class="headerlink" title="矩阵索引"></a>矩阵索引</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A  =   <span class="number">5</span>              <span class="number">4</span>              <span class="number">9</span>              <span class="number">4</span>         从第一列开始往下数 索引值为<span class="number">1</span><span class="number">-16</span></span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span>             <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span>   </span><br><span class="line">A  =   <span class="number">5</span>（<span class="number">1</span>）          <span class="number">4</span> (<span class="number">5</span>)          <span class="number">9</span>              <span class="number">4</span>         从第一列开始往下数 索引值为<span class="number">1</span><span class="number">-16</span></span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span> (<span class="number">4</span>)         <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span>   </span><br><span class="line">      </span><br><span class="line"> * A(<span class="number">8</span>)=<span class="number">16</span></span><br><span class="line"> * A([<span class="number">1</span> <span class="number">3</span> <span class="number">5</span>]) =<span class="number">5</span>,<span class="number">15</span>,<span class="number">4</span></span><br><span class="line"> * a([<span class="number">1</span> <span class="number">3</span>;<span class="number">1</span> <span class="number">3</span>;])=  <span class="number">5</span>             <span class="number">15</span>       </span><br><span class="line">                 <span class="number">5</span>             <span class="number">15</span> </span><br><span class="line"> </span><br><span class="line"> Method <span class="number">2</span>:</span><br><span class="line"> A(<span class="number">3</span>,<span class="number">2</span>)=<span class="number">12</span>  第三行 第二列</span><br><span class="line"> A([<span class="number">1</span> <span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>]) =  <span class="number">5</span>              <span class="number">9</span>     前面为row 后面为col  </span><br><span class="line">                  <span class="number">15</span>             <span class="number">27</span>     </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<h4 id="矩阵元素替换-Replacing-Entries"><a href="#矩阵元素替换-Replacing-Entries" class="headerlink" title="矩阵元素替换 (Replacing Entries)"></a>矩阵元素替换 (Replacing Entries)</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A  =   <span class="number">5</span>              <span class="number">4</span>              <span class="number">9</span>              <span class="number">4</span>         </span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span>             <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span>  </span><br><span class="line"> A(<span class="number">2</span>,<span class="number">3</span>)=<span class="number">1</span> 将第二行 第三列的元素替换为 <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="Colon-Operator"><a href="#Colon-Operator" class="headerlink" title="Colon Operator"></a>Colon Operator</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">B=<span class="number">1</span>:<span class="number">5</span>               <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>   生成 <span class="number">1</span><span class="number">-5</span></span><br><span class="line"></span><br><span class="line">B=<span class="number">1</span>:<span class="number">2</span>:<span class="number">5</span>            <span class="number">1</span> <span class="number">2</span> <span class="number">5</span>          生成<span class="number">1</span><span class="number">-5</span> 等差为<span class="number">2</span></span><br><span class="line"></span><br><span class="line">B=[<span class="number">1</span>:<span class="number">5</span>;<span class="number">2</span>:<span class="number">3</span>:<span class="number">15</span>;<span class="number">-2</span>:<span class="number">0.5</span>:<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">2</span>              <span class="number">5</span>              <span class="number">8</span>             <span class="number">11</span>             <span class="number">14</span>       </span><br><span class="line">      <span class="number">-2</span>             <span class="number">-3</span>/<span class="number">2</span>           <span class="number">-1</span>             <span class="number">-1</span>/<span class="number">2</span>            <span class="number">0</span>   </span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; B</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">2</span>              <span class="number">5</span>              <span class="number">8</span>             <span class="number">11</span>             <span class="number">14</span>       </span><br><span class="line">      <span class="number">-2</span>             <span class="number">-3</span>/<span class="number">2</span>           <span class="number">-1</span>             <span class="number">-1</span>/<span class="number">2</span>            <span class="number">0</span>       </span><br><span class="line"></span><br><span class="line">&gt;&gt; B(<span class="number">3</span>,:)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">      <span class="number">-2</span>             <span class="number">-3</span>/<span class="number">2</span>           <span class="number">-1</span>             <span class="number">-1</span>/<span class="number">2</span>            <span class="number">0</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; B(<span class="number">3</span>,:)=[]</span><br><span class="line"></span><br><span class="line">B =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>              <span class="number">5</span>       </span><br><span class="line">       <span class="number">2</span>              <span class="number">5</span>              <span class="number">8</span>             <span class="number">11</span>             <span class="number">14</span> </span><br></pre></td></tr></table></figure>
<h4 id="数组组合操作"><a href="#数组组合操作" class="headerlink" title="数组组合操作"></a>数组组合操作</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">&gt;&gt; A=[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>];</span><br><span class="line">&gt;&gt; B=[<span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span>];</span><br><span class="line">&gt;&gt; [A B]</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">  列 <span class="number">1</span> 至 <span class="number">6</span></span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>              <span class="number">2</span>              <span class="number">2</span>       </span><br><span class="line"></span><br><span class="line">  列 <span class="number">7</span> 至 <span class="number">8</span></span><br><span class="line"></span><br><span class="line">       <span class="number">2</span>              <span class="number">2</span>       </span><br><span class="line"></span><br><span class="line">&gt;&gt; [A;B]</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>              <span class="number">4</span>       </span><br><span class="line">       <span class="number">2</span>              <span class="number">2</span>              <span class="number">2</span>              <span class="number">2</span>   </span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h4 id="数据的格式显示"><a href="#数据的格式显示" class="headerlink" title="数据的格式显示"></a>数据的格式显示</h4><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">format short,<span class="built_in">pi</span></span><br><span class="line">format long,<span class="built_in">pi</span></span><br><span class="line">format long e,<span class="built_in">pi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%整型数据定义</span></span><br><span class="line">x1=int16(<span class="number">20</span>)</span><br><span class="line">intmin(<span class="string">&#x27;int16&#x27;</span>)</span><br><span class="line">intmax(<span class="string">&#x27;int16&#x27;</span>)</span><br><span class="line">class(x1)</span><br><span class="line"></span><br><span class="line"><span class="comment">%整型数据运算</span></span><br><span class="line">a=int8(<span class="number">0</span>:<span class="number">9</span>)</span><br><span class="line">b=int8(randperm(<span class="number">9</span>))<span class="comment">% 返回行向量，其中包含从1到n包括两者之间的随机置换</span></span><br><span class="line">c=a.*b  <span class="comment">% “.*”为点乘运算，是指两个矩阵中对应元素进行乘法运算。</span></span><br><span class="line">cast(a,<span class="string">&#x27;type&#x27;</span>) <span class="comment">%将a 转换为type</span></span><br><span class="line"><span class="comment">%复数的表达形式</span></span><br><span class="line">zl=<span class="number">5</span>+<span class="number">4</span><span class="built_in">i</span></span><br><span class="line">z2=<span class="number">2</span>*<span class="built_in">exp</span>(<span class="built_in">i</span>*<span class="built_in">pi</span>/<span class="number">3</span>)<span class="comment">% 极坐标表达复数</span></span><br><span class="line">real_z=<span class="built_in">real</span>(z1) <span class="comment">%实部</span></span><br><span class="line">image_z=image(z1) <span class="comment">%虚部 </span></span><br><span class="line">mag_z=<span class="built_in">abs</span>(z) <span class="comment">%模</span></span><br><span class="line">angel_z=angel(z) <span class="comment">% 幅角 弧度</span></span><br><span class="line">angel_z=angel(z)*<span class="number">180</span>/<span class="built_in">pi</span> <span class="comment">%幅角  角度</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>示例</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%求解 (-16)^(1/5)</span></span><br><span class="line"><span class="comment">%构造多项式求解 p(r)=x5-c</span></span><br><span class="line">c=<span class="number">-16</span>;</span><br><span class="line">p=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-c];</span><br><span class="line">r=roots(p);<span class="comment">%roots 返回p表达的多项式的根，输入p是一个包含n+1多项式系数的向量，以xn系数开头，0系数表示该多项式中不存在的中间幂，例如p=[3 ,2,-2]表示3x^2+2x-2</span></span><br><span class="line"><span class="comment">%通过图形表示根</span></span><br><span class="line">mag=<span class="built_in">abs</span>(r(<span class="number">1</span>));<span class="comment">%计算复数的模</span></span><br><span class="line">t=<span class="number">0</span>:<span class="built_in">pi</span>/<span class="number">30</span>:<span class="number">2</span>*<span class="built_in">pi</span>; <span class="comment">%产生 0~2pi 之间的参变量采样点</span></span><br><span class="line">x=mag*<span class="built_in">sin</span>(t);</span><br><span class="line">y=mag*<span class="built_in">cos</span>(t);</span><br><span class="line"><span class="built_in">plot</span>(x,y,<span class="string">&#x27;b&#x27;</span>),grid on <span class="comment">%创建一个半径为 mag 的圆.b-&gt; 蓝色</span></span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="comment">%hold on 和hold off，是相对使用的</span></span><br><span class="line"><span class="comment">%前者的意思是，你在当前图的轴（坐标系）中画了一幅图，再画另一幅图时，原来的图还在，与新图共存，都看得到</span></span><br><span class="line"><span class="comment">%后者表达的是，你在当前图的轴（坐标系）中画了一幅图，此时，状态是hold off,则再画另一幅图时，原来的图就看不到了，在轴上绘制的是新图，原图被替换了</span></span><br><span class="line"><span class="built_in">plot</span>(r(<span class="number">4</span>),<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)<span class="comment">%绘制r(4)，&#x27;.&#x27;绘制，</span></span><br><span class="line"><span class="built_in">plot</span>(r([<span class="number">1</span>:<span class="number">3</span>,<span class="number">5</span>]),<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;MarkerSize&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;color&#x27;</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">axis([<span class="number">-3</span>,<span class="number">3</span>,<span class="number">-3</span>,<span class="number">3</span>])<span class="comment">%设置x坐标和y坐标范围</span></span><br><span class="line">axis square <span class="comment">%将坐标系图形设置为正方形，横轴:纵轴=1:1</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h2 id="矩阵操作-（Array-Manipulation"><a href="#矩阵操作-（Array-Manipulation" class="headerlink" title="矩阵操作 （Array Manipulation)"></a>矩阵操作 （Array Manipulation)</h2><p>Operators on array  + - * / ^ . ‘</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A  =   <span class="number">5</span>              <span class="number">4</span>              <span class="number">9</span>              <span class="number">4</span>         </span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span>             <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span>  </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">B  =   <span class="number">5</span>              <span class="number">4</span>              <span class="number">9</span>              <span class="number">4</span>         </span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span>             <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span>  </span><br><span class="line">      </span><br><span class="line">矩阵相加减，对应元素相加减</span><br><span class="line">矩阵相乘 *  对应行和列元素相乘再相加 </span><br><span class="line">矩阵点乘 .*  对应的每一个相同位置的元素相乘 </span><br><span class="line">矩阵点除法 ./ 对应每一个元素的位置相除</span><br><span class="line"></span><br><span class="line">A+a 矩阵A 的每一个元素都加上一个实数a</span><br><span class="line">A/a 矩阵A 的每一个元素都加除以一个a</span><br><span class="line">A./a 矩阵A 的每一个元素都加除以一个a</span><br><span class="line">A^a  矩阵A的a次方 </span><br><span class="line">A.^a  矩阵A的每一个元素的a次方 </span><br><span class="line">A&#x27;  矩阵A的转置</span><br></pre></td></tr></table></figure>
<h2 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eye</span>(n): nxn identiiy matrix  </span><br><span class="line">I2= <span class="number">1</span>  <span class="number">0</span></span><br><span class="line">    <span class="number">0</span>  <span class="number">1</span> </span><br><span class="line">I3= <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line">    <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">zeros</span>(n1,n2)  :n1xn2 zero matrix </span><br><span class="line"><span class="built_in">ones</span>(n1,n2) n1xn2 one matirx </span><br><span class="line"><span class="built_in">diag</span>(): diagonal matrix  对角线矩阵 </span><br><span class="line"><span class="built_in">diag</span>([<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>])=</span><br><span class="line">             <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">             <span class="number">0</span> <span class="number">3</span> <span class="number">0</span></span><br><span class="line">             <span class="number">0</span> <span class="number">0</span> <span class="number">4</span></span><br><span class="line">             </span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">some Matrix related functions</span><br><span class="line">A  =   <span class="number">5</span>              <span class="number">4</span>              <span class="number">9</span>              <span class="number">4</span>         </span><br><span class="line">      <span class="number">10</span>              <span class="number">8</span>             <span class="number">18</span>              <span class="number">8</span>       </span><br><span class="line">      <span class="number">15</span>             <span class="number">12</span>             <span class="number">27</span>             <span class="number">12</span>       </span><br><span class="line">      <span class="number">20</span>             <span class="number">16</span>             <span class="number">36</span>             <span class="number">16</span> </span><br><span class="line">      </span><br><span class="line"><span class="built_in">max</span>(A)  <span class="number">20</span> <span class="number">16</span> <span class="number">36</span> <span class="number">16</span>  返回每一列中的最大值 </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">max</span>(A))  <span class="number">36</span></span><br><span class="line"><span class="built_in">min</span>(A)  返回每一列中...</span><br><span class="line">sum(A)   返回每一列中...</span><br><span class="line"><span class="built_in">mean</span>(A)   返回每一列中...</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(A) 对每一列中的元素从小到大排列 </span><br><span class="line"><span class="built_in">sortrows</span>(A) 根据第一列中的元素对整行操作 </span><br><span class="line"></span><br><span class="line">A =</span><br><span class="line"></span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>       </span><br><span class="line">       <span class="number">0</span>              <span class="number">5</span>              <span class="number">6</span>       </span><br><span class="line">       <span class="number">7</span>              <span class="number">8</span>              <span class="number">9</span>       </span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">sort</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>              <span class="number">2</span>              <span class="number">3</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">5</span>              <span class="number">6</span>       </span><br><span class="line">       <span class="number">7</span>              <span class="number">8</span>              <span class="number">9</span>       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="built_in">sortrows</span>(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"></span><br><span class="line">       <span class="number">0</span>              <span class="number">5</span>              <span class="number">6</span>       </span><br><span class="line">       <span class="number">1</span>              <span class="number">2</span>              <span class="number">3</span>       </span><br><span class="line">       <span class="number">7</span>              <span class="number">8</span>              <span class="number">9</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">size</span>(A) <span class="number">3</span> <span class="number">3</span> 返回 row数和col数 </span><br><span class="line"><span class="built_in">length</span>(A) 返回A 的长度 </span><br><span class="line">&gt;&gt; <span class="built_in">find</span>(A==<span class="number">5</span>)  返回<span class="number">5</span>在矩阵A 中的位置 </span><br></pre></td></tr></table></figure>
<h2 id="结构化编程和函数定义"><a href="#结构化编程和函数定义" class="headerlink" title="结构化编程和函数定义"></a>结构化编程和函数定义</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">	x=linespace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">101</span>);</span><br><span class="line">	<span class="built_in">plot</span>(x,<span class="built_in">sin</span>(x+<span class="built_in">i</span>));</span><br><span class="line">	<span class="comment">%print(gcf,&#x27;-deps&#x27;,strcat(&#x27;plot&#x27;,num2str(i),&#x27;.ps&#x27;))</span></span><br><span class="line">	<span class="comment">%表示注释</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>“学习笔记&quot;</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown基本用法</title>
    <url>/2021/02/16/Markdown%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Block-Elements-块状单元"><a href="#Block-Elements-块状单元" class="headerlink" title="Block Elements(块状单元)"></a>Block Elements(块状单元)</h2><h3 id="Paragraph-and-line-breaks-段落和换行符"><a href="#Paragraph-and-line-breaks-段落和换行符" class="headerlink" title="Paragraph and line breaks(段落和换行符)"></a>Paragraph and line breaks(段落和换行符)</h3><p>按下<code>Return</code> 或者 <code>Shift</code> + <code>Return</code> 换行</p>
<h3 id="Headers-标题样式"><a href="#Headers-标题样式" class="headerlink" title="Headers(标题样式)"></a>Headers(标题样式)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># This is an H1</span></span><br><span class="line"><span class="section">## This is an H2</span></span><br><span class="line"><span class="section">### This is an H3</span></span><br><span class="line"><span class="section">#### This is an H4</span></span><br><span class="line"><span class="section">##### This is an H5</span></span><br><span class="line"><span class="section">###### This is an H5</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Blockquotes-引用"><a href="#Blockquotes-引用" class="headerlink" title="Blockquotes (引用)"></a>Blockquotes (引用)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two parggraphs. This is first paragraph.</span></span><br><span class="line"><span class="quote">&gt; This is another paragraph.</span></span><br></pre></td></tr></table></figure>
<p>引用效果如下</p>
<blockquote>
<p>this is a quote</p>
<blockquote>
<p>this is another quote</p>
</blockquote>
</blockquote>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>输入<code>* list item 1</code> 将创建一个以 * 开头的list</p>
<p>输入 <code>1. list item 1</code> 将创建一个以数字开头的list</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">## un-ordered list</span></span><br><span class="line"><span class="bullet">*</span> item1</span><br><span class="line"><span class="bullet">*</span> item2</span><br><span class="line"><span class="section">## ordered list </span></span><br><span class="line"><span class="bullet">1.</span> item1</span><br><span class="line"><span class="bullet">2.</span> item2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><ul>
<li>item1</li>
<li>item2</li>
</ul>
<ol>
<li>item1</li>
<li>item2</li>
</ol>
<h3 id="Task-List-任务列表"><a href="#Task-List-任务列表" class="headerlink" title="Task List (任务列表)"></a>Task List (任务列表)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> []  tesk1</span><br><span class="line"><span class="bullet">-</span> []  tesk2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h4><p>press <code>-</code>+<code>` +</code>[ ]`</p>
<ul>
<li><p>[ ] a task list item</p>
</li>
<li><p>[ ] tesk 1</p>
</li>
<li>[x] tesk 2</li>
<li>[ ] tesk 3</li>
</ul>
<h3 id="Code-Blocks-代码块"><a href="#Code-Blocks-代码块" class="headerlink" title="Code Blocks (代码块)"></a>Code Blocks (代码块)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">下面是示例</span><br><span class="line">​<span class="code">```python</span></span><br><span class="line"><span class="code">print(&#x27;hello world&#x27;)```</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实际效果如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&#x27;hello world &#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="Math-Blocks-（数学公式块"><a href="#Math-Blocks-（数学公式块" class="headerlink" title="Math Blocks （数学公式块)"></a>Math Blocks （数学公式块)</h3><p>press $$$$ and ‘Enter’</p>
<h4 id="example-2"><a href="#example-2" class="headerlink" title="example"></a>example</h4><script type="math/tex; mode=display">
pi =3.1415926</script><h3 id="Tables-（表格"><a href="#Tables-（表格" class="headerlink" title="Tables （表格)"></a>Tables （表格)</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">second header</th>
<th style="text-align:center">first header</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">items1</td>
<td style="text-align:center">items2</td>
</tr>
</tbody>
</table>
</div>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">输入 | first header| second header| and Enter </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="高级玩法"><a href="#高级玩法" class="headerlink" title="高级玩法"></a>高级玩法</h4><div class="table-container">
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
</div>
<h3 id="Footnotes-创建注释"><a href="#Footnotes-创建注释" class="headerlink" title="Footnotes(创建注释)"></a>Footnotes(创建注释)</h3><p>这是一个注释<sup><a href="#fn_footnote" id="reffn_footnote">footnote</a></sup></p>
<blockquote id="fn_footnote">
<sup>footnote</sup>. here is <em>text</em> of <strong> footnote</strong> <a href="#reffn_footnote" title="Jump back to footnote [footnote] in the text."> &#8617;</a>
</blockquote>
<p>这是一个小的东西<sup><a href="#fn_zhushi" id="reffn_zhushi">zhushi</a></sup></p>
<p><sup><a href="#fn_zhushi" id="reffn_zhushi">zhushi</a></sup>:just like this </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 在需要注释的地方加入[^name]</span><br><span class="line">2. 在下方写入注释内容，格式如下：[^name]:</span><br></pre></td></tr></table></figure>
<h3 id="Horizontal-Rules-（画横线"><a href="#Horizontal-Rules-（画横线" class="headerlink" title="Horizontal Rules （画横线)"></a>Horizontal Rules （画横线)</h3><p>输入 <code>***</code> 或则<code>---</code> 然后按下<code>enter</code> 即可画一道横线</p>
<hr>
<hr>
<h3 id="Links-链接"><a href="#Links-链接" class="headerlink" title="Links(链接)"></a>Links(链接)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This is [an example](https:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure>
<h4 id="example-3"><a href="#example-3" class="headerlink" title="example"></a>example</h4><p><a href="https://www.baidu.com">百度</a></p>
<h3 id="Emphasis-强调"><a href="#Emphasis-强调" class="headerlink" title="Emphasis (强调)"></a>Emphasis (强调)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*倾斜*</span></span><br><span class="line"><span class="emphasis">_single underscores_</span></span><br><span class="line"><span class="strong">**加深**</span> </span><br></pre></td></tr></table></figure>
<p><em>倾斜</em></p>
<p>_单下划线_</p>
<p><strong>加深</strong></p>
<h3 id="Strikethrough-删除线"><a href="#Strikethrough-删除线" class="headerlink" title="Strikethrough (删除线)"></a>Strikethrough (删除线)</h3><p><code>~~Misktaken text.~~</code></p>
<p><del>Mistaken</del></p>
<h3 id><a href="#" class="headerlink" title=" "></a> </h3><h3 id="Emoji-表情"><a href="#Emoji-表情" class="headerlink" title="Emoji (表情)"></a>Emoji (表情)</h3><p><code>:smile:</code></p>
<p>:smile:</p>
<p>:santa:</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyqt</title>
    <url>/2021/04/06/Pyqt/</url>
    <content><![CDATA[<h3 id="1-一个简单的例子"><a href="#1-一个简单的例子" class="headerlink" title="1. 一个简单的例子"></a>1. 一个简单的例子</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton,  QPlainTextEdit</span><br><span class="line"></span><br><span class="line">app = QApplication([])<span class="comment">#创建app类</span></span><br><span class="line"></span><br><span class="line">window = QMainWindow()<span class="comment"># 创建窗口</span></span><br><span class="line">window.resize(<span class="number">500</span>, <span class="number">400</span>) <span class="comment">#窗口大小</span></span><br><span class="line">window.move(<span class="number">300</span>, <span class="number">310</span>)<span class="comment">#窗口位置</span></span><br><span class="line">window.setWindowTitle(<span class="string">&#x27;薪资统计&#x27;</span>) <span class="comment">#窗口的名称</span></span><br><span class="line"></span><br><span class="line">textEdit = QPlainTextEdit(window) <span class="comment">#创建可输入区</span></span><br><span class="line">textEdit.setPlaceholderText(<span class="string">&quot;请输入薪资表&quot;</span>)<span class="comment"># 可输入区提示的内容</span></span><br><span class="line">textEdit.move(<span class="number">10</span>,<span class="number">25</span>)<span class="comment">#移动可输入区的位置</span></span><br><span class="line">textEdit.resize(<span class="number">300</span>,<span class="number">350</span>)<span class="comment"># 修改可输入区的大小</span></span><br><span class="line"></span><br><span class="line">button = QPushButton(<span class="string">&#x27;统计&#x27;</span>, window) <span class="comment">#按键</span></span><br><span class="line">button.move(<span class="number">380</span>,<span class="number">80</span>) <span class="comment">#按键大小</span></span><br><span class="line"></span><br><span class="line">window.show() <span class="comment">#展示</span></span><br><span class="line"></span><br><span class="line">app.exec_() <span class="comment">#进入QApplication的事件处理循环，接收用户的输入事件（），并且分配给相应的对象去处理。</span></span><br></pre></td></tr></table></figure>
<!--more-->
<p><code>QApplication</code> 提供了整个图形界面程序的底层管理功能，比如：</p>
<p>初始化、程序入口参数的处理，用户事件（对界面的点击、输入、拖拽）分发给各个对应的控件，等等…</p>
<p>QMainWindow、QPlainTextEdit、QPushButton 是3个控件类，分别对应界面的主窗口、文本框、按钮</p>
<p>他们都是控件基类对象QWidget的子类。</p>
<h3 id="2-用户操作处理：signal和slot"><a href="#2-用户操作处理：signal和slot" class="headerlink" title="2.用户操作处理：signal和slot"></a>2.用户操作处理：signal和slot</h3><p>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton,  QPlainTextEdit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleCalc</span>():</span><span class="comment">#定义按钮响应操作函数</span></span><br><span class="line">    print(<span class="string">&#x27;统计按钮被点击了&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = QApplication([])<span class="comment">#创建app类</span></span><br><span class="line"></span><br><span class="line">window = QMainWindow()<span class="comment"># 创建窗口</span></span><br><span class="line">window.resize(<span class="number">500</span>, <span class="number">400</span>) <span class="comment">#窗口大小</span></span><br><span class="line">window.move(<span class="number">300</span>, <span class="number">310</span>)<span class="comment">#窗口位置</span></span><br><span class="line">window.setWindowTitle(<span class="string">&#x27;薪资统计&#x27;</span>) <span class="comment">#窗口的名称</span></span><br><span class="line"></span><br><span class="line">textEdit = QPlainTextEdit(window) <span class="comment">#创建可输入区</span></span><br><span class="line">textEdit.setPlaceholderText(<span class="string">&quot;请输入薪资表&quot;</span>)<span class="comment"># 可输入区提示的内容</span></span><br><span class="line">textEdit.move(<span class="number">10</span>,<span class="number">25</span>)<span class="comment">#移动可输入区的位置</span></span><br><span class="line">textEdit.resize(<span class="number">300</span>,<span class="number">350</span>)<span class="comment"># 修改可输入区的大小</span></span><br><span class="line"></span><br><span class="line">button = QPushButton(<span class="string">&#x27;统计&#x27;</span>, window) <span class="comment">#按键</span></span><br><span class="line">button.move(<span class="number">380</span>,<span class="number">80</span>) <span class="comment">#按键大小</span></span><br><span class="line">button.clicked.connect(handleCalc) <span class="comment">#检测按钮是否按下，连接handleCalc 函数</span></span><br><span class="line">window.show() <span class="comment">#展示</span></span><br><span class="line"></span><br><span class="line">app.exec_() <span class="comment">#进入QApplication的事件处理循环，接收用户的输入事件（），并且分配给相应的对象去处理。</span></span><br></pre></td></tr></table></figure>
<h3 id="3-获取在文本框输入的内容"><a href="#3-获取在文本框输入的内容" class="headerlink" title="3. 获取在文本框输入的内容"></a>3. 获取在文本框输入的内容</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton,  QPlainTextEdit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleCalc</span>():</span><span class="comment">#定义按钮响应操作函数</span></span><br><span class="line">    <span class="comment">#print(&#x27;统计按钮被点击了&#x27;)</span></span><br><span class="line">    INFO = textEdit.toPlainText()  <span class="comment"># 将文本框中的文字换成INFO 文本</span></span><br><span class="line">    print(INFO)</span><br><span class="line">app = QApplication([])<span class="comment">#创建app类</span></span><br><span class="line"></span><br><span class="line">window = QMainWindow()<span class="comment"># 创建窗口</span></span><br><span class="line">window.resize(<span class="number">500</span>, <span class="number">400</span>) <span class="comment">#窗口大小</span></span><br><span class="line">window.move(<span class="number">300</span>, <span class="number">310</span>)<span class="comment">#窗口位置</span></span><br><span class="line">window.setWindowTitle(<span class="string">&#x27;薪资统计&#x27;</span>) <span class="comment">#窗口的名称</span></span><br><span class="line"></span><br><span class="line">textEdit = QPlainTextEdit(window) <span class="comment">#创建可输入区</span></span><br><span class="line">textEdit.setPlaceholderText(<span class="string">&quot;请输入薪资表&quot;</span>)<span class="comment"># 可输入区提示的内容</span></span><br><span class="line">textEdit.move(<span class="number">10</span>,<span class="number">25</span>)<span class="comment">#移动可输入区的位置</span></span><br><span class="line">textEdit.resize(<span class="number">300</span>,<span class="number">350</span>)<span class="comment"># 修改可输入区的大小</span></span><br><span class="line"></span><br><span class="line">button = QPushButton(<span class="string">&#x27;统计&#x27;</span>, window) <span class="comment">#按键</span></span><br><span class="line">button.move(<span class="number">380</span>,<span class="number">80</span>) <span class="comment">#按键大小</span></span><br><span class="line">button.clicked.connect(handleCalc) <span class="comment">#检测按钮是否按下，连接handleCalc 函数</span></span><br><span class="line">window.show() <span class="comment">#展示</span></span><br><span class="line"></span><br><span class="line">app.exec_() <span class="comment">#进入QApplication的事件处理循环，接收用户的输入事件（），并且分配给相应的对象去处理。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="4-函数封装"><a href="#4-函数封装" class="headerlink" title="4.函数封装"></a>4.函数封装</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rom PySide2.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow, QPushButton,  QPlainTextEdit,QMessageBox</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stats</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.window = QMainWindow()</span><br><span class="line">        self.window.resize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        self.window.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        self.window.setWindowTitle(<span class="string">&#x27;薪资统计&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.textEdit = QPlainTextEdit(self.window)</span><br><span class="line">        self.textEdit.setPlaceholderText(<span class="string">&quot;请输入薪资表&quot;</span>)</span><br><span class="line">        self.textEdit.move(<span class="number">10</span>, <span class="number">25</span>)</span><br><span class="line">        self.textEdit.resize(<span class="number">300</span>, <span class="number">350</span>)</span><br><span class="line"></span><br><span class="line">        self.button = QPushButton(<span class="string">&#x27;统计&#x27;</span>, self.window)</span><br><span class="line">        self.button.move(<span class="number">380</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        self.button.clicked.connect(self.handleCalc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleCalc</span>(<span class="params">self</span>):</span></span><br><span class="line">        info = self.textEdit.toPlainText()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 薪资20000 以上 和 以下 的人员名单</span></span><br><span class="line">        salary_above_20k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        salary_below_20k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> info.splitlines():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            parts = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            <span class="comment"># 去掉列表中的空字符串内容</span></span><br><span class="line">            parts = [p <span class="keyword">for</span> p <span class="keyword">in</span> parts <span class="keyword">if</span> p]</span><br><span class="line">            name,salary,age = parts</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(salary) &gt;= <span class="number">20000</span>:</span><br><span class="line">                salary_above_20k += name + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                salary_below_20k += name + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">        QMessageBox.about(self.window,</span><br><span class="line">                    <span class="string">&#x27;统计结果&#x27;</span>,</span><br><span class="line">                    <span class="string">f&#x27;&#x27;&#x27;薪资20000 以上的有：\n<span class="subst">&#123;salary_above_20k&#125;</span></span></span><br><span class="line"><span class="string">                    \n薪资20000 以下的有：\n<span class="subst">&#123;salary_below_20k&#125;</span>&#x27;&#x27;&#x27;</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line">stats = Stats()</span><br><span class="line">stats.window.show()</span><br><span class="line">app.exec_()</span><br></pre></td></tr></table></figure>
<h3 id="5-Qt-Designer"><a href="#5-Qt-Designer" class="headerlink" title="5.Qt Designer"></a>5.Qt Designer</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> QApplication, QMessageBox</span><br><span class="line"><span class="keyword">from</span> PySide2.QtUiTools <span class="keyword">import</span> QUiLoader</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stats</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># 从文件中加载UI定义</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从 UI 定义中动态 创建一个相应的窗口对象</span></span><br><span class="line">        <span class="comment"># 注意：里面的控件对象也成为窗口对象的属性了</span></span><br><span class="line">        <span class="comment"># 比如 self.ui.button , self.ui.textEdit</span></span><br><span class="line">        self.ui = QUiLoader().load(<span class="string">&#x27;demo1.ui&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        self.ui.button.clicked.connect(self.handleCalc)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handleCalc</span>(<span class="params">self</span>):</span></span><br><span class="line">        info = self.ui.texteditor.toPlainText()</span><br><span class="line"></span><br><span class="line">        salary_above_20k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        salary_below_20k = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> info.splitlines():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line.strip():</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            parts = line.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">            parts = [p <span class="keyword">for</span> p <span class="keyword">in</span> parts <span class="keyword">if</span> p]</span><br><span class="line">            name,salary,age = parts</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">int</span>(salary) &gt;= <span class="number">20000</span>:</span><br><span class="line">                salary_above_20k += name + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                salary_below_20k += name + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">        QMessageBox.about(self.ui,</span><br><span class="line">                    <span class="string">&#x27;统计结果&#x27;</span>,</span><br><span class="line">                    <span class="string">f&#x27;&#x27;&#x27;薪资20000 以上的有：\n<span class="subst">&#123;salary_above_20k&#125;</span></span></span><br><span class="line"><span class="string">                    \n薪资20000 以下的有：\n<span class="subst">&#123;salary_below_20k&#125;</span>&#x27;&#x27;&#x27;</span></span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">app = QApplication([])</span><br><span class="line">stats = Stats()</span><br><span class="line">stats.ui.show()</span><br><span class="line">app.exec_()</span><br></pre></td></tr></table></figure>
<h3 id="6-界面布局Layout"><a href="#6-界面布局Layout" class="headerlink" title="6.界面布局Layout"></a>6.界面布局Layout</h3>]]></content>
      <tags>
        <tag>技术</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32学习笔记</title>
    <url>/2021/02/09/STM32%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一-点亮LED-灯"><a href="#一-点亮LED-灯" class="headerlink" title="一.点亮LED 灯"></a>一.点亮LED 灯</h2><h3 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h3><ol>
<li>了解如何将LED 灯所连接的I/O端口进行初始化</li>
<li>如何控制程序控制IO端口的高低电平变化</li>
<li>控制LED1小灯</li>
</ol>
<h3 id="1-2-电路原理图"><a href="#1-2-电路原理图" class="headerlink" title="1.2 电路原理图"></a>1.2 电路原理图</h3><p><img src="/images/image-20210219072118042.png" alt="image-20210219072118042"></p>
<p>由电路原理图可看出,LED1由PB0控制，也就是单片机的第18脚。即PB0输出高电平，LED1点亮,PB)输出低电平，LED1熄灭。</p>
<a id="more"></a>
<h3 id="1-3四种方法实现闪灯程序"><a href="#1-3四种方法实现闪灯程序" class="headerlink" title="1.3四种方法实现闪灯程序"></a>1.3四种方法实现闪灯程序</h3><h4 id="1-3-1控制方法"><a href="#1-3-1控制方法" class="headerlink" title="1.3.1控制方法"></a>1.3.1控制方法</h4><p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();<span class="comment">//LED灯初始化函数，将LED灯连接的IO端口进行初始化</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方法1：</span></span><br><span class="line">		GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">1</span>)); <span class="comment">//LED1接口输出高电平1</span></span><br><span class="line">		delay_us(<span class="number">50000</span>); <span class="comment">//延时1秒</span></span><br><span class="line">		GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">0</span>)); <span class="comment">//LED1接口输出低电平0</span></span><br><span class="line">		delay_us(<span class="number">50000</span>); <span class="comment">//延时1秒</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//方法2：</span></span><br><span class="line"><span class="comment">//		GPIO_WriteBit(LEDPORT,LED1,(BitAction)(1-GPIO_ReadOutputDataBit(LEDPORT,LED1))); //取反LED1</span></span><br><span class="line"><span class="comment">//		delay_ms(500); //延时1秒</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//方法3：</span></span><br><span class="line"><span class="comment">//		GPIO_SetBits(LEDPORT,LED1); //LED灯都为高电平（1）</span></span><br><span class="line"><span class="comment">//		delay_s(1); //延时1秒</span></span><br><span class="line"><span class="comment">//		GPIO_ResetBits(LEDPORT,LED1); //LED灯都为低电平（0）</span></span><br><span class="line"><span class="comment">//		delay_s(1); //延时1秒</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//方法4</span></span><br><span class="line"><span class="comment">//		GPIO_Write(LEDPORT,0x0001); //直接数值操作将变量值写入LED</span></span><br><span class="line"><span class="comment">//		delay_s(2); //延时1秒</span></span><br><span class="line"><span class="comment">//		GPIO_Write(LEDPORT,0x0000); //直接数值操作将变量值写入LED</span></span><br><span class="line"><span class="comment">//		delay_s(2); //延时1秒</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>led.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//LED灯的接口初始化</span></span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure;<span class="comment">//定义GPIO端口初始化参数</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC,ENABLE);<span class="comment">//在时钟层面启动IO端口       </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = LED1 | LED2; <span class="comment">//选择端口号（0~15或all）设置IO端口的端口号                        </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//选择IO接口工作方式   推挽输出模式 使用大电流控制LED灯点亮     </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//设置IO接口速度（2/10/50MHz）输出的时候需要设置，输入的时候不用设置.    </span></span><br><span class="line">	GPIO_Init(LEDPORT, &amp;GPIO_InitStructure);<span class="comment">//将上面内容写入到IO端口对应的寄存器中			</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p><code>led.h</code></p>
<p><em>主要用来定义一些宏文件</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_H	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define LED1 PBout(0)// PB0</span></span><br><span class="line"><span class="comment">//#define LED2 PBout(1)// PB1	</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEDPORT	GPIOB	<span class="comment">//定义IO接口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1	GPIO_Pin_0	<span class="comment">//定义IO接口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED2	GPIO_Pin_1	<span class="comment">//定义IO接口</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">		 				    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法五：</span><br><span class="line">PBout(1)&#x3D;1;&#x2F;&#x2F;控制B端口的1号脚为高电平</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="1-3-2延时函数"><a href="#1-3-2延时函数" class="headerlink" title="1.3.2延时函数"></a>1.3.2延时函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AHB_INPUT  72  <span class="comment">//请按RCC中设置的AHB时钟频率填写到这里（单位MHz）</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 uS)</span></span>&#123; <span class="comment">//uS微秒级延时程序（参考值即是延时数，72MHz时最大值233015）	</span></span><br><span class="line">	SysTick-&gt;LOAD=AHB_INPUT*uS;      <span class="comment">//重装计数初值（当主频是72MHz，72次为1微秒）</span></span><br><span class="line">	SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空定时器的计数器</span></span><br><span class="line">	SysTick-&gt;CTRL=<span class="number">0x00000005</span>;<span class="comment">//时钟源HCLK，打开定时器</span></span><br><span class="line">	<span class="keyword">while</span>(!(SysTick-&gt;CTRL&amp;<span class="number">0x00010000</span>)); <span class="comment">//等待计数到0</span></span><br><span class="line">	SysTick-&gt;CTRL=<span class="number">0x00000004</span>;<span class="comment">//关闭定时器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 ms)</span></span>&#123; <span class="comment">//mS毫秒级延时程序（参考值即是延时数，最大值65535）	 		  	  </span></span><br><span class="line">	<span class="keyword">while</span>( ms-- != <span class="number">0</span>)&#123;</span><br><span class="line">		delay_us(<span class="number">1000</span>);	<span class="comment">//调用1000微秒的延时</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_s</span><span class="params">(u16 s)</span></span>&#123; <span class="comment">//S秒级延时程序（参考值即是延时数，最大值65535）	 		  	  </span></span><br><span class="line">	<span class="keyword">while</span>( s-- != <span class="number">0</span>)&#123;</span><br><span class="line">		delay_ms(<span class="number">1000</span>);	<span class="comment">//调用1000毫秒的延时</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h4 id="1-3-3-呼吸灯程序"><a href="#1-3-3-呼吸灯程序" class="headerlink" title="1.3.3 呼吸灯程序"></a>1.3.3 呼吸灯程序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> <span class="comment">//STM32头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	<span class="comment">//定义需要的变量</span></span><br><span class="line">	u8 MENU;</span><br><span class="line">	u16 t,i;</span><br><span class="line">	<span class="comment">//初始化程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();</span><br><span class="line">	<span class="comment">//设置变量的初始值</span></span><br><span class="line">	MENU = <span class="number">0</span>;</span><br><span class="line">	t = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//主循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">//菜单0</span></span><br><span class="line">		<span class="keyword">if</span>(MENU == <span class="number">0</span>)&#123; <span class="comment">//变亮循环</span></span><br><span class="line">			<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">				GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">1</span>)); <span class="comment">//LED1接口输出高电平1</span></span><br><span class="line">				delay_us(t); <span class="comment">//延时</span></span><br><span class="line">				GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">0</span>)); <span class="comment">//LED1接口输出低电平0</span></span><br><span class="line">				delay_us(<span class="number">501</span>-t); <span class="comment">//延时</span></span><br><span class="line">			&#125;</span><br><span class="line">			t++;</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="number">500</span>)&#123;</span><br><span class="line">				MENU = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//菜单1</span></span><br><span class="line">		<span class="keyword">if</span>(MENU == <span class="number">1</span>)&#123; <span class="comment">//变暗循环</span></span><br><span class="line">			<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">				GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">1</span>)); <span class="comment">//LED1接口输出高电平1</span></span><br><span class="line">				delay_us(t); <span class="comment">//延时</span></span><br><span class="line">				GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">0</span>)); <span class="comment">//LED1接口输出低电平0</span></span><br><span class="line">				delay_us(<span class="number">501</span>-t); <span class="comment">//延时</span></span><br><span class="line">			&#125;</span><br><span class="line">			t--;</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">				MENU = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-4按键控制LED灯程序-微动开关按键操作"><a href="#1-3-4按键控制LED灯程序-微动开关按键操作" class="headerlink" title="1.3.4按键控制LED灯程序(微动开关按键操作)"></a>1.3.4按键控制LED灯程序(微动开关按键操作)</h4><p><code>key.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//微动开关的接口初始化</span></span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure; <span class="comment">//定义GPIO的初始化枚举结构	</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC,ENABLE);       </span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = KEY1; <span class="comment">//选择端口号（0~15或all）                        </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//选择IO接口工作方式 //上拉电阻       </span></span><br><span class="line"><span class="comment">//    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //设置IO接口速度（2/10/50MHz）    </span></span><br><span class="line">	GPIO_Init(KEYPORT,&amp;GPIO_InitStructure);			</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>与led.c不同的是IO端口的工作方式为上拉电阻，无需设置IO接口的速度.</p>
<p><code>key.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __KEY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KEY_H	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEYPORT	GPIOB	<span class="comment">//定义IO接口组</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY1	GPIO_Pin_2	<span class="comment">//定义IO接口</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//初始化</span></span><br><span class="line"></span><br><span class="line">		 				    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>key.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//微动开关的接口初始化</span></span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure; <span class="comment">//定义GPIO的初始化枚举结构	</span></span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA,ENABLE);       </span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = KEY1 | KEY2; <span class="comment">//选择端口号（0~15或all）                        </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; <span class="comment">//选择IO接口工作方式 //上拉电阻       </span></span><br><span class="line"><span class="comment">//    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; //设置IO接口速度（2/10/50MHz）    </span></span><br><span class="line">	GPIO_Init(KEYPORT,&amp;GPIO_InitStructure);			</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    <code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> <span class="comment">//STM32头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	u8 a; <span class="comment">//定义变量</span></span><br><span class="line">	<span class="comment">//初始化程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();<span class="comment">//LED初始化</span></span><br><span class="line"></span><br><span class="line">	KEY_Init();<span class="comment">//按键初始化</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//主循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//示例1：无锁存</span></span><br><span class="line">		<span class="keyword">if</span>(GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平 如果读到的为高电平即为1 </span></span><br><span class="line">			GPIO_ResetBits(LEDPORT,LED1); <span class="comment">//LED灯都为低电平（0） </span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;	</span><br><span class="line">        	GPIO_SetBits(LEDPORT,LED1); <span class="comment">//LED灯都为高电平（1） </span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210219121822382.png" alt="image-20210219121822382"></p>
<p><code>方法二</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_WriteBit(LEDPORT,LED1,(BitAction)(!GPIO_ReadInputDataBit(KEYPORT,KEY1))); </span><br></pre></td></tr></table></figure>
<p><code>方法三：（有锁存）经典按键操作</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">	delay_ms(<span class="number">20</span>); <span class="comment">//延时去抖动</span></span><br><span class="line">	<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">		GPIO_WriteBit(LEDPORT,LED1,(BitAction)(<span class="number">1</span>-GPIO_ReadOutputDataBit(LEDPORT,LED1))); <span class="comment">//LED取反</span></span><br><span class="line">		<span class="keyword">while</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1)); <span class="comment">//等待按键松开 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>方法四：二进制小灯控制示例</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">	delay_ms(<span class="number">20</span>); <span class="comment">//延时20ms去抖动</span></span><br><span class="line">	<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">		<span class="comment">//在2个LED上显示二进制加法</span></span><br><span class="line">		a++; <span class="comment">//变量加1</span></span><br><span class="line">		<span class="keyword">if</span>(a&gt;<span class="number">3</span>)&#123; <span class="comment">//当变量大于3时清0</span></span><br><span class="line">			a=<span class="number">0</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		GPIO_Write(LEDPORT,a); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line">		<span class="keyword">while</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1)); <span class="comment">//等待按键松开 </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二-FLASH读写程序"><a href="#二-FLASH读写程序" class="headerlink" title="二.FLASH读写程序"></a>二.FLASH读写程序</h2><p><code>flash.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flash.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FLASH写入数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FLASH_W</span><span class="params">(u32 add,u16 dat)</span></span>&#123; <span class="comment">//参数1：32位FLASH地址。参数2：16位数据</span></span><br><span class="line"><span class="comment">//	 RCC_HSICmd(ENABLE); //打开HSI时钟</span></span><br><span class="line">	 FLASH_Unlock();  <span class="comment">//解锁FLASH编程擦除控制器 flash 主要用于存储程序，为了防止程序出错，设置了一个操作锁 每次操作前只有先解锁才能操作</span></span><br><span class="line">     FLASH_ClearFlag(FLASH_FLAG_BSY|FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);<span class="comment">//清除标志位</span></span><br><span class="line">     FLASH_ErasePage(add);     <span class="comment">//擦除指定地址页</span></span><br><span class="line">     FLASH_ProgramHalfWord(add,dat); <span class="comment">//从指定页的addr地址开始写</span></span><br><span class="line">     FLASH_ClearFlag(FLASH_FLAG_BSY|FLASH_FLAG_EOP|FLASH_FLAG_PGERR|FLASH_FLAG_WRPRTERR);<span class="comment">//清除标志位</span></span><br><span class="line">     FLASH_Lock();    <span class="comment">//锁定FLASH编程擦除控制器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FLASH读出数据</span></span><br><span class="line"><span class="function">u16 <span class="title">FLASH_R</span><span class="params">(u32 add)</span></span>&#123; <span class="comment">//参数1：32位读出FLASH地址。返回值：16位数据</span></span><br><span class="line">	u16 a;</span><br><span class="line">    a = *(u16*)(add);<span class="comment">//从指定页的addr地址开始读</span></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>flash.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __FLASH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __FLASH_H 			   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FLASH_W</span><span class="params">(u32 add,u16 dat)</span></span>;</span><br><span class="line"><span class="function">u16 <span class="title">FLASH_R</span><span class="params">(u32 add)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210219142058928.png" alt="image-20210219142058928"></p>
<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> <span class="comment">//STM32头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flash.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLASH_START_ADDR  0x0801f000	  <span class="comment">//写入的起始地址</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	u16 a; <span class="comment">//定义变量</span></span><br><span class="line">	<span class="comment">//初始化程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();<span class="comment">//LED初始化</span></span><br><span class="line">	KEY_Init();<span class="comment">//按键初始化</span></span><br><span class="line"></span><br><span class="line">    a = FLASH_R(FLASH_START_ADDR);<span class="comment">//从指定页的地址读FLASH</span></span><br><span class="line"></span><br><span class="line">	GPIO_Write(LEDPORT,a); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//主循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//示例4：有锁存</span></span><br><span class="line">		<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">			delay_ms(<span class="number">20</span>); <span class="comment">//延时20ms去抖动</span></span><br><span class="line">			<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">				<span class="comment">//在2个LED上显示二进制加法</span></span><br><span class="line">				a++; <span class="comment">//变量加1</span></span><br><span class="line">				<span class="keyword">if</span>(a&gt;<span class="number">3</span>)&#123; <span class="comment">//当变量大于3时清0</span></span><br><span class="line">					a=<span class="number">0</span>; </span><br><span class="line">				&#125;</span><br><span class="line">				GPIO_Write(LEDPORT,a); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line"></span><br><span class="line">				FLASH_W(FLASH_START_ADDR,a); <span class="comment">//从指定页的地址写入FLASH</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">while</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1)); <span class="comment">//等待按键松开 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意事项：</p>
<p><img src="/images/image-20210219143155460.png" alt="image-20210219143155460"></p>
<h2 id="三-蜂鸣器驱动程序"><a href="#三-蜂鸣器驱动程序" class="headerlink" title="三.蜂鸣器驱动程序"></a>三.蜂鸣器驱动程序</h2><p>有源蜂鸣器和无源蜂鸣器的区别</p>
<p><img src="/images/image-20210219143521465.png" alt="image-20210219143521465"></p>
<p>两种蜂鸣器外观无区别。</p>
<p>硬件连接部分：</p>
<p><img src="/images/image-20210219143839689.png" alt="image-20210219143839689"></p>
<p>PB5输出低电平，使得三极管导通，蜂鸣器上电工作。</p>
<p>无源蜂鸣器，单纯地通电不能使蜂鸣器鸣响，反而会使蜂鸣器发热，时间长了会使蜂鸣器烧坏。</p>
<p>所以在不使用蜂鸣器的情况下PB5要输出高电平，使得三极管断开。</p>
<p>当蜂鸣器工作的时候，PB5不断输出一个高低变化的脉冲频率变化。</p>
<p>R2上拉电阻，使得PB5端口在没有使用的情况下三极管驱动电路平时保持在高电平的状态。</p>
<p><img src="/images/image-20210219144530710.png" alt="image-20210219144530710"></p>
<p><code>buzzer.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buzzer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//蜂鸣器的接口初始化</span></span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure; 	</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = BUZZER; <span class="comment">//选择端口号                        </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//选择IO接口工作方式       </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//设置IO接口速度（2/10/50MHz）    </span></span><br><span class="line">	GPIO_Init(BUZZERPORT, &amp;GPIO_InitStructure);	</span><br><span class="line">	</span><br><span class="line">	GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">1</span>)); <span class="comment">//蜂鸣器接口输出高电平1		</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_BEEP1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//蜂鸣器响一声</span></span><br><span class="line">	u16 i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line">		GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">0</span>)); <span class="comment">//蜂鸣器接口输出0</span></span><br><span class="line">		delay_us(<span class="number">500</span>); <span class="comment">//延时		</span></span><br><span class="line">		GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">1</span>)); <span class="comment">//蜂鸣器接口输出高电平1</span></span><br><span class="line">		delay_us(<span class="number">500</span>); <span class="comment">//延时		</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>buzzer.h</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BUZZER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __BUZZER_H	 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZERPORT	GPIOB	<span class="comment">//定义IO接口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZER	GPIO_Pin_5	<span class="comment">//定义IO接口</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_BEEP1</span><span class="params">(<span class="keyword">void</span>)</span></span>;<span class="comment">//响一声</span></span><br><span class="line"></span><br><span class="line">		 				    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> <span class="comment">//STM32头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flash.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buzzer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLASH_START_ADDR  0x0801f000	  <span class="comment">//写入的起始地址</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	u16 a; <span class="comment">//定义变量</span></span><br><span class="line">	<span class="comment">//初始化程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();<span class="comment">//LED初始化</span></span><br><span class="line">	KEY_Init();<span class="comment">//按键初始化</span></span><br><span class="line"></span><br><span class="line">	BUZZER_Init();<span class="comment">//蜂鸣器初始化</span></span><br><span class="line">	BUZZER_BEEP1();<span class="comment">//蜂鸣器音1</span></span><br><span class="line"></span><br><span class="line">    a = FLASH_R(FLASH_START_ADDR);<span class="comment">//从指定页的地址读FLASH</span></span><br><span class="line"></span><br><span class="line">	GPIO_Write(LEDPORT,a|<span class="number">0xfffc</span>&amp;GPIO_ReadOutputData(LEDPORT)); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//主循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//示例4：有锁存</span></span><br><span class="line">		<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">			delay_ms(<span class="number">20</span>); <span class="comment">//延时20ms去抖动</span></span><br><span class="line">			<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">				<span class="comment">//在2个LED上显示二进制加法</span></span><br><span class="line">				a++; <span class="comment">//变量加1</span></span><br><span class="line">				<span class="keyword">if</span>(a&gt;<span class="number">3</span>)&#123; <span class="comment">//当变量大于3时清0</span></span><br><span class="line">					a=<span class="number">0</span>; </span><br><span class="line">				&#125;</span><br><span class="line">				GPIO_Write(LEDPORT,a|<span class="number">0xfffc</span>&amp;GPIO_ReadOutputData(LEDPORT)); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line">			</span><br><span class="line">				BUZZER_BEEP1();<span class="comment">//蜂鸣器音1</span></span><br><span class="line"></span><br><span class="line">				FLASH_W(FLASH_START_ADDR,a); <span class="comment">//从指定页的地址写入FLASH</span></span><br><span class="line">				<span class="keyword">while</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1)); <span class="comment">//等待按键松开 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="四-MIDI音乐播放程序"><a href="#四-MIDI音乐播放程序" class="headerlink" title="四.MIDI音乐播放程序"></a>四.MIDI音乐播放程序</h2><p><img src="/images/image-20210219150247488.png" alt="image-20210219150247488"></p>
<p><code>buzzer.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buzzer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//蜂鸣器的接口初始化</span></span><br><span class="line">	GPIO_InitTypeDef  GPIO_InitStructure; 	</span><br><span class="line">    GPIO_InitStructure.GPIO_Pin = BUZZER; <span class="comment">//选择端口号                        </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; <span class="comment">//选择IO接口工作方式       </span></span><br><span class="line">    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//设置IO接口速度（2/10/50MHz）    </span></span><br><span class="line">	GPIO_Init(BUZZERPORT, &amp;GPIO_InitStructure);	</span><br><span class="line">	</span><br><span class="line">	GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">1</span>)); <span class="comment">//蜂鸣器接口输出高电平1		</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BUZZER_BEEP1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//蜂鸣器响一声</span></span><br><span class="line">	u16 i;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">200</span>;i++)&#123;</span><br><span class="line">		GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">0</span>)); <span class="comment">//蜂鸣器接口输出0</span></span><br><span class="line">		delay_us(<span class="number">500</span>); <span class="comment">//延时		</span></span><br><span class="line">		GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">1</span>)); <span class="comment">//蜂鸣器接口输出高电平1</span></span><br><span class="line">		delay_us(<span class="number">500</span>); <span class="comment">//延时		</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uc16 music1[<span class="number">78</span>]=&#123; <span class="comment">//音乐1的数据表（奇数是音调，偶数是长度）</span></span><br><span class="line"><span class="number">330</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">523</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">659</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">392</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">1500</span>,</span><br><span class="line"><span class="number">330</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">523</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">659</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">392</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">784</span>,<span class="number">1500</span>,</span><br><span class="line"><span class="number">659</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">698</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">784</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">880</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">784</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">698</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">659</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">587</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">659</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">523</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">375</span>,</span><br><span class="line"><span class="number">523</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">523</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">494</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">392</span>,<span class="number">750</span>,</span><br><span class="line"><span class="number">440</span>,<span class="number">3000</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MIDI_PLAY</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123; <span class="comment">//MIDI音乐</span></span><br><span class="line">	u16 i,e;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">39</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(e=<span class="number">0</span>;e&lt;music1[i*<span class="number">2</span>]*music1[i*<span class="number">2</span>+<span class="number">1</span>]/<span class="number">1000</span>;e++)&#123;</span><br><span class="line">			GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">0</span>)); <span class="comment">//蜂鸣器接口输出0</span></span><br><span class="line">			delay_us(<span class="number">500000</span>/music1[i*<span class="number">2</span>]); <span class="comment">//延时		</span></span><br><span class="line">			GPIO_WriteBit(BUZZERPORT,BUZZER,(BitAction)(<span class="number">1</span>)); <span class="comment">//蜂鸣器接口输出高电平1</span></span><br><span class="line">			delay_us(<span class="number">500000</span>/music1[i*<span class="number">2</span>]); <span class="comment">//延时	</span></span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>buzzer.h</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifndef __BUZZER_H</span><br><span class="line">#define __BUZZER_H	 </span><br><span class="line">#include &quot;sys.h&quot;</span><br><span class="line"></span><br><span class="line">#define BUZZERPORT	GPIOB	&#x2F;&#x2F;定义IO接口</span><br><span class="line">#define BUZZER	GPIO_Pin_5	&#x2F;&#x2F;定义IO接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void BUZZER_Init(void);&#x2F;&#x2F;初始化</span><br><span class="line">void BUZZER_BEEP1(void);&#x2F;&#x2F;响一声</span><br><span class="line">void MIDI_PLAY(void);</span><br><span class="line">		 				    </span><br><span class="line">#endif</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>main.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stm32f10x.h&quot;</span> <span class="comment">//STM32头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sys.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;led.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;key.h&quot;</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;flash.h&quot;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;buzzer.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FLASH_START_ADDR  0x0801f000	  <span class="comment">//写入的起始地址</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span>&#123;<span class="comment">//主程序</span></span><br><span class="line">	u16 a; <span class="comment">//定义变量</span></span><br><span class="line">	<span class="comment">//初始化程序</span></span><br><span class="line">	RCC_Configuration(); <span class="comment">//时钟设置</span></span><br><span class="line">	LED_Init();<span class="comment">//LED初始化</span></span><br><span class="line">	KEY_Init();<span class="comment">//按键初始化</span></span><br><span class="line"></span><br><span class="line">	BUZZER_Init();<span class="comment">//蜂鸣器初始化</span></span><br><span class="line"><span class="comment">//	BUZZER_BEEP1();//蜂鸣器音1</span></span><br><span class="line">	MIDI_PLAY(); <span class="comment">//播放MIDI音乐</span></span><br><span class="line"></span><br><span class="line">    a = FLASH_R(FLASH_START_ADDR);<span class="comment">//从指定页的地址读FLASH</span></span><br><span class="line">	GPIO_Write(LEDPORT,a|<span class="number">0xfffc</span>&amp;GPIO_ReadOutputData(LEDPORT)); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//主循环</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//示例4：有锁存</span></span><br><span class="line">		<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">			delay_ms(<span class="number">20</span>); <span class="comment">//延时20ms去抖动</span></span><br><span class="line">			<span class="keyword">if</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1))&#123; <span class="comment">//读按键接口的电平</span></span><br><span class="line">				<span class="comment">//在2个LED上显示二进制加法</span></span><br><span class="line">				a++; <span class="comment">//变量加1</span></span><br><span class="line">				<span class="keyword">if</span>(a&gt;<span class="number">3</span>)&#123; <span class="comment">//当变量大于3时清0</span></span><br><span class="line">					a=<span class="number">0</span>; </span><br><span class="line">				&#125;</span><br><span class="line">				GPIO_Write(LEDPORT,a|<span class="number">0xfffc</span>&amp;GPIO_ReadOutputData(LEDPORT)); <span class="comment">//直接数值操作将变量值写入LED（LED在GPIOB组的PB0和PB1上）</span></span><br><span class="line">			</span><br><span class="line">				BUZZER_BEEP1();<span class="comment">//蜂鸣器音1</span></span><br><span class="line"></span><br><span class="line">				FLASH_W(FLASH_START_ADDR,a); <span class="comment">//从指定页的地址写入FLASH</span></span><br><span class="line">				<span class="keyword">while</span>(!GPIO_ReadInputDataBit(KEYPORT,KEY1)); <span class="comment">//等待按键松开 </span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="五-USART驱动程序"><a href="#五-USART驱动程序" class="headerlink" title="五.USART驱动程序"></a>五.USART驱动程序</h2>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>硬件</tag>
        <tag>技术</tag>
        <tag>学习笔记</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>R-CNN系列</title>
    <url>/2021/02/20/R-CNN%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>RCNN算法流程可以分为4步</p>
<blockquote>
<p>一张图像生成1k~2k个候选区（使用Selective Search方法)</p>
<p>对每个候选区，使用深度网络提取特征</p>
<p>特征送入每一类的SVM分类器，判别是否属于该类</p>
<p>使用回归器精修候选框的位置</p>
</blockquote>
<p><img src="/images/image-20210220224613367.png" alt="image-20210220224613367"></p>
<h2 id="RCNN"><a href="#RCNN" class="headerlink" title="RCNN"></a>RCNN</h2><h3 id="1-候选区域的生成"><a href="#1-候选区域的生成" class="headerlink" title="1.候选区域的生成"></a>1.候选区域的生成</h3><p>利用Selective Search 算法通过图像分割的方法得到一些原始区域，然后使用一些合并策略将这些区域合并，得到一个层次化的区域结构，而这些结构就包含可能需要的物体。</p>
<p><img src="/images/image-20210220224921809.png" alt="image-20210220224921809"></p>
<a id="more"></a>
<h3 id="2-对每个候选区域，使用深度网络提取特征"><a href="#2-对每个候选区域，使用深度网络提取特征" class="headerlink" title="2.对每个候选区域，使用深度网络提取特征"></a>2.对每个候选区域，使用深度网络提取特征</h3><p>将2000个候选区域缩放到227x227 ，接着将候选区域输入到事先训练好的AlexNet CNN 网络中，获得4096维的特征，得到2000x4096维矩阵。</p>
<h3 id="3-特征送入到每一类的SVM分类器中，判定类别。"><a href="#3-特征送入到每一类的SVM分类器中，判定类别。" class="headerlink" title="3.特征送入到每一类的SVM分类器中，判定类别。"></a>3.特征送入到每一类的SVM分类器中，判定类别。</h3><p><img src="/images/image-20210220225355794.png" alt="image-20210220225355794"></p>
<p><img src="/images/image-20210220225637704.png" alt="image-20210220225637704"></p>
<p>非极大值抑制剔除重复建议框：</p>
<p>1.寻找得分最高的目标。</p>
<p>2.计算其他目标与该目标的iou值</p>
<p>3.删除所有iou值大于给点阈值的目标</p>
<p><img src="/images/image-20210220225809207.png" alt="image-20210220225809207"></p>
<h3 id="4-使用回归器精细修正候选框位置"><a href="#4-使用回归器精细修正候选框位置" class="headerlink" title="4.使用回归器精细修正候选框位置"></a>4.使用回归器精细修正候选框位置</h3><p><img src="/images/image-20210220230607096.png" alt="image-20210220230607096"></p>
<p><img src="/images/image-20210220230715121.png" alt="image-20210220230715121"></p>
<h3 id="5-存在的问题"><a href="#5-存在的问题" class="headerlink" title="5.存在的问题"></a>5.存在的问题</h3><p><img src="/images/image-20210220230742445.png" alt="image-20210220230742445"></p>
<h2 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h2><p>第二步完全不同<img src="/images/image-20210220231250464.png" alt="image-20210220231250464"></p>
<p><img src="/images/image-20210220231653267.png" alt="image-20210220231653267"></p>
<p><img src="/images/image-20210220231710202.png" alt="image-20210220231710202"></p>
<p><img src="/images/image-20210220231913323.png" alt="image-20210220231913323"></p>
<p><img src="/images/image-20210220231927215.png" alt="image-20210220231927215"></p>
<p><img src="/images/image-20210220232033464.png" alt="image-20210220232033464"><img src="/images/image-20210221235116193.png" alt="image-20210221235116193"></p>
<p><img src="/images/image-20210221235413000.png" alt="image-20210221235413000"></p>
<h2 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h2><p><img src="/images/image-20210221235449162.png" alt="image-20210221235449162"></p>
<p><img src="/images/image-20210221235526354.png" alt="image-20210221235526354"></p>
<p><img src="/images/image-20210221235544561.png" alt="image-20210221235544561"></p>
<p><img src="/images/image-20210222000053961.png" alt="image-20210222000053961"></p>
<p><img src="/images/image-20210222000405863.png" alt="image-20210222000405863"></p>
<p><img src="/images/image-20210222000726549.png" alt="image-20210222000726549"></p>
<p><img src="/images/image-20210222000914406.png" alt="image-20210222000914406"></p>
<p><img src="/images/image-20210222000932053.png" alt="image-20210222000932053"></p>
<p><img src="/images/image-20210222000950134.png" alt="image-20210222000950134"></p>
]]></content>
      <tags>
        <tag>cv</tag>
      </tags>
  </entry>
  <entry>
    <title>Ros</title>
    <url>/2021/07/14/Ros/</url>
    <content><![CDATA[<h2 id="1-ROS-Hello-world"><a href="#1-ROS-Hello-world" class="headerlink" title="1.ROS Hello world"></a>1.ROS Hello world</h2><h3 id="1-1-C-版Hello-world"><a href="#1-1-C-版Hello-world" class="headerlink" title="1.1 C++ 版Hello world"></a>1.1 C++ 版Hello world</h3><p><strong>一.主要流程如下:</strong></p>
<p>1.创建一个工作空间</p>
<p>2.创建一个功能包</p>
<p>3.编辑源文件</p>
<p>4.编辑配置文件</p>
<p>5.编译并执行 </p>
<p><strong>创建工作空间并初始化</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p name&#x2F;src</span><br><span class="line">cd name</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p>上述命令，首先会创建一个工作空间以及一个 src 子目录，然后再进入工作空间调用 catkin_make命令编译。</p>
<p><strong>进入src创建ros包并添加依赖</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd src</span><br><span class="line">catkin_create_pkg 自定义包 roscpp rospy std_msgs</span><br></pre></td></tr></table></figure>
<p>上述命令，会在工作空间下生成一个功能包，该功能包依赖于 roscpp、rospy 与 std_msgs，其中roscpp是使用C++实现的库，而rospy则是使用python实现的库，std_msgs是标准消息库，创建ROS功能包时，一般都会依赖这三个库实现。</p>
<p><strong>进入ros包的src目录编辑源文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 自定义包</span><br></pre></td></tr></table></figure>
<p><strong>C++源码实现</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//执行ros节点初始化</span></span><br><span class="line">    ros::init(argc,argv,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建ros节点句柄</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    <span class="comment">//控制台输出 hello world;</span></span><br><span class="line">    ROS_INFO(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>编辑ros包下的Cmakelist.txt 文件</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">add_executable(步骤<span class="number">3</span>的源文件名</span><br><span class="line">  src/步骤<span class="number">3</span>的源文件名.cpp</span><br><span class="line">)</span><br><span class="line">target_link_libraries(步骤<span class="number">3</span>的源文件名</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>进入工作空间目录并编译</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 自定义空间名称</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<h3 id="1-2-Python-版-Hello-world"><a href="#1-2-Python-版-Hello-world" class="headerlink" title="1.2 Python 版 Hello world"></a>1.2 Python 版 Hello world</h3><p><strong>进入ros包添加scripts目录并编辑python文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ros包</span><br><span class="line">mkdir scripts</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>新建python文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Python 版 HelloWorld</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;Hello World!!!!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>为python文件添加可执行权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x 自定义名称.py</span><br></pre></td></tr></table></figure>
<p><strong>编辑ros包下的CamakeList.txt文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catkin_install_python(PROGRAMS scripts&#x2F;自定义文件名.py</span><br><span class="line">  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>进入工作空间目录并编译</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 自定义空间名称</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p><strong>进入工作空间目录并执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd 工作空间</span><br><span class="line">source .&#x2F;devel&#x2F;setup.bash</span><br><span class="line">rourun 包名 自定义文件名.py</span><br></pre></td></tr></table></figure>
<h3 id="第一章总结"><a href="#第一章总结" class="headerlink" title="第一章总结"></a>第一章总结</h3><h4 id="①使用ros编写-C-版本hello-world"><a href="#①使用ros编写-C-版本hello-world" class="headerlink" title="①使用ros编写 C++ 版本hello world"></a>①使用ros编写 C++ 版本hello world</h4><p><strong>创建环境</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mkdir -p testchapter1/src  <span class="comment">//创建工作环境</span></span><br><span class="line">cd testchapter1            <span class="comment">// 进入工作环境</span></span><br><span class="line">catkin_make                <span class="comment">// 编译ROS环境</span></span><br></pre></td></tr></table></figure>
<p><strong>进入src 创建包并添加依赖</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cd src </span><br><span class="line">catkin_create_pkg hellorosworld rospy roscpp std_msgs</span><br></pre></td></tr></table></figure>
<p><strong>进入包中的src文件 构建自定义名称源码</strong></p>
<p><strong>C++源文件</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//执行 ros 节点初始化</span></span><br><span class="line">    ros::init(argc,argv,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">//创建 ros 节点句柄(非必须)</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    <span class="comment">//控制台输出 hello world</span></span><br><span class="line">    ROS_INFO(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>编辑ROS 包下CMakeLists.txt中的环境配置文件</strong></p>
<p>149 136 行  add_executable  和target_link 代码块</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">add_executable($&#123;PROJECT_NAME&#125;_node src/hellorosworld_node.cpp)</span><br><span class="line"></span><br><span class="line">更改为：</span><br><span class="line">add_executable(hahaha src/自定义名称.cpp)  <span class="comment">//第一个参数为自定义节点名称，该节点映射到 参数2的c++文件当中</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">target_link_libraries($&#123;PROJECT_NAME&#125;_node</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">)</span><br><span class="line">target_link_libraries(hahaha</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">                      </span><br><span class="line">                      <span class="comment">//更改第一个参数为自定义节点名称 改节点映射到c++文件当中</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>编译文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在工作空间目录下</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p><strong>执行文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd work_space </span><br><span class="line">source .&#x2F;devel&#x2F;setup.bash</span><br><span class="line">rosrun 包名 节点名</span><br></pre></td></tr></table></figure>
<h4 id="②使用ros编写-python版本hello-world"><a href="#②使用ros编写-python版本hello-world" class="headerlink" title="②使用ros编写 python版本hello world"></a>②使用ros编写 python版本hello world</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ros包</span><br><span class="line">mkdir scripts </span><br></pre></td></tr></table></figure>
<p><strong>在scripts下新建python文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! &#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">    Python 版 HelloWorld</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">import rospy</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    rospy.init_node(&quot;Hello&quot;)</span><br><span class="line">    rospy.loginfo(&quot;Hello World!!!!&quot;)</span><br></pre></td></tr></table></figure>
<p><strong>为python 文件添加可执行权限</strong></p>
<p><code>chmod +x     自定义名.py</code></p>
<p><strong>编辑ROS包下的CMakeLists.txt中的环境配置文件</strong></p>
<p>162行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">catkin_install_python(PROGRAMS</span><br><span class="line">  scripts&#x2F;my_python_script</span><br><span class="line">  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">)</span><br><span class="line">修改一个参数 </span><br><span class="line">catkin_install_python(PROGRAMS</span><br><span class="line">  scripts&#x2F;自定义名.py</span><br><span class="line">  DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>编译文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd workspace </span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p><strong>执行文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source .&#x2F;devel&#x2F;setup.bash</span><br><span class="line">rosrun pack_name 自定义.py</span><br></pre></td></tr></table></figure>
<h4 id="③使用VScode编辑"><a href="#③使用VScode编辑" class="headerlink" title="③使用VScode编辑"></a>③使用VScode编辑</h4><p><strong>创建ROS空间</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p workspace&#x2F;src</span><br><span class="line">cd workspace </span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure>
<p><strong>进入Vscode</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd workspace</span><br><span class="line">code .</span><br></pre></td></tr></table></figure>
<p><strong>在vscode 中编译ros</strong></p>
<p>快捷键 ctrl + shift + B 调用编译，选择:<code>catkin_make:build</code></p>
<p>可以点击配置设置为默认，修改.vscode/tasks.json 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&#x2F;&#x2F; 有关 tasks.json 格式的文档，请参见</span><br><span class="line">		&#x2F;&#x2F; https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkId&#x3D;733558</span><br><span class="line">		&quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">		&quot;tasks&quot;: [</span><br><span class="line">			&#123;</span><br><span class="line">				&quot;label&quot;: &quot;catkin_make:debug&quot;, &#x2F;&#x2F;代表提示的描述性信息</span><br><span class="line">				&quot;type&quot;: &quot;shell&quot;,  &#x2F;&#x2F;可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行</span><br><span class="line">				&quot;command&quot;: &quot;catkin_make&quot;,&#x2F;&#x2F;这个是我们需要运行的命令</span><br><span class="line">				&quot;args&quot;: [],&#x2F;&#x2F;如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES&#x3D;“pac1;pac2”</span><br><span class="line">				&quot;group&quot;: &#123;&quot;kind&quot;:&quot;build&quot;,&quot;isDefault&quot;:true&#125;,</span><br><span class="line">				&quot;presentation&quot;: &#123;</span><br><span class="line">					&quot;reveal&quot;: &quot;always&quot;&#x2F;&#x2F;可选always或者silence，代表是否输出信息</span><br><span class="line">				&#125;,</span><br><span class="line">				&quot;problemMatcher&quot;: &quot;$msCompile&quot;</span><br><span class="line">			&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><strong>创建ros功能包</strong></p>
<p>选定 src 右击 —-&gt; create catkin package</p>
<p><strong>设置包名 添加依赖</strong></p>
<p><strong>在src下新建cpp文件</strong></p>
<p><strong>修改CMake 文件</strong></p>
<p><strong>运行</strong></p>
<h3 id="④launch-文件实现"><a href="#④launch-文件实现" class="headerlink" title="④launch 文件实现"></a>④launch 文件实现</h3><ol>
<li><p>选择包文件夹，添加launch文件夹</p>
</li>
<li><p>在launch文件夹下添加launch文件</p>
</li>
<li><p>编辑launch文件内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;!-- 添加执行节点--&gt;</span><br><span class="line">    &lt;!-- 乌龟GUI--&gt;</span><br><span class="line">    &lt;node pkg&#x3D;&quot;turtlesim&quot; type&#x3D;&quot;turtlesim_node&quot; name&#x3D;&quot;turtle_GUI&quot; &#x2F;&gt;</span><br><span class="line">     &lt;node pkg&#x3D;&quot;turtlesim&quot; type&#x3D;&quot;turtle_teleop_key&quot; name&#x3D;&quot;turtle_key&quot; &#x2F;&gt;</span><br><span class="line">     &lt;node pkg&#x3D;&quot;hellovscode&quot; type&#x3D;&quot;hellovscode_c&quot; name&#x3D;&quot;hello&quot; output&#x3D;&quot;screen&quot;&#x2F;&gt;</span><br><span class="line">     &lt;node pkg&#x3D;&quot;hellovscode&quot; type&#x3D;&quot;hellovscode_p.py&quot; name&#x3D;&quot;hellop&quot; output&#x3D;&quot;screen&quot;&#x2F;&gt;</span><br><span class="line">    &lt;!-- --&gt;</span><br><span class="line">&lt;&#x2F;launch&gt;</span><br></pre></td></tr></table></figure>
<p>运行launch 文件</p>
<p><code>roslaunch 包名 launch文件名</code></p>
<p>运行结果：一次启动了多个节点</p>
</li>
</ol>
<h2 id="2-ROS通信机制"><a href="#2-ROS通信机制" class="headerlink" title="2.ROS通信机制"></a>2.ROS通信机制</h2><p>ROS 中的基本通信机制主要有如下三种实现策略：</p>
<ul>
<li>话题通信（发布订阅模式)</li>
<li>服务通信（请求响应模式）</li>
<li>参数服务器（参数共享模式）</li>
</ul>
<h3 id="2-1话题通信"><a href="#2-1话题通信" class="headerlink" title="2.1话题通信"></a>2.1话题通信</h3><p>话题通信是ROS中使用频率最高的一种通信模式，话题通信是基于发布订阅模式的，也即：一个节点发布消息，另一个节点订阅改消息。</p>
<p><strong>C++版实现</strong></p>
<p><strong>1.发布方</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sstream&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    发布方实现:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">            ROS中的文本类型 std_msgs/String.h</span></span><br><span class="line"><span class="comment">        2.初始化ros节点 </span></span><br><span class="line"><span class="comment">        3.创建节点句柄</span></span><br><span class="line"><span class="comment">        4.创建发布者对象</span></span><br><span class="line"><span class="comment">        5.编写发布逻辑并发布数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>  *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* code */</span></span><br><span class="line">    setlocale(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化节点</span></span><br><span class="line">    ros::init(argc,argv,<span class="string">&quot;node_name&quot;</span>);</span><br><span class="line">    <span class="comment">//创建节点句柄</span></span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    ROS_INFO(<span class="string">&quot;hello world!!!&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建发布者对象</span></span><br><span class="line">    ros::Publisher pub=nh.advertise&lt;std_msgs::String&gt;(<span class="string">&quot;fang&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//编写发布逻辑并发布数据</span></span><br><span class="line">    <span class="comment">// 先创建被发布的消息，编写循环，循环中发布消息</span></span><br><span class="line">    <span class="comment">// 要求以10Hz的频率发布数据，并且在文本后添加序号</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="comment">//编写循环</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置编号</span></span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::ok)</span><br><span class="line">    &#123;   </span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// msg.data = &quot;hello&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串的拼接</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">        ss&lt;&lt;<span class="string">&quot;hello --&gt;&quot;</span> &lt;&lt;count;</span><br><span class="line"></span><br><span class="line">        msg.data=ss.str();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pub.publish(msg);</span></span><br><span class="line"></span><br><span class="line">        pub.publish(msg);</span><br><span class="line">        <span class="comment">//添加日至</span></span><br><span class="line">        ROS_INFO(<span class="string">&quot;发布的数据:%s&quot;</span>,ss.str().c_str());</span><br><span class="line">        rate.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>2.接收方</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sstream&quot;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    发布方实现:</span></span><br><span class="line"><span class="comment">        1.包含头文件</span></span><br><span class="line"><span class="comment">            ROS中的文本类型 std_msgs/String.h</span></span><br><span class="line"><span class="comment">        2.初始化ros节点 </span></span><br><span class="line"><span class="comment">        3.创建节点句柄</span></span><br><span class="line"><span class="comment">        4.创建发布者对象</span></span><br><span class="line"><span class="comment">        5.编写发布逻辑并发布数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doMsg</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr &amp;msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//通过msg参数获取并订阅到的参数</span></span><br><span class="line">    ROS_INFO(<span class="string">&quot;翠花订阅到的数据：%s&quot;</span>,msg-&gt;data.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>  *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   setlocale(LC_ALL,<span class="string">&quot;&quot;</span>);</span><br><span class="line">   ros::init(argc,argv,<span class="string">&quot;cuiHua&quot;</span>);</span><br><span class="line"></span><br><span class="line">   ros::NodeHandle nh;</span><br><span class="line"></span><br><span class="line">   ros::Subscriber sub = nh.subscribe(<span class="string">&quot;fang&quot;</span>,<span class="number">10</span>,doMsg);</span><br><span class="line">   ros::spin();</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>配置CMakeLists.txt</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_executable(demo1_pub src&#x2F;demo01_pub.cpp)</span><br><span class="line">add_executable(demo1_sub src&#x2F;demo01_sub.cpp)</span><br><span class="line">target_link_libraries(demo1_pub</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">)</span><br><span class="line">target_link_libraries(demo1_sub</span><br><span class="line">  $&#123;catkin_LIBRARIES&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>执行</strong></p>
<p>1.启动roscore</p>
<p>2.启动发布节点</p>
<p>3.启动订阅节点</p>
<hr>
<p><strong>PYTHON版实现</strong></p>
<p>流程：</p>
<ul>
<li>编写发布方实现</li>
<li>编写订阅方实现</li>
<li>为python文件添加可执行权限</li>
<li>编辑配置文件</li>
<li>编译并运行</li>
</ul>
<p><strong>发布方</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    需求: 实现基本的话题通信，一方发布数据，一方接收数据，</span></span><br><span class="line"><span class="string">         实现的关键点:</span></span><br><span class="line"><span class="string">         1.发送方</span></span><br><span class="line"><span class="string">         2.接收方</span></span><br><span class="line"><span class="string">         3.数据(此处为普通文本)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         PS: 二者需要设置相同的话题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    消息发布方:</span></span><br><span class="line"><span class="string">        循环发布信息:HelloWorld 后缀数字编号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    实现流程:</span></span><br><span class="line"><span class="string">        1.导包 </span></span><br><span class="line"><span class="string">        2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line"><span class="string">        3.实例化 发布者 对象</span></span><br><span class="line"><span class="string">        4.组织被发布的数据，并编写逻辑发布数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#1.导包 </span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;talker_p&quot;</span>)</span><br><span class="line">    <span class="comment">#3.实例化 发布者 对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;chatter&quot;</span>,String,queue_size=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#4.组织被发布的数据，并编写逻辑发布数据</span></span><br><span class="line">    msg = String()  <span class="comment">#创建 msg 对象</span></span><br><span class="line">    msg_front = <span class="string">&quot;hello 你好&quot;</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment">#计数器 </span></span><br><span class="line">    <span class="comment"># 设置循环频率</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shu	tdown():</span><br><span class="line"></span><br><span class="line">        <span class="comment">#拼接字符串</span></span><br><span class="line">        msg.data = msg_front + <span class="built_in">str</span>(count)</span><br><span class="line"></span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;写出的数据:%s&quot;</span>,msg.data)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>订阅方</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    需求: 实现基本的话题通信，一方发布数据，一方接收数据，</span></span><br><span class="line"><span class="string">         实现的关键点:</span></span><br><span class="line"><span class="string">         1.发送方</span></span><br><span class="line"><span class="string">         2.接收方</span></span><br><span class="line"><span class="string">         3.数据(此处为普通文本)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">         PS: 二者需要设置相同的话题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    消息发布方:</span></span><br><span class="line"><span class="string">        循环发布信息:HelloWorld 后缀数字编号</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    实现流程:</span></span><br><span class="line"><span class="string">        1.导包 </span></span><br><span class="line"><span class="string">        2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line"><span class="string">        3.实例化 发布者 对象</span></span><br><span class="line"><span class="string">        4.组织被发布的数据，并编写逻辑发布数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#1.导包 </span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;talker_p&quot;</span>)</span><br><span class="line">    <span class="comment">#3.实例化 发布者 对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;chatter&quot;</span>,String,queue_size=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#4.组织被发布的数据，并编写逻辑发布数据</span></span><br><span class="line">    msg = String()  <span class="comment">#创建 msg 对象</span></span><br><span class="line">    msg_front = <span class="string">&quot;hello 你好&quot;</span></span><br><span class="line">    count = <span class="number">0</span>  <span class="comment">#计数器 </span></span><br><span class="line">    <span class="comment"># 设置循环频率</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line"></span><br><span class="line">        <span class="comment">#拼接字符串</span></span><br><span class="line">        msg.data = msg_front + <span class="built_in">str</span>(count)</span><br><span class="line"></span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;写出的数据:%s&quot;</span>,msg.data)</span><br><span class="line">        count += <span class="number">1</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>c++回炉重造</title>
    <url>/2021/03/30/c-%E5%9B%9E%E7%82%89%E9%87%8D%E9%80%A0/</url>
    <content><![CDATA[<h3 id="一-基础内容"><a href="#一-基础内容" class="headerlink" title="一.基础内容"></a>一.基础内容</h3><a id="more"></a>
<h5 id="1-框架"><a href="#1-框架" class="headerlink" title="1.框架"></a>1.框架</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="2-输出语句"><a href="#2-输出语句" class="headerlink" title="2.输出语句"></a>2.输出语句</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;helllo world&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h5 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a>3.注释</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.单行注释</span></span><br><span class="line"><span class="comment">/* 多行注释 */</span></span><br></pre></td></tr></table></figure>
<h5 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h5><p>方便管理内存空间 </p>
<p>创建语法 数据类型 变量名 =变量初始值 </p>
<h5 id="5-常量"><a href="#5-常量" class="headerlink" title="5. 常量"></a>5. 常量</h5><p>作用：用于记录程序中不可修改的数值 </p>
<p>定义方法 1.# define 宏常量 <code>#define</code></p>
<ol>
<li><code>const</code> 修饰变量</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Day 7</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> month =<span class="number">12</span>;</span><br></pre></td></tr></table></figure>
<h5 id="6-sizeof-关键字"><a href="#6-sizeof-关键字" class="headerlink" title="6.sizeof 关键字"></a>6.sizeof 关键字</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">short</span> num = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; int 类型占用的内存是&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; short 类型占用的内存是&quot;</span> &lt;&lt; <span class="keyword">sizeof</span>(num) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="7-数据类型"><a href="#7-数据类型" class="headerlink" title="7.数据类型"></a>7.数据类型</h5><p><code>chr</code> 字符型 </p>
<p><code>double</code>  <code>float</code>  <code>int</code>  and so on</p>
<p>创建字符 单引号 </p>
<h5 id="8-转义字符"><a href="#8-转义字符" class="headerlink" title="8.转义字符"></a>8.转义字符</h5><p><code>\n</code>换行符 <code>\t</code>  水平制表符 </p>
<h5 id="9-字符串类型"><a href="#9-字符串类型" class="headerlink" title="9.字符串类型"></a>9.字符串类型</h5><p>1.C风格字符串 : <code>char 变量名 [] = “字符串值 &quot;</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> a[]=<span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>
<p>2.C++ 风格 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> 变量名 =<span class="string">&quot;字符串值 &quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="10-布尔数据类型"><a href="#10-布尔数据类型" class="headerlink" title="10. 布尔数据类型"></a>10. 布尔数据类型</h5><ul>
<li>true —-真   1</li>
<li>false —- 假   0</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag= <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="11-数据的输入"><a href="#11-数据的输入" class="headerlink" title="11.数据的输入"></a>11.数据的输入</h5><p><code>cin&gt;&gt;a</code> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> a = <span class="number">1.14f</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="12-逻辑运算符"><a href="#12-逻辑运算符" class="headerlink" title="12. 逻辑运算符"></a>12. 逻辑运算符</h5><p><code>!a</code> 非a</p>
<p><code>&amp;&amp;</code> 与 </p>
<p><code>||</code> 或 </p>
<h5 id="13-switch-语句"><a href="#13-switch-语句" class="headerlink" title="13.switch 语句"></a>13.switch 语句</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">case</span> 结果<span class="number">1</span>：执行语句; <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">case</span> 结果<span class="number">2</span>：执行语句； <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="14-while-循环语句"><a href="#14-while-循环语句" class="headerlink" title="14.while 循环语句"></a>14.while 循环语句</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">作用：满足循环条件，执行循环语句 </span><br><span class="line">语法：<span class="keyword">while</span>（循环条件）&#123;循环语句&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;循环语句 &#125; <span class="keyword">while</span>(循环语句 );</span><br><span class="line"><span class="keyword">do</span> <span class="keyword">while</span>  会先执行一次循环语句 然后再判断条件 </span><br></pre></td></tr></table></figure>
<h5 id="15-for-循环"><a href="#15-for-循环" class="headerlink" title="15.for 循环"></a>15.for 循环</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="16-goto-语句"><a href="#16-goto-语句" class="headerlink" title="16.goto 语句"></a>16.goto 语句</h5><p>语法：<code>goto 标记</code></p>
<p>解释：如果标记的名称存在，执行到goto语句时，会跳转到标记位置 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">goto</span> FLAG;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">    </span><br><span class="line">    FLAG:</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;5&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-重点内容"><a href="#二-重点内容" class="headerlink" title="二.重点内容"></a>二.重点内容</h3><h5 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h5><p>特点：数组是一个集合里面存放了相同类型的数据元素</p>
<p>特点1.数组中的每一个数据都是相同的数据类型</p>
<p>特点2.数组是由连续的内存位置组成的</p>
<p>定义方式：</p>
<p>1.<code>数据类型</code> <code>数组名</code> <code>[数组长度]</code>;</p>
<p>2.<code>数据类型</code> <code>数组名[数组长度]</code>=<code>&#123;值1，值2...&#125;</code></p>
<p>3.<code>数据类型</code> <code>数组名[]</code>=<code>&#123;值1，值2...&#125;</code></p>
<h5 id="2-数组名用途"><a href="#2-数组名用途" class="headerlink" title="2.数组名用途"></a>2.数组名用途</h5><p>1.可以统计整个数组在内存中的长度 <code>sizeof(arr)</code></p>
<p>2.可以获取数组在内存中的首地址 <code>arr</code></p>
<p>3.查看一个元素的地址<code>&amp;arr[0]</code></p>
<h5 id="3-二维数组"><a href="#3-二维数组" class="headerlink" title="3.二维数组"></a>3.二维数组</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;&#125;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">int</span> arr[][<span class="number">3</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h5><ol>
<li>返回值类型</li>
<li>函数名</li>
<li>参数列表</li>
<li>函数体语句</li>
<li>return 表达式</li>
</ol>
<p>语法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 (参数列表)</span><br><span class="line">&#123;</span><br><span class="line">    函数体语句 </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> 表达式 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> add(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = num1 +num2;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">函数形参的改变并不会影响实参的变化</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>函数声明：</p>
<p>函数调用写在main函数之前，告诉函数main函数的存在</p>
<h5 id="4-函数的分文件编写"><a href="#4-函数的分文件编写" class="headerlink" title="4.函数的分文件编写"></a>4.函数的分文件编写</h5><p>作用：让代码结构更清晰</p>
<p>1.创建后缀名为.h的头文件</p>
<p>2.创建后缀名为.cpp的源文件</p>
<p>3.在头文件中写函数的声明</p>
<p>4.在源文件中写函数的定义 </p>
<p><code>swap.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>swap.cpp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2=temp;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>调用文件</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> a = <span class="number">1.14f</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a=&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	swap(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-指针"><a href="#5-指针" class="headerlink" title="5.指针"></a>5.指针</h5><p>作用：记录地址编号的作用 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.定义指针 </span></span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p;<span class="comment">//定义一个指针p</span></span><br><span class="line">p=&amp;a;<span class="comment">//指针的指向为a的地址</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;&lt;<span class="string">&quot;a的地址为&quot;</span>&lt;&lt;&amp;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;&lt;<span class="string">&quot;指针p为&quot;</span>&lt;&lt;p&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针前加*代表解引用去除内存中的数据 </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>占用内存 ：</p>
<p>32 位占用4个字节 64位占用8个字节 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> * p=a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;sizeof(int *)=&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">int</span> *)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;sizeof(float *)=&quot;</span>&lt;&lt;<span class="keyword">sizeof</span>(<span class="keyword">float</span> *)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指针变量指向内存编号为0的空间</span><br><span class="line">用途初始化</span><br><span class="line">int *p &#x3D;NULL</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="6-const-修饰指针"><a href="#6-const-修饰指针" class="headerlink" title="6.const 修饰指针"></a>6.const 修饰指针</h5><p>const 修饰指针有三种情况:</p>
<ol>
<li>const 修饰指针  — 常量指针 </li>
<li>const 修饰常量  — 指针常量</li>
<li>const 即修饰指针，又修饰常量</li>
</ol>
<p><em>示例</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> * p= &amp;a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p=&amp;a;</span><br><span class="line">*p=<span class="number">20</span>; 错误，指针指向的值不可以改;</span><br><span class="line">p=&amp;b;正确，指针指向可以改 ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p =&amp;a;</span><br><span class="line">常量指针 ;</span><br><span class="line">指针的指向不可以改，指针的值可以改;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;a;</span><br><span class="line">指针的指向和指针指向的值都不可修改 ;</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h5 id="7-结构体"><a href="#7-结构体" class="headerlink" title="7.结构体"></a>7.结构体</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Studens</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span> <span class="title">s1</span>;</span></span><br><span class="line">	s1.age = <span class="number">10</span>;</span><br><span class="line">	s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; s1.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Studens</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span> <span class="title">s1</span>;</span><span class="comment">//结构体变量创建的时候struct 关键字可以省略，但结构体定义的时候 struct 关键字不可以省略</span></span><br><span class="line">	s1.age = <span class="number">10</span>;</span><br><span class="line">	s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; s1.age &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; s1.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span> <span class="title">s3</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">20</span> &#125;;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; s3.age &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; s3.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="8-结构体数组"><a href="#8-结构体数组" class="headerlink" title="8.结构体数组"></a>8.结构体数组</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Studens</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span> <span class="title">stuArray</span>[8] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">20</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">30</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	stuArray[<span class="number">0</span>].name = <span class="string">&quot;六六&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name&quot;</span> &lt;&lt; stuArray[i].name &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; stuArray[i].age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="9-结构体指针"><a href="#9-结构体指针" class="headerlink" title="9.结构体指针"></a>9.结构体指针</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Studens</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Studens s = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">3</span> &#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span>* <span class="title">p</span> =</span> &amp;s;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name&quot;</span>&lt;&lt;p-&gt;name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="10-结构体嵌套结构体"><a href="#10-结构体嵌套结构体" class="headerlink" title="10.结构体嵌套结构体"></a>10.结构体嵌套结构体</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Studens</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> id;</span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Studens</span> <span class="title">stu</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	teacher t;</span><br><span class="line">	t.name = <span class="number">20</span>;</span><br><span class="line">	t.id = <span class="number">10</span>;</span><br><span class="line">	t.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t.stu.name = <span class="string">&quot;小王&quot;</span>;</span><br><span class="line">	t.stu.age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="11-结构体作为函数的参数"><a href="#11-结构体作为函数的参数" class="headerlink" title="11.结构体作为函数的参数"></a>11.结构体作为函数的参数</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintS</span><span class="params">(struct Students s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; s.name &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; s.age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Students s;</span><br><span class="line">	s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	s.age = <span class="number">10</span>;</span><br><span class="line">	PrintS(s</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>地址传递</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Students</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintS</span><span class="params">(struct Students *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name:&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot;age:&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Students s;</span><br><span class="line">	s.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	s.age = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//PrintS(s);</span></span><br><span class="line">	PrintS(&amp;s);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch入门</title>
    <url>/2021/02/17/pytorch%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><img src="/images/image-20210217110558704.png" alt="image-20210217110558704"></p>
]]></content>
      <tags>
        <tag>cv</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>人生</title>
    <url>/2021/02/15/%E4%BA%BA%E7%94%9F/</url>
    <content><![CDATA[<p>人生<br>路遥<br>23个想法</p>
<p>◆ 引语</p>
<p>>&gt; 人生的道路虽然漫长，但紧要处常常只有几步，特别是当人年轻的时候。没有一个人的生活道路是笔直的、没有岔道的。有些岔道口，譬如政治上的岔道口，事业上的岔道口，个人生活上的岔道口，你走错一步，可以影响人生的一个时期，也可以影响一生。</p>
<a id="more"></a>
<p>◆ 第一章</p>
<p>>&gt; 第一章农历六月初十，一个阴云密布的傍晚，盛夏热闹纷繁的大地突然沉寂下来；连一些最爱叫唤的虫子也都悄没声响了，似乎处在一种急躁不安的等待中。地上没一丝风尘；河里的青蛙纷纷跳上岸，没命地向两岸的庄稼地和公路上蹦蹿着。天闷热得像一口</p>
<p>>&gt; 人活低了，就要按低的来哩……</p>
<p>◆ 第二章</p>
<p>>&gt; 生活是严酷的，他必须承认他目前的地位——他已经是一个地地道道的农民了！</p>
<p>◆ 第四章</p>
<p>李嘉诚说：“当你放下面子赚钱的时候，说明你已经懂事了；当你用钱赚回面子的时候，说明你已经成功了；当你用面子可以赚钱的时候，说明你已经是人物了；而当你一直停留在那里喝酒、吹牛、睡懒觉，啥也不懂还装懂，只爱所谓的面子的时候，说明你这辈子也就这样了。”<br>>他以前听见这样的喊叫，只觉得很好笑。可现在他在心里很佩服这种什么也不顾忌的欢畅舒坦的叫喊声；觉得也是一种很大的本事。他自己明显地感到，他在这个世界里，成了一个最无能的人。</p>
<p>>&gt; 他以前听见这样的喊叫，只觉得很好笑。可现在他在心里很佩服这种什么也不顾忌的欢畅舒坦的叫喊声；觉得也是一种很大的本事。他自己明显地感到，他在这个世界里，成了一个最无能的人。</p>
<p>>&gt; 想来想去，没有什么办法了。他站在阅览室的门口踌躇了半天，最后只好决定提着篮子回家去</p>
<p>◆ 第十一章</p>
<p>>&gt; “我死不了，她就活着！她一辈子都揣在我心里……”</p>
<p>◆ 第十二章</p>
<p>>&gt; 高加林的心中也燃烧着火焰。他把粪车子拉在路边停下来，眼里转着泪花子，望着悄然寂静的城市，心里说：我非要到这里来不可！我有文化，有知识，我比这里生活的年轻人哪一点差？我为什么要受这样的屈辱呢？</p>
<p>◆ 第十四章</p>
<p>>&gt; 令人遗憾的是，我们当今的现实生活中有马占胜和高明楼这样的人。他们为了个人的利益，有时毫不顾忌地给这些徘徊在生活十字路口的人当头一棒，使他们对生活更加悲观；有时，还是出于个人目的，他们又一下子把这些人推到生活的顺风船上。转眼时来运转，使得这些人在高兴的同时，也感到自己顺利得有点茫然。</p>
<p>◆ 第十五章</p>
<p>转：背后议论别人是件很奇妙的事：背后说人坏话比当面说人坏话更容易惹人恼，因为别人不仅会认为你是没度量的人还会认为你是没勇气的人，只会背后放枪；反之，背后赞美别人也比当面赞美别人更能引起别人的好感，因为别人不仅会认为你很豁达大度还会认为你很和善、很谦虚，能增进别人对你的好感。<br>综上，想要获得好的人际关系，不妨试着将那些在背后说别人的坏话改为好话吧！<br>>“没你说的那么好。头一次写这类文章，很外行，全凭景老师修改。”加林谦虚地说，但他心里很高兴。</p>
<p>>&gt; “没你说的那么好。头一次写这类文章，很外行，全凭景老师修改。”加林谦虚地说，但他心里很高兴。</p>
<p>>&gt; 不必隐瞒，她还不能为了爱情而嫁给一个农民；她想她一辈子吃不了那么多苦！</p>
<p>◆ 第十六章</p>
<p>转：看到这里，想到传说中的梁朝伟和刘嘉玲两个人的爱情，就是那种爱好相差比较大，但是彼此却能够欣赏、理解对方。但高加林和巧珍却不是。</p>
<p>其实，还挺难过的。像高加林对巧珍的前后态度转变，说白了其实不就是对巧珍的喜爱没有那么深吗？而且，从这里看来，巧珍与黄亚萍其实代表了两种不同的择偶观:喜欢聊得来的还是漂亮可人的？（而且两人所代表的生活方式，经济都是非常不同的……）</p>
<p>所以女孩子们，原谅高加林这么纠结吧！如果两个女孩子的优点集齐于一人，那他怎么会纠结？而正是因为不可能出现这种感觉情况，所以他才纠结，这也说明他的心里其实也都明白两个女孩的差别，所以在做选择中。</p>
<p>因此，我们从中得到的启示应该是:努力提高自己的竞争力（内外兼修，形神俱美），让自己成为选择者，而不是别人的选择对象。<br>>“哎呀哎呀！你快别说了！”加林烦躁地从桌子上拉起一张报纸，脸对着，但并不看。他想起刚才和亚萍那些海阔天空的讨论，多有意思！现在听巧珍说的都是这些叫人感到乏味的话；他心里不免涌上了一股说不出的滋味。</p>
<p>>&gt; “哎呀哎呀！你快别说了！”加林烦躁地从桌子上拉起一张报纸，脸对着，但并不看。他想起刚才和亚萍那些海阔天空的讨论，多有意思！现在听巧珍说的都是这些叫人感到乏味的话；他心里不免涌上了一股说不出的滋味。</p>
<p>◆ 第十八章</p>
<p>>&gt; 生活啊，生活！有时候它把现实变成了梦想，有时候它又把梦想变成了现实！</p>
<p>◆ 第十九章</p>
<p>>&gt; “……加林哥，你再别说了！你的意思我都明白了！你……去吧！我决不会连累你！加林哥，你参加工作后，我就想过不知多少次了，我尽管爱你爱得要命，但知道我配不上你了。我一个字不识，给你帮不上忙，还要拖累你的工作……你走你的，到外面找个更好的对象……到外面你多操心，人生地疏，不像咱本乡田地……加林哥，你不知道，我是怎样爱你……”</p>
<p>◆ 第二十章</p>
<p>>&gt; 对待社会，我们常说要向前看，对一个人来说，也要向前看。生活总是这样，不能叫人处处都满意。但我们还要热情地活下去。人活一生，值得爱的东西很多，不要因为一个方面不满意，就灰心。</p>
<p>◆ 第二十一章</p>
<p>>&gt; 不要抱怨生活！生活永远是公正的！你应该怨你自己！</p>
<p>◆ 第二十二章</p>
<p>>&gt; 是的，现实是不能以个人的意志为转移的。谁如果要离开自己的现实，就等于要离开地球。一个人应该有理想，甚至应该有幻想，但他千万不能抛开现实生活，去盲目追求实际上还不能得到的东西。尤其是对于刚踏入生活道路的年轻人来说，这应该是一个最重要的认识。</p>
<p>◆ 第二十三章</p>
<p>>&gt; 亲爱的父老乡亲们！他们在一个人走运的时候，也许对你躲得很远；但当你跌了跤的时候，众人却都伸出自己粗壮的手来帮扶你。他们那伟大的同情心，永远都会给予不幸的人！</p>
<p>>&gt; 一个男子汉，不怕跌跤，就怕跌倒了不往起爬，那就变成个死狗了……”</p>
<p>◆ 点评</p>
<p>认为好看</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv学习笔记</title>
    <url>/2021/01/17/opencv%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-ROI-选取"><a href="#1-ROI-选取" class="headerlink" title="1.ROI 选取"></a>1.ROI 选取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;lena.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 帽子ROI的红色通道</span></span><br><span class="line">hat_r = img[<span class="number">25</span>:<span class="number">120</span>, <span class="number">50</span>:<span class="number">220</span>, <span class="number">2</span>]</span><br><span class="line">cv2.imshow(<span class="string">&#x27;hat&#x27;</span>, hat_r)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-图像和像素点的简单处理"><a href="#2-图像和像素点的简单处理" class="headerlink" title="2.图像和像素点的简单处理"></a>2.图像和像素点的简单处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img &#x3D; cv2.imread(&#39;lena.jpg&#39;)</span><br><span class="line"></span><br><span class="line"># 1.获取像素的值</span><br><span class="line">px &#x3D; img[100, 90]</span><br><span class="line">print(px)  # [103 98 197]</span><br><span class="line"></span><br><span class="line"># 只获取蓝色blue通道的值</span><br><span class="line">px_blue &#x3D; img[100, 90, 0]</span><br><span class="line">print(px_blue)  # 103</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 2.修改像素的值</span><br><span class="line">img[100, 90] &#x3D; [255, 255, 255]</span><br><span class="line">print(img[100, 90])  # [255 255 255]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 3.图片形状</span><br><span class="line">print(img.shape)  # (263, 247, 3)</span><br><span class="line"># 形状中包括行数、列数和通道数</span><br><span class="line">height, width, channels &#x3D; img.shape</span><br><span class="line"># img是灰度图的话：height, width &#x3D; img.shape</span><br><span class="line"></span><br><span class="line"># 总像素数</span><br><span class="line">print(img.size)  # 263*247*3&#x3D;194883</span><br><span class="line"># 数据类型</span><br><span class="line">print(img.dtype)  # uint8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 4.ROI截取</span><br><span class="line">face &#x3D; img[100:200, 115:188]</span><br><span class="line">cv2.imshow(&#39;face&#39;, face)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5.通道分割与合并</span><br><span class="line">b, g, r &#x3D; cv2.split(img)</span><br><span class="line">img &#x3D; cv2.merge((b, g, r))</span><br><span class="line"># 更推荐的获取某一通道方式</span><br><span class="line">b &#x3D; img[:, :, 0]</span><br><span class="line">cv2.imshow(&#39;b&#39;, b)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="3-改变色彩空间"><a href="#3-改变色彩空间" class="headerlink" title="3.改变色彩空间"></a>3.改变色彩空间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img&#x3D;cv2.imread(&#39;lena.jpg&#39;)</span><br><span class="line"></span><br><span class="line">#转灰度图片</span><br><span class="line">img_hsv&#x3D;cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;hsv&#39;,img_hsv)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">img_gray&#x3D;cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(&#39;gray&#39;,img_gray)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">#获取所有转换模式</span><br><span class="line">flags&#x3D;[i for i in dir(cv2) if i.startswith(&quot;COLOR_&quot;)]</span><br><span class="line">print(flags)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#获取蓝色的HSV</span><br><span class="line"></span><br><span class="line">blue &#x3D;np.uint8([[[255,0,0]]])</span><br><span class="line">hsv_blue &#x3D; cv2.cvtColor(blue,cv2.COLOR_BGR2HSV)</span><br><span class="line">print(hsv_blue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#追踪蓝色的物体</span><br><span class="line">capature &#x3D;cv2.VideoCapture(0)</span><br><span class="line"></span><br><span class="line">#蓝色范围</span><br><span class="line">blue_lower &#x3D;np.array([100,110,110])</span><br><span class="line">blue_upper &#x3D; np.array([130,255,255])</span><br><span class="line"></span><br><span class="line">while(True):</span><br><span class="line">    ret,frame&#x3D; capature.read()</span><br><span class="line">    gray2&#x3D;cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    # 又BGR 转换为HSV</span><br><span class="line">    hsv &#x3D; cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)</span><br><span class="line"></span><br><span class="line">    #将hsv设置为介于两者之间的</span><br><span class="line"></span><br><span class="line">    mask &#x3D; cv2.inRange(hsv,blue_lower,blue_upper)</span><br><span class="line"></span><br><span class="line">    #只保留图片中的蓝色部分</span><br><span class="line">    res &#x3D; cv2.bitwise_and(frame,frame,mask&#x3D;mask)</span><br><span class="line"></span><br><span class="line">    cv2.imshow(&#39;frame&#39;,frame)</span><br><span class="line">    cv2.imshow(&#39;mask&#39;,mask)</span><br><span class="line">    cv2.imshow(&#39;res&#39;,res)</span><br><span class="line">    cv2.imshow(&#39;gary&#39;,gray2)</span><br><span class="line">    if cv2.waitKey(1) &#x3D;&#x3D; ord(&#39;q&#39;):</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>
<h3 id="4-对图像进行阈值操作"><a href="#4-对图像进行阈值操作" class="headerlink" title="4.对图像进行阈值操作"></a>4.对图像进行阈值操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2 as cv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#灰度图片读入</span><br><span class="line">img &#x3D; cv.imread(&#39;gradient.jpg&#39;,0)</span><br><span class="line">&#39;&#39;&#39;filename：需要打开图片的路径，可以是绝对路径或者相对路径，路径中不能出现中文。</span><br><span class="line">flag：图像的通道和色彩信息（默认值为1）。</span><br><span class="line">flag &#x3D; -1,   8位深度，原通道</span><br><span class="line">flag &#x3D; 0，   8位深度，1通道</span><br><span class="line">flag &#x3D; 1，   8位深度，3通道</span><br><span class="line">flag &#x3D; 2，   原深度， 1通道</span><br><span class="line">flag &#x3D; 3，   原深度， 3通道</span><br><span class="line">flag &#x3D; 4，   8位深度，3通道&#39;&#39;&#39;</span><br><span class="line">#阈值分割，ret return value 表示当前阈值</span><br><span class="line">ret,th &#x3D;cv.threshold(img,127,255,cv.THRESH_BINARY)</span><br><span class="line">&#39;&#39;&#39;cv2.threshold(img, thresh, maxVal, cv2.xxx)</span><br><span class="line">1</span><br><span class="line">第一个参数是源图像，应该是灰度图；</span><br><span class="line">第二个参数是对图像进行分类的阈值；</span><br><span class="line">第三个参数是最大值，表示如果像素值大于（有时小于）阈值则要给出的值；</span><br><span class="line">第四个参数决定给出不同类型的阈值。包括：</span><br><span class="line">cv2.THRESH_BINARY</span><br><span class="line">- cv2.THRESH_BINARY_INV</span><br><span class="line">- cv2.THRESH_TRUNC</span><br><span class="line">- cv2.THRESH_TOZERO</span><br><span class="line">- cv2.THRESH_TOZERO_INV&#39;&#39;&#39;</span><br><span class="line">#图像二值化处理后</span><br><span class="line">cv.imshow(&#39;thresh&#39;,th)</span><br><span class="line">#未经过二值化处理的图片</span><br><span class="line">cv.imshow(&#39;org&#39;,img)</span><br><span class="line">cv.waitKey(0)</span><br><span class="line"># 应用5种不同的阈值方法</span><br><span class="line">ret, th1 &#x3D; cv.threshold(img, 127, 255, cv.THRESH_BINARY)</span><br><span class="line">ret, th2 &#x3D; cv.threshold(img, 127, 255, cv.THRESH_BINARY_INV)</span><br><span class="line">ret, th3 &#x3D; cv.threshold(img, 127, 255, cv.THRESH_TRUNC)</span><br><span class="line">ret, th4 &#x3D; cv.threshold(img, 127, 255, cv.THRESH_TOZERO)</span><br><span class="line">ret, th5 &#x3D; cv.threshold(img, 127, 255, cv.THRESH_TOZERO_INV)</span><br><span class="line">titles &#x3D; [&#39;Original&#39;, &#39;BINARY&#39;, &#39;BINARY_INV&#39;, &#39;TRUNC&#39;, &#39;TOZERO&#39;, &#39;TOZERO_INV&#39;]</span><br><span class="line">images &#x3D; [img, th1, th2, th3, th4, th5]</span><br><span class="line">for i in range(6):</span><br><span class="line">    plt.subplot(2, 3, i + 1)</span><br><span class="line">    plt.imshow(images[i], &#39;gray&#39;)</span><br><span class="line">    plt.title(titles[i], fontsize&#x3D;8)</span><br><span class="line">    plt.xticks([]), plt.yticks([])  # 隐藏坐标轴</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#自适应阈值对比固定阈值</span><br><span class="line"></span><br><span class="line">#固定阈值</span><br><span class="line">ret,th1 &#x3D; cv.threshold(img,127,255,cv.THRESH_BINARY)</span><br><span class="line">#自适应阈值</span><br><span class="line">th2&#x3D;cv.adaptiveThreshold(</span><br><span class="line">    img,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,11,4</span><br><span class="line">)</span><br><span class="line">th3&#x3D;cv.adaptiveThreshold(</span><br><span class="line">    img,255,cv.ADAPTIVE_THRESH_GAUSSIAN_C,cv.THRESH_BINARY,17,6</span><br><span class="line">)</span><br><span class="line">titles &#x3D; [&#39;Original&#39;, &#39;Global(v &#x3D; 127)&#39;, &#39;Adaptive Mean&#39;, &#39;Adaptive Gaussian&#39;]</span><br><span class="line">images &#x3D; [img, th1, th2, th3]</span><br><span class="line"></span><br><span class="line">for i in range(4):</span><br><span class="line">    plt.subplot(2, 2, i + 1)</span><br><span class="line">    plt.imshow(images[i], &#39;gray&#39;)</span><br><span class="line">    plt.title(titles[i], fontsize&#x3D;8)</span><br><span class="line">    plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="5-图片几何化处理"><a href="#5-图片几何化处理" class="headerlink" title="5.图片几何化处理"></a>5.图片几何化处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img&#x3D; cv2.imread(&#39;drawing.jpg&#39;)</span><br><span class="line">#1将图片进行缩放</span><br><span class="line">res&#x3D;cv2.resize(img,(132,150))</span><br><span class="line">cv2.imshow(&#39;reshape&#39;,res)</span><br><span class="line">cv2.imshow(&#39;org&#39;,img)</span><br><span class="line">#2按照比例进行缩放，x，y轴都扩大为原来的两倍</span><br><span class="line">res2&#x3D;cv2.resize(img,None,fx&#x3D;2,fy&#x3D;2,interpolation&#x3D;cv2.INTER_LINEAR)</span><br><span class="line">cv2.imshow(&#39;res2&#39;,res2)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">&#39;&#39;&#39;cv2.resize(src,dsize,dst&#x3D;None,fx&#x3D;None,fy&#x3D;None,interpolation&#x3D;None)</span><br><span class="line"></span><br><span class="line">scr:原图</span><br><span class="line"></span><br><span class="line">dsize：输出图像尺寸</span><br><span class="line"></span><br><span class="line">fx:沿水平轴的比例因子</span><br><span class="line"></span><br><span class="line">fy:沿垂直轴的比例因子</span><br><span class="line"></span><br><span class="line">interpolation：插值方法&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.翻转图片</span><br><span class="line"></span><br><span class="line">dst&#x3D;cv2.flip(img,-1) #1 水平翻转  0 垂直翻转  -1 水平垂直翻转</span><br><span class="line">#np.hstack  横向并排，对比显示</span><br><span class="line">cv2.imshow(&#39;flip&#39;,np.hstack((img,dst)))</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#4.平移图片</span><br><span class="line">#得到图片的长和宽的像素</span><br><span class="line">rows,cols&#x3D; img.shape[:2]</span><br><span class="line"></span><br><span class="line">M &#x3D; np.float32([[1, 0, 100], [0, 1, 50]])#M 为一个2x3的矩阵 (为图片的变化矩阵)</span><br><span class="line">&#39;&#39;&#39;src - 输入图像。</span><br><span class="line">M - 变换矩阵。</span><br><span class="line">dsize - 输出图像的大小。</span><br><span class="line">flags - 插值方法的组合（int 类型！）</span><br><span class="line">borderMode - 边界像素模式（int 类型！）</span><br><span class="line">borderValue - （重点！）边界填充值; 默认情况下，它为0。</span><br><span class="line">上述参数中：</span><br><span class="line">1、M作为仿射变换矩阵，一般反映平移或旋转的关系，为InputArray类型的2×3的变换矩阵。</span><br><span class="line">2、flages表示插值方式，默认为 flags&#x3D;cv2.INTER_LINEAR，表示线性插值，此外还有：cv2.INTER_NEAREST（最近邻插值） cv2.INTER_AREA （区域插值） cv2.INTER_CUBIC（三次样条插值） cv2.INTER_LANCZOS4（Lanczos插值）&#39;&#39;&#39;</span><br><span class="line">dst &#x3D; cv2.warpAffine(img, M, (cols, rows))</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;shift&#39;, dst)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">#5.将图片顺时针旋转，并且缩小一半</span><br><span class="line">M&#x3D;cv2.getRotationMatrix2D((cols&#x2F;2,rows&#x2F;2),-45,0.5)</span><br><span class="line">&#39;&#39;&#39;M&#x3D;cv2.getRotationMatrix2D(center, angle, scale)</span><br><span class="line">1</span><br><span class="line">函数有三个输入参数：</span><br><span class="line"></span><br><span class="line">center：图片的旋转中心</span><br><span class="line">angle：旋转角度</span><br><span class="line">scale：旋转后图像相比原来的缩放比例</span><br><span class="line">M:计算得到的旋转矩阵&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">dst&#x3D;cv2.warpAffine(img,M,(cols,rows))</span><br><span class="line">cv2.imshow(&#39;rotation&#39;,dst)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="6-图形绘制"><a href="#6-图形绘制" class="headerlink" title="6.图形绘制"></a>6.图形绘制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#创建一个黑色图片</span><br><span class="line">img &#x3D;np.zeros((512,512,3),np.uint8)</span><br><span class="line"></span><br><span class="line">#创建一条宽度为5的蓝色斜线  参数起点 终点</span><br><span class="line">cv2.line(img,(0,0),(512,512),5)</span><br><span class="line"></span><br><span class="line">#画一个绿色边框的矩形，参数 左上角，右下角</span><br><span class="line">cv2.rectangle(img,(300,0),(500,100),(0,255,0),3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#画一个填充红色的圆，参数 圆心坐标，半径</span><br><span class="line">cv2.circle(img,(447,63),63,(255,0,0),-1)</span><br><span class="line"></span><br><span class="line"># 4.在图中心画一个填充的半圆</span><br><span class="line">cv2.ellipse(img, (256, 256), (100, 50), 0, 0, 180, (255, 0, 0), -1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 5.画一个闭合的四边形</span><br><span class="line"># 定义四个顶点坐标</span><br><span class="line">pts &#x3D; np.array([[10, 5],  [50, 10], [70, 20], [20, 30]], np.int32)</span><br><span class="line"># 顶点个数：4，矩阵变成顶点数*1*2维（注意numpy中-1的用法）</span><br><span class="line">pts &#x3D; pts.reshape((-1, 1, 2))</span><br><span class="line">cv2.polylines(img, [pts], True, (0, 255, 255))</span><br><span class="line"></span><br><span class="line"># 使用cv2.polylines()画多条直线</span><br><span class="line">line1 &#x3D; np.array([[100, 20],  [300, 20]], np.int32).reshape((-1, 1, 2))</span><br><span class="line">line2 &#x3D; np.array([[100, 60],  [300, 60]], np.int32).reshape((-1, 1, 2))</span><br><span class="line">line3 &#x3D; np.array([[100, 100],  [300, 100]], np.int32).reshape((-1, 1, 2))</span><br><span class="line">cv2.polylines(img, [line1, line2, line3], True, (0, 255, 255))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 6.添加文字</span><br><span class="line">font &#x3D; cv2.FONT_HERSHEY_SIMPLEX</span><br><span class="line">cv2.putText(img, &#39;ex2tron&#39;, (10, 500), font,</span><br><span class="line">            4, (255, 255, 255), 2, lineType&#x3D;cv2.LINE_AA)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;img&#39;, img)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="7-图形融合"><a href="#7-图形融合" class="headerlink" title="7.图形融合"></a>7.图形融合</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">#1.图片相加</span><br><span class="line">x &#x3D; np.uint8([255])</span><br><span class="line">y &#x3D; np.uint8([10])</span><br><span class="line"></span><br><span class="line">print(cv2.add(x,y))# 250+10 &#x3D; 260 &#x3D;&gt; 255 超过了255按照255算 没有超过255 按计算值算</span><br><span class="line">print(x+y)# 250+10 &#x3D; 260 % 256 &#x3D; 4  numpy 中的图片相加相当于%256</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.图像混合</span><br><span class="line">img1&#x3D;cv2.imread(&#39;lena_small.jpg&#39;)</span><br><span class="line">img2&#x3D;cv2.imread(&#39;opencv-logo-white.png&#39;)</span><br><span class="line">res&#x3D;cv2.addWeighted(img1,.6,img2,.4,0)</span><br><span class="line">cv2.imshow(&#39;blending&#39;,res)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.按位操作</span><br><span class="line">img1&#x3D;cv2.imread(&#39;lena.jpg&#39;)</span><br><span class="line">img2&#x3D;cv2.imread(&#39;opencv-logo-white.png&#39;)</span><br><span class="line">#把logo放在左上角</span><br><span class="line">rows,cows&#x3D;img2.shape[:2]</span><br><span class="line">roi&#x3D;img1[:rows,:cows]</span><br><span class="line"></span><br><span class="line">#创建掩膜</span><br><span class="line">img2gray&#x3D;cv2.cvtColor(img2,cv2.COLOR_BGR2GRAY)</span><br><span class="line">ret,mask &#x3D;cv2.threshold(img2gray,10,255,cv2.THRESH_BINARY)</span><br><span class="line">mask_inv&#x3D;cv2.bitwise_not(mask)</span><br><span class="line"># 保留除logo外的背景</span><br><span class="line">img1_bg &#x3D; cv2.bitwise_and(roi, roi, mask&#x3D;mask_inv)</span><br><span class="line">dst &#x3D; cv2.add(img1_bg, img2)  # 进行融合</span><br><span class="line">img1[:rows, :cows] &#x3D; dst  # 融合后放在原图上</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;result&#39;, img1)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="8-图片滤波"><a href="#8-图片滤波" class="headerlink" title="8.图片滤波"></a>8.图片滤波</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line">img&#x3D;cv2.imread(&#39;lena.jpg&#39;)</span><br><span class="line">#1.均值滤波</span><br><span class="line">blur&#x3D;cv2.blur(img,(12,12))#卷积核尺寸  可以明显观察到经过滤波后的图片模糊很多</span><br><span class="line">cv2.imshow(&#39;img&#39;,img)</span><br><span class="line">cv2.imshow(&#39;blur&#39;,blur)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">#2.高斯滤波</span><br><span class="line">gau_blur&#x3D;cv2.GaussianBlur(img,(3,3),0)#(3,3)表示高斯矩阵的长和宽都是5，标准差为0</span><br><span class="line"></span><br><span class="line">#三张图片横向对比</span><br><span class="line">res &#x3D; np.hstack((img,blur,gau_blur))</span><br><span class="line">cv2.imshow(&#39;res&#39;,res)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line">#高斯滤波与均值滤波</span><br><span class="line">img&#x3D;cv2.imread(&#39;salt_noise.bmp&#39;)</span><br><span class="line">blur&#x3D;cv2.blur(img,(5,5)) #均值滤波</span><br><span class="line">gaussian &#x3D; cv2.GaussianBlur(img,(5,5),1) #高斯滤波</span><br><span class="line">res &#x3D; np.hstack((img,blur,gaussian))</span><br><span class="line">cv2.imshow(&#39;img,blur,gaussian&#39;,res)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#均值滤波与中值滤波</span><br><span class="line">img&#x3D;cv2.imread(&#39;salt_noise.bmp&#39;,0)</span><br><span class="line"></span><br><span class="line">blur &#x3D; cv2.blur(img, (5, 5))  # 均值滤波</span><br><span class="line">median &#x3D; cv2.medianBlur(img, 5)  # 中值滤波</span><br><span class="line"></span><br><span class="line">res &#x3D; np.hstack((img, blur, median))</span><br><span class="line">cv2.imshow(&#39;median vs average&#39;, res)</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"># 4.双边滤波vs高斯滤波</span><br><span class="line">img &#x3D; cv2.imread(&#39;lena.jpg&#39;, 0)</span><br><span class="line">gau &#x3D; cv2.GaussianBlur(img, (5, 5), 0)  # 高斯滤波</span><br><span class="line">blur &#x3D; cv2.bilateralFilter(img, 5, 75, 75)  # 双边滤波</span><br><span class="line"></span><br><span class="line">res &#x3D; np.hstack((img, gau, blur))</span><br><span class="line">cv2.imshow(&#39;res&#39;, res)</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="9-边缘检测1"><a href="#9-边缘检测1" class="headerlink" title="9.边缘检测1"></a>9.边缘检测1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#边缘检测</span><br><span class="line">img &#x3D; cv2.imread(&#39;handwriting.jpg&#39;,0)</span><br><span class="line">edges &#x3D;cv2.Canny(img,30,70)</span><br><span class="line">cv2.imshow(&#39;img_edges&#39;,np.hstack((img,edges)))</span><br><span class="line">cv2.waitKey(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.先阈值后边缘检测</span><br><span class="line">_,thresh &#x3D;cv2.threshold(img,0,255,cv2.THRESH_BINARY + cv2.THRESH_OTSU)</span><br><span class="line">edges &#x3D; cv2.Canny(thresh,30,70)</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;canny&#39;,np.hstack((img,thresh,edges)))</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
<h3 id="10-边缘检测2"><a href="#10-边缘检测2" class="headerlink" title="10.边缘检测2"></a>10.边缘检测2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">def track_back(x):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">img &#x3D;cv2.imread(&#39;sudoku.jpg&#39;,0)</span><br><span class="line">cv2.namedWindow(&#39;window&#39;)</span><br><span class="line"></span><br><span class="line">#创建滑动条</span><br><span class="line">cv2.createTrackbar(&#39;maxVal&#39;,&#39;window&#39;,100,255,track_back)</span><br><span class="line">cv2.createTrackbar(&#39;minVal&#39;,&#39;window&#39;,200,255,track_back)</span><br><span class="line"></span><br><span class="line">while(True):</span><br><span class="line">    #获取滑动条的值</span><br><span class="line">    max_val&#x3D;cv2.getTrackbarPos(&#39;maxVal&#39;,&#39;window&#39;)</span><br><span class="line">    min_val&#x3D;cv2.getTrackbarPos(&#39;minVal&#39;,&#39;window&#39;)</span><br><span class="line"></span><br><span class="line">    edges&#x3D; cv2.Canny(img,min_val,max_val)</span><br><span class="line">    cv2.imshow(&#39;window&#39;,edges)</span><br><span class="line">    if cv2.waitKey(30)&#x3D;&#x3D;27:</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>
<h3 id="11-腐蚀和膨胀处理"><a href="#11-腐蚀和膨胀处理" class="headerlink" title="11.腐蚀和膨胀处理"></a>11.腐蚀和膨胀处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#1.腐蚀和膨胀</span><br><span class="line">img &#x3D; cv2.imread(&#39;j.bmp&#39;,0)</span><br><span class="line">kernel &#x3D;np.ones((5,5),np.uint8)</span><br><span class="line">erosion &#x3D;cv2.erode(img,kernel)#腐蚀</span><br><span class="line">dilation &#x3D; cv2.dilate(img,kernel) #膨胀</span><br><span class="line"></span><br><span class="line">cv2.imshow(&#39;erosion&#x2F;dilation&#39;,np.hstack((img,erosion,dilation)))</span><br><span class="line">cv2.waitKey(0)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>cv</category>
      </categories>
      <tags>
        <tag>cv</tag>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>soup</title>
    <url>/2021/02/21/soup/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5c6b2f39537fc48ca0c4ce155d37504e5b475622ddfbc53449a6da31a1e40d30">d861ae7b08895917e7691ce52be863253d58ff10503284b47f88bb4030708f3cc2fa97194595cbe7f4e16e3dddac26acb2fca694fd0e556b9389b00a56d2e3d7599e7e90f6d75105216ddef7e42b999cde4d1b8bd47927237f452f37b557211869638d47c4cc4645453008e3c1e46dfa57e2d6279f342f8509c35c0e81ff22ea214f6a4f4dfd855ced4410869520c914e0edf87f06002676f4fa45969048db745f0b2477f5598da9d000cec42968a8e8d1f9c7d9281a8d88e668ed4fcf3810727a3a1c99e0e9b309e4d6298901a04097d66e403b9b289a93dc73fc706855f1e98a8f181cfd8d08f19ea0ad8e7d9ad4998fae8c1225dca6b707d40d7b850ff39eaefc24b540a088c952159278853b63c8168a4f8c33d213d42057600658dbee2866f1d6c724caa81557ab8d9b6254508969cad1a185aef44512821620f2b319da6e8e5aa25249f7a03ff192b4f27a72aea4d9b77b4291516c4eb9d5f20e11fc15fb43584bc3078663cd678bf8538032da8648f6797ea489f45febca28dd06d632e8444ccb5680557aafc5ea1cd03884a776fc08d83741557de4868ca51ef959a271989125977208ca6209e50c25451244d1a3795e957e2fb59645a5de7f90e3d2d2fdfd8fda6ae7a3c51e6bc1d815d13f1c190fe3a1f28479e51552c86fb48c7f65a1403f22c235240b45c0ce930cbe5636021e6a21aa597ef75e3cea643760158a76ca27661be95032f82afc9908e0ffc700ac038e757d6224b5bcdb06634f883e23858feb594614a574ddf0271386564ed5578eeb26f9554cb4829973618cfe609d20e229bbc2703c1df7b0a1e1eea9a8563aee1a5830e870f7aae9f49f98252b1e96740a38002442a34495fc48c2f77920a3a2d8d2886f60ff070a066269d7bd9c2fde878bbdd69b84ce4f34993020b843e67ee1d5900cf3049b3fbe6b4d8461cf46da9c5f352838aafc0dd9cb72fdba6d4600f72256f0ffb8aeffbfa4670cb25deb507b88b081b0240ea3fc044a919707dd49c197ee83451087b41d298294d8b754208e9ab8736fa554ac096eb0818b46d9902e3a78d7989f67f71b85fc963e2953bcbffdfd7d0fb1b2a19b78a9d657a8cf3181375dc27deb0969af3afcae4483a7081c2c68b8d5d418f946dca14ba614e6570dbd1ba8768ad19fc9e82f26546da1c95ffa13f6288befcaefb9f341a5fceef63cb2323267461ea3843a24ea29b6c3c78c02d02ca328aa95517fb6772ce13a1229ba9cb9cace86382912ce6f77bd9aa6c4bfc2bb9a4099980b273a0d4bec127fd9a656c43705e5e5c2630606fe81397568df3108dd9b351a6399a38b785c0077e73e6a05d07448f7436e62f480e5e6ad7198f59a310c044ebb5681903e843d740f5e95494b65c1d27bd49c764d597ebbc473500d0176ca786dc48de32f741c827e7a54117d356b579fe78acfd512b6bce01f389336cc45d2a7070c47b74117eabc93bd69146a869ec28a1f094266315fa36fc3f9196fbcf556209a3938bd2763659084d5c220a8f5b46d4d224d1156f26c61c3100667decb6e8c4f90617fa263fab1c01bbe95ef7c369f34f1f00fc885487f35794fe074604346c59e3223946b22014c5e90729a68f876c8aed41f0ae2c3d343789e09a87b6fe1b6a42be0690f540d4d4ef11ffd919c2906ac0971d402fe7dbfb4f950de3755e1f48552e10bcbbc622321e09ee9a13cfb42e738fe3bd651ebc8c27d6bdd27822497b14fa4c60819b41b059218371e0b4ca1bcafaf86d04c5e27c15ef6fc2655a8e820a8206fac7da9e7625fbe08662c145ae0b81921ada3fce3f39ae362d6064746b03e5f3f7428ce03edd1bd7471e2d4aa566359cf44fc95dd02e72c0a13798eaff2e67d0700afab3d54597d36913965d3c165fd1a69591276b4109ebe938aec58ed59055dd1bd998242e5d762c51c5451ac56528c006d89d03511d66acc60797c40cdbd10180595a63cc770f1c912da52421c8ac3dbbeafb9b7aef345e881b6963f89ba1603041f6f52401d81ed6c39887c44c1af203b36d4deddf94bbf048d877ef3e4da78150fc27c10a9fb405585e404c93c88b027aaf876d7f6b318093c1bd37ea62bbadaa89cff242b45faf6c603f700ce77dd089623c0dc1ce9895bc4cb70f76984bb97ecc46becb7efde48eff4378ae0010be261b037be4259dcb13611680c95322fb5617cc38a873198cec6c9e09f0ce8b39c7c29855e6679df13403709d6f2d2519292e42e95ad506bb10d94a743e22613e1ddff9af8e8513302621f8082fbc3ce9991d6cd2d01667eab0d031d7d39b6297763ca443e9c99a909f7b2c879b37a04b7419e479ce99d8129a552ee7c159caeeaed36c353b1880475bbc09e46cada81b5cf6a730790c4dbcbb75814635c951adcd777ebb404bf4b6f5b1ffca14fcfef0d9aa95fb3c819cf37badb2f986bfc3fcf9f61f8780070e772824cf1bf1eb7fb59e4d819dec5dad9ec0f2aae25e52ce258655b8ceaab0c0e737a81d7951b931bae25a63de624808a3a86200d695fea090eaf86479c2814072648ff0d27243130a51fcc0f3f79020932665a8973b2e6cbc9efb71e772134ad23d7447e85a33d2e8255445abc4282de25760ac17efd1f02f25ad6f678d0431f9047ce5f06814edf635112f03cf31194e36bbf4a9680b0c996d010d9535e68cc59a03c5e922814a5c6fa2422731b52a6bb62892cf4fa9df914ec75540140eff95872b19404894361c9a3b1ffac201e6df8cec3d26b3d2995dff8db0092f772312d554f1d5bce07f69cffb15bef83a4c067aec2ff766b044f783a432763f51ea761d1295ad0a23686971eda0008ff7bd707f451415e9adef0e33bafdff88ac928e2cc0ba9f69c23ee5458f2f500d838749536d41366e598edf14e23fd672189cf25519e6b8b1ea805a8f8e57ea29eb04b72c0bbfcfaf4739b469c3d2cfd46923b5d6d0feab3a885cb732e09a93ce656b6f7ce3e275ebd77d51025c7cbaa3c6b149e019439ff4791415b5fab3186edd7db3703abf8a77db28bf00cc04031e2ba36a1418254727875513bcf815962efe5d920f26c94b6887527a9c2df673edfb277c3aef8c87eca2c5bf912ca61d8ba7c4650fd95f03dc9d6a0ca61fecde05873a69b3d3aed44b44b3df4d1becd74051dacc50e2339197845ab77766593a0234f28cbfa72349eb5cbd9fd60da76177b22a1511afc5059076f7fadcfe1e6e439378e00d2e3b1af98da41793972fe796ef704fe020c6dbc33219d81068c65be1387c985a57534109dca8fa1b701d6ca5fe0dcf40dd3d0344b0e6d5e485be86d71fd6d43bc48830e60d9cfe42b8ee1e3d89e1f48655362957a657c01d5c7ac4892d0244236085cdf150f8569e036479bee3062a3f6ba5d1232ca3482cad0a5195b0d2c61c5a55092c228fe287d4eb8734c6a6c6c0ef1a20ae46ea331ec9b04b83e6a1ef376e862de7f35efeace0db7ede1530b45165e7540af88be9beaa17f0f4fbbdf841458f0540f6f152cdcf4d73ef34db66a3ef5f6704ab9952ab046f6f510a7f3fed41ba8ae9763a0df37b15c8ed9acaceb58f8f12d7d30eff5b508b41079f15c8cfc80132f81f60c4a09cb177c0c8e8de67311cf5e896b342146b18d25a0d257a65fc172d34d3096465b6dd5c632636d7ec823098876ade5894b5be288ca56ebdc9e9c1caddaf23a0788cd1db0410a5f0829db9e2ec4835c7eca7b8082d0838fe0b139d7bfa3ff1b360783912018b8356453de275fe7c6c5577597b660f462d05d9e1ea3a10b62e450956c50a580b99b4b48b1190a2953026cf4df1e813a25a1970c1d51c660af6f3f80ea32ec00f40d4f9fcea89a2c6c24568901d168efe38371d0fe304f23965e1c28fc092cf4ab4b893464d00515c6a19f76c3ec8f468ae2d64234a17bd6baee728400b6bb7d15dbfb993e3358bc09a5d9dce86d15b0024840930232a0b9e79383103f1abfea5235ae5aeb40b406456f0722313076bf50368b9dcbc8d3c6139df538738c774a2c3e77ae412207d2c67382d1b9e95e09a8f6e45b282cbfc00fc0ea9dceda2e11e2b91a5eb6d5ec06445916125c65db1dc7d2b88be87c1a71bcd799aec95e6bde3e07a6f6361d8ef95defec6ee41b7dad93f0efbcb9488a9be2a53450a4cad90b2cb478b4199f74a0d04c13789725930ff30008302884efffcf2edc672f444d2871caeea45a38471f18c4b5709bb2a07edbae3cc71e932489fc039f86de16e3b6ab9068c965db889b16210ef1268758fa092f729d1c03ceb77e9f33fe5f12ba8a852504872512e3b5a8293dce3c8557350ebd9384bcf2068d1b132e10cf4e5a6a5602eba1ca5ed4b7ad053058993349bc8fbc23ee596941948ab4247926e0892d65c4f7eb3f82660a77850566f86b3f39079b74ea1092bcf588ffb314537cb44d8e940e149fc032eae6dfefa5cf7948abbebbc02168d6fbdf71ad8da7b1a3ad5e6af662a40d40c5be5e962ea44f535f36d5200eabb8f23f368743e262a00e6e6d8af614c843e3573b8241ffab015b36fcf3eb7a57fd7e93bc1512b03cd7b207d6d648cb8288d4e7fec8b0b45ab938c8acdb9625447d3f2af0a1a345963b86201b9f841bb1d7c337c29da04010598221f58ed2474bb9b2baf545d73800d856a6408c158b05504e9d47d944e578f768b0cebf731d51f4c56b94ef35f37c295732b16fa20b6d0efb4cd98e4fa644a1cfb852445309c98a35794dba5bf1f3f9ff81781d71645fcaddb3183bc4ed5e363168a4a7c4984cebe0c33f5781b139147ce289b87a8014dc834547fda58472469baa64b5e4fff9a0ddfeeb61b194a14a92e3fa4a6069b58e76bd0777fb51e5cffb28be078b89d699c7df17154a03afc28f9cc5f0f5687a4887e758b068af043279226e1171739e9e361e4c6f07e884f22b074d5b5809183a648c183998398a543900534481dc425a6948a7ad69af40a2436d9504666f0c0f40cc837a39c2195f85355eaaa34881cfe8f323e623348040e0ed69217ad3576602deee1896fdca73f953c89e4acb6e2057261b7de1acf44d023c4147c3c2f4320a383581271c2fd32910f5698fd9149c1009d080ef99b35c9ce624134290e0331da72e698ebdd2195e01d66d2e96daf62fff2657c82dcd6f9462666c44448d2c6c19d8c0780240343f7f90f0679ed86343472e6b2bdbcabf24af8a6de54bc9326f4e6278854bfabbd2b524074e9bdde9e671d4fe95513ad2fb4f989584e44cd928e920a890cc14713aa99c923fe07a643e3a3838c1332e989bc5b62a4679c58fbfd95ed3107e3b6a7118737680cc9b5b10a848e5810a779eb7352b1466ba5e686629364ab42ceb242d07cc953bcadad4d55f4e548db211e5c8b14e7cc8935a1999b46176c4720015b76a1b66cad95fa6fc9c87476958794c6f84d70f926e29987c1540cdaa4de5c5f6756290d6f4e0610d963a57828ea6c265116caf6a8e1d0c1a1b8f78c457f80799b580c51d7156e04ce95759c1195d588ae7a8b495d6dc625c39046a29f63790d195f65b31bb1ab107ac5402060da2126cffd165a395a8572698245f4959e1f313c3ec33348b84f3d97d02184d0283f9477ae925d3475506fc6ff674b4cd2b8d09ecd0970c58f57ea4e981bbc9de2c0c549fda4b61a3a37259ebf538a3a602e28a65e1415f2a628ab2a396dfdd7e98d5bebad7eefa49978c77e0ffc8a9cda7e0042d7c54e232a3573f837365b313ca3e0c4db732c896d0d0c1f5f733dcdc5886bd8e2721e2cbf5bbf84accd63293a85e48870be51847c757f48da9d49148b4fb6d78571464f042d259c29b013c05306bef8451b5f9669a6037536a980755e3d3b0bf9db449542a640858b531f49fe18474d977a9742c3bca3e50253d1acd40f6d95109070c34d526f366009d9cf3de95a4be6c9444c64405ddb057d7372e1f78295d0b067595053118329b979f5f6972e8ac82deae244b7edc07d4b736ad12b7db87f8244d69671491fb01f6fb1fb1adcd95c7d8d30cac150632d8c9c3df2dc1f657790ea1db44aecb8bbdbc0423b7e689ee3e6936f45316bf72f7b5b2ad0785f9a74a25d631e63a4c32150ec714d5796a7428bf522d7054274ccd906ab18db693dca824cf31f0d3eba09010a9d8a9e325671e5f899ec76011eec4df0c7d805f82eeaf32591ad9194beb270c2b641113cc98c848dc542b12b68044005c93e60ef5e7e76087cdcdafbefc00eb671c02dd46ca623edbcb8edcc162e14cc3a7ab9fbcc7ddcee069443da82ea9651bcac1caa1571d7ff43c597de6f32db60d7b4c3cf25c76493b63232cbea54f023d803bf8a91f74d6e6ea4e0f8f5cd3d0e595527bfa017563331107c5a06b390642e21d404b01d715ff4ad2102e3645539990e9b84a7ec89eb60359f03ec8c8b0189bfce2f2762a3d7d5186429eb612f55cd822e5b9b53e47ae00e4dfba8776c453ffb33219d84649c94aa08e39049f3197d69d541d52e2d3c977814d475ef9eed9370094c509f021352e8a4f14a1af8b48c08c69c6ef713cfcf7579453875195d5882dcc58a762be748db4c4e46b8fd5c0281e2242a4734eabd63909791d70ec6e32b6c7e3d9ca52a6568ad17aa84a60df54bf80b1fff4ae32302f6a4ec7103b77b653efd6807fa995ac16980f57bb2d19c59ed7c99fa245015895bd118e1e0612c9acf00a435d56deaf808f59cc55ae5dbb3cf96f0e60ddd3d1b9dacf45147944d1df3ddff3c9ee0f5ddc79a9535c8ef8445af092119061798f8e0e0f64036801da382690f004d89b2fc5a1a380655db205547097ffe44431241a449301e94cf6dec0fc84bd54f1a84730d6d9aa15627ae92f645ffba47c878cef312dcecc1f71dbfe901d9190d57e9e2ebe2b43bdc262eb304514354dd92dc8fd731514b4f8e485a0e238d19488700c6eddf21d40ff77d6ea3c7d144d57368521576448502183f626c1a784282d3d3934096bfc04fa8bf0a833f1c0b58b754b1bca262c9cf4d4280d05fde544202a560f5dd0fc87ba27d9202872ac9c38e3e883ed9f591655b8364c40fc2934b9d53380fbf608d19a0c3eac3a5ea8ba9be614168cd5b7f81cd85e04af412e2eb5c7c5b4f1d4b78b28119d637472af277bcc5767def277fd7e3c4f86c7a3e71f14f8f6d2d658ef2ff9b147c9a2d992f98282bae959f049dfe7f0e37150c6edd39a3ad2bccdcbd6423918775c76b7773ff7e1c3848ac6669281255b313a2d6a4a756c1cbe7e14db436f46065d76b66a519dcde1ccf52f351425cde92b36f226552ff69be3e335aa23e45fe932bb1ce277f4ae5dc25728e4b3881e9749c9842dd055b893f992724de71b95323916d5c396070035b59999e225882af3f53442cc4e6837431d8ee9665bbf7d0568a041583efc2f8dbbf91e0dcd924a02cc5cd5bfb022026a6fc305929e368b6eda60d9586f6d87b55747b0fe4ee136eb75e70148ddca1441af64c33ab0c86bc3260fc34a906334e7834b6823da696392dae4c8c5f01684cf239c6e106016cf4ef391426516fb5198512a7ad9b2440b0a719cb13ba4c5610586bf18cff7d9e6b1507f1b9a37b5a67939f4ca27a3d834183484d2e1ae09590da38a99134193fc112dda23cfe3f9d6270be4c2ed5a452420a152404fcb6cee3d527af292157637f8eee0f0a1644b27da302c81816fa045c697725b2dd89a02a89847f722814159306ed97080e1c686e921c57e805d2887f9feb49cff864887219298ec4da53d514a66a7f989115589dd7ef71229c8f28a66ccea19502faae49de1048ac328a31b7ac3aff7c0b4d40b5b6bd769caf9f251ac1bae586e5fcbb403eeaf683e500ffaecf2e553329c96c9acaf2b3509f9c0173fe367e8a4a9bed99b5de5c0aaa3544084afbc7c3cac879c4f9731bebffe839ef343e9909c8bb2a0388b5eb7cbacaeffcd8d6ddac9f87d074f7a8671bad26fe39895c6663dbf506cd6c2ea64220ac0009270e6c93cd5b0ccf82ed9642e85ad3905ae76955e89383b2c62f9b4ff075ea156afd0d574a425fe97cf206461cec3c299b3bfa6977388ed381602d691c0f9a5655833b8b88ed49ea153ce90b8eda008fc7874e37b98a7b500235db47fb94ffb65db6ec11282091458bc9d43dc2867715dc3fba39bf7fa4228eeb84a751d4af63c3c781f8e6b02db085e0d14bf0479fbb287d8ad6ef955925f8107a5940ea3076a458ddae98a04b40365c0423a8a84c3039cdd672a115c36f33d9d3ac55bd88a3851e14f2f5a9a345819e71adaba1ae1498fe11ecf7a86f1e17420255221c11a710fd4ce50c5b67479f5bc60a71d25001522dcc60c5b5608a3bde11b04b808a93686638e439d752989590cfaac08ff60900922e6e9c7e6f18b8234d494c376fe4fc2d28493b5da4e05f36aa5bd34d2275fd2b4d97380c588233e7d38c452e8b3f1034b3e70060c10bbacb08775eac49644f6c9abe658f697f3187652ecea07d28ba156aff534a1ebc429348440f4cd7f4da94e18da52e631dbfa33df2c837b7e976a3b0683c0aba78791f52f8a15e44850f8d088cb6de6aa2258c9b430f5751c463e55e697a62635c766264e7d3ae900380dd74fd0338fc099edccebf77e7d16d1d90c55d1fdc718892b0bc99bc4c0c5733e7ca60ffd5b7430e6b58e60d7875e58f54d95fee0ac1460d12799082fc28f7f5915361e06dacd635dbda1fa628abcff1a782d7868b5412194e63607a2ac5ecd0b815d672a56c1369020f94a47b277121555b4e7cdd1fb6b45fc00cac37fa3d004b3999e9d58c7fee6fac959a3df787c2d802497bae2470d7f507adc8f91a3c15c4feec4951a5bf44f8430f765e5f0736425e0639e029ddd5897de104b70b189b4cd8ea59a6a435c3c8d81458c8a142a78caf6e7e3a772bfeb6aea707a39b2ec5f9a16eca039789f4426e5ec5dbfb546284cd8d76847dccff816c2bf07f97b972e5c374235bca7b6ab1c52375d154d6fb96a3b0c108e00a3d8e413c27bbb53e9de1e430eb631645e259975eb2fad0d643c23797e73344889be9242e725943742a48a6c8749783c650894458f370d9c3f7f6136eada9e62f3607677b99b5bf32ae66846b23f5eaa4e0be5cd8a137e8ee7c6a03a5008230e4d527e74c7e18c8e40edea1386a8375f3311da1692ff03c62cf6c71bceb8c4cc0800afa98839aa32b2272408f5acb667a438e8cc61867956dccb1b7e81292dc5f6e5b1140376beeb95f4582a65b34425aae40dd7274b5ca7512c953512e8bfad58c728a61ee54298bb730524417fadfb1e57852c1390d06dace10c05b0d4376565d9abff4d7dee2edf6ed919e29cdaf736e013eb24753456a0c92b784611c22067ebe3294e552c0830ffa634ac24d2ea1fd991e8618b520160f7c48ee4ac4fdd0ec03691ddf783ce58ad120fb031966c010f5d34e301499f952222908a1bce0a2b18b0375fdf9ba45f5ab6399bfcf03c99937832b6b93fdf470528c7d8fe458eb3bdee0b25d7be07f79692b70cadc9c11702700344cec1459bd136d04983c28530a2ccd33f254bfccda6aad9e15cc30c422b934a22fafcdb0a78e38cfe6b260dfd344e741bbadb97299b5001189e1f25e964d20ef9d977a68ce90de10143ae84aed159f9db39939a9b49c975313010b721a4c7ef96b1e1e8e5dd365895dc91da764ab3bc61274bd2f716da0452c479dd67d15546849a41a23747ea4033ac9e8ad813c1b44e39dff0a99d29160de05a7d1237c092709d6268edf5cd3701463816520fbe0a9908860bb54c61492f1a9c58729ac00def98a618d8d046a8b70a79c49e4929f1400d41df22c73e6c136c298a2f2cc202128bd58dacac9643c0090d5f5eec36796b7d7d6874e2e4a1ecca49224977c66f1151efe20d8ffd90c2e294d2789245f36e1ca3affe58ae729491d6383201ae57273fcdd789438c1170b26106286128cfaee56368429d7b591cce36af15ab3bc9c34b6f42e13fdc98bbed6d2f0e8849a8a5cc90e03dde60e760b4f93f00ee04b2f124a2c03e5c5926444fea4592feaf2c4126acf299ac2dd6dd429cf1dc6a5503bd27f975178b396aa0007e438551880b13a843a2673a7bed3a82079d030a42a4d6f750ba36f1d6566aa2da8907b2b0327eae9115a62f49035de0376f44e9c8e8f1ec50ea1caf58b4bd8fc89a7f9f76564bce4c40f066e68c702947e065adad29a9f06fd16df54023a08d4adcc9e10d4383ba6f29c12604aa72e132956a3b27f31dce02929fb9ece42117beb708efcc8599ca30f11cfc8de9f6600a6bab376cc55de2391faa6cec452fe153b4a6a10709bcc0f730612d1742558599be4eb20e322977bcbbf351bfcb19ff3dd5155bfbcfaacb0bef2268a9b7906f4bf38c545c9dc919d2c61f973e76d4c9bec419a3e2e739b3d99f6141289dbaa7c15e0eb2318856a5f93ad6ffffa8d981cc48c89d71ed503cdcefaac7648552efcee7594b674ce54d2fa21083f2764c7345a5664364be2dfc3020718afa7e62ea072597ba61423c5b70bbf225ad6faf95f196c7a6559128081b1eada7311f4711b131bc6c84bb06c54993aa41c9d1e1ad7d9959b55e538d82ba26c75ae01fe0f1978b886b4911607afa8322e9a693511cbe59e00920395cec50e6468970e1167feeceb84431caf60b130b9737de99605f21dbba9853eeadb6c30ab606dc6e9963e90df006cf3c0be501119c3db9dd26f4a3adc14a1476b04ae0d460b8c44144a6b9ef849efd24abdb64f5c2e4c2542fae3b414a8e9a2e688d69f580c5e2965834a584837e41afb8a1e261a0bbbab4b0c922224660d0186636a83a3c90b477ec011cf2c01ea0c775fdffe29d0d4762133a0cdb7f9f4ae216e51d09e2d6d39d1f380c156ffa1ce43aebb9452f71c3d5ebbcd1c4db538813d18e5b6da9b936728f6f06dc0796636b64c3e17ff6289fe52015e56e76d397f4c77eb98f953bbe9de68642d38b9111dd70421f23b446424ddda07594b4739c65f3077c148e16ee3b66f3bd512a50a12cbbebe0aabb68649b6eeaaf0ea26f5091584da67d3e1ea599f298f0858f1e36fb01a89b923dc004649d5ca52299f1c76893e3c19fc3f3b3a78ea6d1ca79357d32324d78897f4679470295ae3b67fef771fc106a050f8b9d85f9765e39eac7ee3f7cf179d63f6d6359c48ceaf070d1c21962daee2b736097e4c3303e89a19f339efcfd4cc5d263b8edd34c3765f47968669ac1ae1768c1232dfb04b7a81310bc15c3faa574de676e89d3a25ea8345e4bc3e49760c536363f0d22abdbe789c07a1b9f25941404149edaeeec47ff67d528b7eea90ed1744d1dcf4447dbd4c944c0d6e7da78996a16515292309512d2c5a314c658bbf531e860a596250b55b26cdec7b6efc17538f6c998e831bdc55c300748a8ef7071f882caa2f7149dfaf807d716e13de0f220bd71101a15e962c8254e880b9ffb9b5c7bf8d0fa3b7ad732234fb4afb0c1387dd31b899ff83c6440263d19e0fb6fd83627160d07b8b9ff4d85b7036c27133a9d2b6962f80a9bf05fe2e5f73f744b86e795ff2a0d3bab1c5f9409b76d5dcfb36ec0bb5fc24638c73faf1e78d491457043a4df0bd70d27571b78d737582b80000f08d2f8b4d0e49e0f578174438f6a1851a792a1fddfa324209fb620c19e1738c4c6d690891194de8925e7ace5284cd691b9932c41c6a165f3cc8a23558ece8b140c39dc1f8934b401cb08f3d70f051e8643e86f74a9face4cadd286bf4ed33f6b5899e60bb3b0f89131c4239f7a8963316027731ef4e65fa308cd195c660dfe5c5aed6a3c635e9388e34b578b956185a1ba2ff36fb1a6b01bff474227385b29a3f5f34dfbd5e7b0e9edcd786444880c4047b8434f8d64defa6a0d996c81c79907a209654a3a4d1d5c7dc58b9f3ecc185bde5b8ecbc30640ba18d15cb659dcc3d600f393a3e890ee33c296da9b23069ac3bb436360f3605ec691b01e812b662bee155f45c43a82a6ac40440c2e897b6f72e3cb8763a2c34ef48c12d4a1e6b27d1732cf16a8115897c6cb266e28cf1fcb7971de28b5c5cfce2f5aae1a297dff1cbf3d08d71a8ab59a502ab08dc8c1cd9b19b05df5e7c57ccc041f340601977fe0dc6cd7284787de33c9ee66ace2293d2ec9fa47e66796eff78b8db12c0741c1cffb56873314cbdbee64dbdcb274fda3a3a9a4cef26d89652ce2f7abaf0c840b2521f6177495b5b6b05f78e76e0fb9bf8139581188c721d260917d2ee6b3e790fba7a47f522c62b5b7a0bf525a9435974037d38a4da227bd83ae32e41329fcdce7a66c4967c8a9171c4f8e3724b8a8cf8182555d1d7f143c729a96b83e82f74b02f6f599c19839cd0dbbe7f055235483aec49dbda6d0a900282afceda9502caa32c14415d917f5faae43bcc4255dc3b16f6765be106a2f07119f05a6c4127f7e6def0f17e4750e24bf577e654776cbaf5b311d935936ab74f1fa38912ff3b0f01b6ec873bafa97da9e31ac6550346abffc28a54e1714d7d5f840eb357ef0b76953af1246fece1d7033e79300f86e5e073ccc50be51ef94655dc0cf01c0a5ac47fe2dd2433b07af58d50ff93a2aec6f929a96cee8a0c4a76e7e39e87f9edba4091ba08e697bd02707ef7e935eb7f53d3cffba80d8df78f54ea7ccdac75467542940c4912ae39b9846264146cff1b4c5aad4ad61a3684d1e27e153e706c11b030d9fd38feb45dc256003a35ecef30335bf458f504c5a34da733bccb4f24a62e17e9fc9d2b8fb8a06c2011e2140c8db71982a4aa909282677a838e43b30e8f92f7d7a7a5c8120d0c42cdb24576ba365c1e7dc7a179802f452ae93b6f2f5c8e99428e6ad600c85d1e07192bda2ce5cfde0c29a59fb85c42a1d8a4808db295c044bcde901a9f503ad8bc151e23dd2dc4ef247a9f2be9bed51ab4ef52746b0438b33d96a8397ce500171458f7fe1ea4dc9b07e00121b29bc28d8f4f8f7371a5fab2f950353211df9317ba4da08ac684ad8b46ba4eca369c72c3d5e2e592a53cf6a31619f9c2085ee35d58629ce34849bfbd75c7f64bbf73112784a8f42a3e56c0506756ac89101a67acbff2730ec4efc028799ca4f4ab209c0202ce03a178187fbc8864ecbf182f4e3c7d00a04f78527db62cd70ac4386975288ceba349ebfa7cdd949e2d81f070df92aa394c060b4abe773a0b8577ae1f4650447aa46596016ccec90a32699da3be001d108a1cda0c67dff2c2d92a7fe626ccc5a83b7f5a55c250aa2daf350cb8e13ae076048d0544330095dd51e81886da7f814454840b3659e04b4e903cc4fc949dfd36310914c93c8f9a59eebceb4712997134fbe95af6044695e9a9b1942a9eaa63da1154333b2288116fb305ac5b6feb38e3b1fb38ac3520fe99fc8143ec4726af00c247d5065883f4999c0e92448f34d33665243b8d3eb3e78b3e8e0aa924f8a67c923d242c3f057feee068cb545be603f3400d6520ea408c1c279279e4eb3f70797dc62e47e211dfa652781b035e834920e25f249dee12e0b98d642083baa0ab08eef485abe174651124d94d6c3a9ae9f053bfbde03ce0d10d2334d77c7c7ed8aee96de1d491e3a3b9de016c392c2dede8f21e562d21524646c57ee438666ecb449d95a41d86f4538d1fa8dc62578746bbf0830b1c09219bb26ec2dc0fc7c44e6e5bd527eeaa00b11ba28fa1b3d20e1e3e0ec6132477508ee0c2f841c2ee99167accc45c6393526020aad542762133220189e5a4b567868e16f8b07c028920849b0746261a6af7ad61736145eb22e1f30857947129cc4fbf23f67aee2fc4986583eaabcf6d8e85fdaeb0f4cd2a1aaed1da1da1145514f50fea3eec4f0a2a568b3c097949ea4e536c0911139a83e8abfb53ed94e0e0daefe098c0b41c193b6be6e88125434170bb9901c03513fd35b15e5ffba1de525099ab5fa288f00baba139ce58ea7749006b019b35e4f4e090caa4453582ec1752c3bceb8755bb448a3c1ea4895c3cbf4a765effa291158351709ca45be955c356e14123fb98c6ba4445bf8091c34355ebb1c703dda2ba4fac4fd954d42890536c67d6c6acaa0652666ccf709103eb9d903982608fd709b32fa09b5e9af3259a3e948cd806a0995bb0eadda55c89d7e3a616d63b000e9e4d0d637fe08afa0862e92c77e19df445e3ee20491ad4cb35e0207ce00cc50b72aaab98f251ac997bf0cf4dcbd1ac2c0971d5281c05cb274bc6c5ce7da526df1f72e35af5f7ffe10c6932ee1361e76c74de785e70db6342735f5053c436131e908395ecb647b75da6346d6d237891ae5c800cbaa5f8a105cb82b6627d83d59c6f2b003c3668022cb65f5e1ff160ddadc09992d44b756971b8faa46242820d9360603e0ad6a3f76c9822653b9218ec4f1834e66a3001ab629424db19af198e2aa250a51c0a9f377bb7718d0cb1b976a9c6ae6618f98fdf9a314ec5283e5e2f0f91a2e347ebef2dfa3e00f8783931056389a3527b28e88a57461cd19cdae7a8253b13a51e5c4b78975ddce3aa9021c1e4445b0992802c18e70eec887846efee727605798e4a8e076e68533395813b01aa1a4f8fd44d2f706a9f04a574a3f7fd696b74b9ba540c276750d1cefb798e3b5bdb72fcaa150fb292ab2e8067398cfd59b41172a4736cb8ca758ae7268735c3ca92d8c74d91224d7a9816dec4ab42e3c0089edfe49bbfb39d06957074a8c06f42c187af8716b95f3ee6d4cd1ecdb400f103a278eb798cd4ef3360417adf73110e0f8aeaf6670b8e68afa24099e6567f7b6dd6638d2362fed458ace305fa2a498d5e5c504d831b67547e2bd31150c85c0887045eb3d4397f7b7ac2c1801989122c60bdf400015f2806e5967a3d20811696c9ca01eb8c4d76be7ee8c03d733e2e245184d107a05b0eb5ec72f338b26f10c7e6ffbdd41b1503504d8c5d8e1cf3f355ed11b6fe750bd2f221f8f6b0f8769a4f8d69b38278b1da7e50b8c57ffd9868438690cf15ce2fd688ac9ce4c578a633893985f43b5d059359dd442074bd80bd9c4d5f86226edf1309d46edf96c3c2a6b39ffb70a55a365604b623e81f342e71f51f3612af6e2b65eb9cae868d3c75ae53125ba4d4a701d3c1d571efcd79b0a55430f0366a609edd99ce4319ba2da75303a814645ca9f4d69e920100072ffcb4b589b9a0d284e86c2e26f0d5741a74e6ad1bf9c184496cd04eaacbdf3f9e554611274ae90c4e80d56b862ed6aeb92f02208f49e8a5bf92679a92feb6ddd1cd3b762f043c64218f69e1577db5c5349bcb6003b342ff70b9a559748dcde7b0634c9dd0912db620a12fb89803b89697513e293ce8532a187488f068ec7e811427fb4b6c7ca90e515c0ee5d0ff1583ed3c59bbf8c18f014239bb38e6d6d5aad3fdbd9449748c20df73b5fa58498b0052e2d8ecf119622996a4d7f01df27c6072752751da672f41115dae5b64bc9cd09b98ae2964654c8fd28c195fe617d74e313cbd6eedfc222dd654d8d06d8e8bfbb73c7f30c4d1958ff5f2d97d41ee5e1481c684d3a9aec9b2c7bb62d15663ab512d4316661f7fe424244028617ec927707cb335bc74a8c6b6d9006ef93ea15e0ebbc217ce1e6499c7322cb146816870ac0fb7e5d9d369db1d73cad1a6e2ff1067210a3d115eac9869900db909766185c4379ce57a6eaaceb1616b7340336e772c41f7e96923c439d72d57edd0bee51bc196422e6422b16c2da31f3593c3478eabfc4cfbb7f373f3b3e3c2d4400838bf1c90e5589f53401ef1f1f57dbb6554fa5eb05decb6e284bda7fa6d8688fb0959f5cf8447cd1fe10e5949a53b3f4e70341d2359b5ab89f0e723635c7e94d359079da9304f41fc30f0038e00db3ab42984724ee8d9dc6635bf718012b32173f65a703a93abf48d2c1545139edadac1749d3eb6826aa88b0cf4cdb9b18ef11fc55d2a3d972adabc647cb6c7f64931095857e343565dfc975469239d580fc7c41f21306d25f0776b26a923d2e24297b474f4d4ca746c0f84132f550c15b0466ab5db4d54118f17c478f4e9506c21e20309d50152159f7212bac3058be7e4bf4341b6d859e75c34cc19a161c19bebb17b633270c851077679806c6ed5638efdc4cc39a2943fde86d63c2a2b7ac9b89441067b02c0d8b5d9a12871b9347ac6242e4874ec266f2763cab147f6ba1d4279e9946fce4ea7a5255fab41a89408421ccd20e0578908760ea88cffb840a02682bc092f77d30c6f87b534f4b0896f482ccbd2660fd2be733989a126575904ac7dacde7a3d8bc7cb5ec7bd81929136be930e0ab9e816d770fc0d1fb64ae34282b9789872ba2f4f03ba86ff37d8eca5d06aef3c930907abb4289fa864ae513febda2607716964fa37872e04bcfec9b83481a2a746585590e3c3957ef8f8c070225755511996c19c900a390e6c0291bc898fa5a69f228ece1b561d2717b438f26b5562d1b94d171a396137e986fd301e42b2caf8d598ea4b134172877c3238cfa823b024ff04bbd69e8b4192257c71e6b0cc5c7521b23666866b03bf85af3f75ed42fbb2fbafe83e9bd08ea6991fb9e52edb7179eab500b0761c50cc85255ee70cca2f8f951bf0e351ab6dfacdb2adf2199c5c75c5acd94f8d58b37aa640e13592caaea6d07a15a521d192b3be65693f5a112b6bde552a66f8da00c24835ec8c6576c5720b7fb758c887135620d29e74b00a8f55909e90cc8c38aaab1e75bd49c7d6b1ecc630a547abe31b42740561d16b9165f2d5e58e1d8ca3870feab23901bc9ca5134a5fa2c771241ec07efb34a3a7a003be31c6b1f1889096839168a60d5333a960fae17aadbc42b9159cf4ab67afc872cd8fb7ff7818c20380856be667336646899c6c25150f3b78ac5d88ada29540c38312958d3cd45438207763d1ac8b7218036cfe185b7b1d50f2672803f59ae3e0719a19fd3562231ceb51cc801c1f0cbaab84eceaf429a374bd98bbdc8ee86c20f5bd7c7ecee65cf40d8f10a2320925772297228f27f6d81a128dc85e7c52b6bd2e8270b318033b4ef434a91794405f79998e313e3481e11efffcb15c3248193bd248ce1542ec7b39a11b3e7cdb499143bd9bfac65bb298938e5f9127d1bd874e40942a0c59fccef689e47d87ca04cbd0980a81b1066ad43221066ab47de7fc29b0a6b550eb7b8feff0766e7cf973e9392a784f8a34fc9bd2361f64fe5b929c067e55318b38c90490917a6666cb4f229333c8c76e2488822a953374744658fb94870bd4ff8434c963ad7f3bf153e2d83ade2c152bc215e646101b282690d8c1a0c721f1440e557fc11c9f331889d33f1176201407bce499580650b8b282d3bf806d7a284e03caa8ce55bf848542a1a0f27517268d373cf47e53318593ea259eedae5ebb8f09dfa9a80c18105905a789564827231eb4086456cae71af14a5416624b237f4b309e6452814a084e21d39f2cfa5cb3c9a69c5f5fd720a11be0a1c8b86291404ed391646c51681877a706d0b25381768d94a5915095c110a9655f7ed686c2518c9f2f3c0bc993a48c7c64c980257f3c932825c98bc7b60c4d19b1285c19ab9e6cc8bf657dba6468cec207f21d3d907184ba57754817e5b621bc8f16c7f4e13f2fd7e248fcbd5982400eee19a0769f13a03c37b4a5b61a662121929fc29dc8152ba4bc36b6334194342453dea7b6a3030d2e9fd9807eab3c2363d6ef2df0807c390f8a9dbf8c53a90033b4cecb464ef5ddb275ce6854af354ed6eae3d6435bb43f34eef0e8e1bf342eaf3d6f689dad2ae8e3fdacb0d1020cd9ecbcc4b49bd34ccbe5aea21e70cab3eb3ac131b9536721cce03fb3e738d10b097fa48bd25197b2c0f0260ac495f7bd684f0f75d4450acba5f7d3ac8215ca854027d7dea2e32433770af12733b2ac87db689d584430682f014228342f753536cde93181e332816452919953db18ae56d4e1633321f225bb1f9070a6993fdc2d7d12aaca25172d7ad51828edd7a09faa86ef46b8546424c4bff2d2de380f385df95cd2ca014f062b0fc79d3583ced98bf7e80b246dd3e78a1d5b7dd687d18af07c02a6d47ab5328334a9a7151b3ef7c2e85fbccf7865494c8632282027dce208523cb8ce928ffc2a12b2e9be92b39634088334fb6ffce655a022cc1620cf37f40da70ef1746eefa82f41f79a6479a186b596e31e6439085bf6a6b518105bb49a87df3a8b90a975effaf5da1d04d89035237c26e459f32ff1fa2c2581e7db64b04ab9c3c13870e7f9dd23fdac4a15ab3679ed9028e994b8d0a49b33acec54f16d253daee8433572e5ca75b491ad2169a6069379c3f13f0a5d9d110fd08f69581dede241f64bb1495e151251c8493055f7cd457357eb7eb6900e33575719bbae8e3f1d13ba4b8abf9e988cbd331622f36bcce50a0c9223734d57e8269886b319d0838fe1b11423b23cc10ad3e8e76c0ebfbd8a811a4ba63bcc0ae62d9d6261b3360f0e1b725856521ec12cf6c59a945c6f65d685a38a1d81888515538b3c22d259a53f1ce4b5e22f9808927a9d3cbc302d1da64deee563e4b8ac5b3752ddde76398b1031fa2c2cddda22e0d1c922506dc84b256c1180a1662026f2bee4a5a60e829e4d515cf06fd15cf4112f933a4973d71ab30abea1832d3362cd93c05756ecf76b522a90faf24b365ded97e7a5709355212d61414ebfba3ef90665edf84bb52104f5bf10279add0db3bad28184e38182f6867e2b397a97dc8aa24078f8ced10992cef4d87e89c7b1cffd6eb1a131291776f319e9965997f09bee51f1ddf3df593b497fd048e2fc0afcde8f7a192c91ae9064181956868ca8562e2ba1737d8f9a19e83c2d1fffbcf200c50cb068fe682905385c4311f7627ea97f07560854b890251aab963d5c8fb809e4288d7af733158763d716d215da66654345932f414d75cc16d744a47d48922132185b54adfaa579e80659d15618c5675ac129173c6ee4ed71bead54ff157d22c658f3aff5b174604157ff6e320657d508fd5f9e5281ba748a259c4b0b73b815dfe64f2beaaa0ee1fcc79882c30bea67b60b13ee2b709d5010a2e83c12bbfcf893bf06ad15583f7de83bae157c15737ea43e90e208a6a178f892ed964137e2663719467e48d45985dc49189c722a7e9bf2378b55f9d3c8fc25f25214672bb490b09f2e6ae6fb147b1b9e87c91786413d601defbd40dc4b7a14dfa68c16cf43e6d4d434aded92b91e3346b432f2eced55b9c1b2550728f2d55a16428a1899e20c3cbf5db55bb3f0d47db404424f79517585b82bb8846a9adc992d6dfff0dc041ff1ce6397c2ce1daeb5496815e6d6f838243d879df38025c9c4fdef93af8f1e48ffb566bb2b0baa0cfc6fc1070d4b9ae13d7ddf79b6e227a1adced590e63585bc77f0d86df7638b23587d3e02a00121349425ff6cc7c9e80604e7d2a14dbc04f2d47488fa7c7abc1b63f3aee01118da719994cec7239d2911cbaee8ee83d7a4ec63cb73ebd81901843944e2b2ebe417614e872be40e6d816d33649a0c99616f4b41bb3152244234f1e4fe9c1af7d7ae7b02bfb922cc0e92ba10efac58fda95e69f621e8260b24c1a10f93a768deb07ca92b74a5500d8432f8bfad31e3ebfa67720ff9d7c975f4fa1821b07ddd325d13b2ec043d03f7ca94b5376ca3065beb68d59182e37c726df2203395ca77eb5bc4a8cfbfbc21824338348f7228c8d7d28575a47a146e065863d798d2ecc60111b69e33d79b85cfae1c8dab77cccc4cb21953de5cc462d54d280e225da842e881b4077db8823cd8cbc8df71cdb3ec1653fb945bbd8e0302220846a4c991e6afbb6f617c14776d66784f6aa88b964190934f4d965291e067548550be6017d52c9a78901684f5d06131e34b06da09615332f6d568f895ca3fbdb941d43aa0b19fa53be4a96d5a2056e66f400e76784f20fa4866b9db0a402cc75f9954591bd9c68cd010af7c9212ea88b331fd7b921d84a3d8163013901a628a73eef170631fec74789138e421dcd0c33ccf798a42e13f5b786ba9d689773e6e171d5ad8943f34f8a0605181bc77050a9d3b1e3f2935c7115af3c8c0da0fa39a0057f349ccd178b146f414a061de0581d04d5f1211238c81e404a3d19412e08d9a5268eaffbc506824122d029e93d20f4a4e9dc86944be5eb7bd7205190a3f0dff6ecac061590a266e6b38b9418aa81f01f0941667f9182ff1c2eb6a33fbe95bc279a6ff9bcfccfd69c150550a9aedf078c08f415da989e560a2a5bfb4ed08008d5e9b8d7de2f2f704638cbf0a587eb72144004867890e0f3783d5da411b0bb32bed0996709fe76c1e1b9bf11dd53cd3f37815accaf30debd783eb7bb1bb14431a89627d471de66531d3a1390020548d737f11052426cd05fcb7fb34b5c84bcdcf32073e91fb7673451e4d13c47a43dedecd686df12ce26aebb316bbae58cb5589f0ecef7ff52c8d6ebe52106761fc4a9fcdc313e2d9ef14f699e165961cd3c921d0561bbc9924a7c6b50689053fb5510a0b336dd8051827bf54880a5d5cd67e6590a8a078fabc7f894d13f0602aaa7c9ce8944f2d5f62758114b8244b00626adc321366c4168288033411178fe4572729dcf39300525db12e5dd22e300e5922dd2322b050ae1694477a9221b80de8fbe857a206ebdb326ad69f6d3ac7b03a5eb37aea4d3682ef5b15d5979c54b93204317fe7f155cf4d580d57957be8cb9b570d441e5b3554f76e7e35d1baad72225d1b9d811925984e1f4ed8c6af23c1fd5a329af054476213e3c39abae4e6d6ea3aa1a3f81b6c80639cd547fe9a634f1959eeceec74d1304579e1a228fd4ebb9badf4b694d321d2493abf08b82f1162655069505beb54956ca674177e596f44511f4af8bb261eb07cd859e57edc581d1e3ce5719474e633d3c7989fb44f35727046702b2f7cf510f68e38a445feeaa41b1a8560e39750fe36417b8b0b00e568598ea54ff7a6c2dea01731f244555328e62058ecf1c5402c307001b10adbdd1cccc4eb037ddc8432b6a40d374c99d61b33b23b45028ec0d31cc7590f012959fb7ca7e056d460bc8952254be9eabc75f364492bb69c4900a4e3822c82858491cccd45c1a7e6ebf9de0dd69796e9be989fdb4036ce9ade29403df7fb29391d1c9015505814f25ca7f0762cbbb31a375823be56446b0a217a5612a595c38321c67c1f1f1465f3f71389ab255905834d62b59e698f3daf8cbd9a9174114d8f0f2686da28b30dfa5c3d24b49e7b5728e73f0f7bd877dbc2cb36bc22c4b01dd452d73d46b254e00a31939d98a7a9f92aa0ef39a2400f157e30858c665836e46d710d21642f929fd1f0b87154450a20c94ec14e5548dabbbcaa7296e7bb7e8fe7f36cdae1283c7eadefdd52e6865d2ccd2ee6718e8331bf53138872768a48e1f1697982cd48144ba72721f397f95c1901be54c330403711be4e8802843a80635eac452e248ab164a6795dea73c34f9bd2c1312495e1691d92ff4ef8006b5e325b51373e1fbe0bd3f190b8f109e71cfc0c3b80adc5d1710babcf246c19c8c140e53ead7c9d55fe10c29e39814a1a829b20bda3a4705f51f0098b949e3111d4b89bd3abfba08298b3ec142e0b549d2d44cd5939a15fccebd7d16d64c63acf578509b75404223f3876f8288fb92d900500b987a4b6e461eab2f8ac92b89563f9b513ef31181078870898fc70f1709dc35825a940b41be10672ecb67f164cc3c2069a906008705d5a6d7d457fdea78eb15e20d1b4d7a43384bd0d5f67494c6153d93fa4cca1989acd1dd9f3d1c8219d8cd8c7a1e11e6adca637cae9fdfbe408e638113b488a670daf0e14e305d05c51936d503f2b199780183ddbbdc75aa71106d860d62da5d3d609457f9b5a77185e8ee5daa164260464e76e4473f1f9721aa2d6bc5f35865d0aa17f676c6dd31cc0b32d1a65aa5a551b7bac6b47be69f49f08adeeddf04cfaf8807a41195f1d276215a5e11244918377a98d4493cc824719138b48d4bf8d14c3b1f2be6d575282270d848a999ff11d146ee0cf424585ace85b670085d326d703e34a978ac49121c7ba0fe09d4233d00f657e9ae519d3459595f73af83587703c6ea8b0ed627f5aab656480a97fd02010e64f8897af92b5ad7b1bc2835c1bdb00937823377a8c9ef2a310b439be0899be8aa5ee73a5c2fbd46ff66511cd2a5ee7e9f2faf59a7f2789bbfc509ea01c1409f7a858aa316ac64822f0e3d2d03b07e2e147542f8b196d3d332b8038662bc73be140b30ac2cc608291f7620e58e06fa0d5921ca66cf5038438be6405f6556a5b417e9565219c4749ac9e4bd60ee4ca58d05f3abd82b8ae8a0c574b2c37072c56cdd1dab09d703a85d287af525bb29790a7491ca1f60b7499d8d085bfff8394e52a7fefd340788ce2b7a5f024aae96dc65e536a19e76a315e7662923e001ef3e4c47739389d52e90bdc949e9c0e5db1b9f1d387b2f7dd188e4df1c6962b6c9c77b9c93ad6f76526c2ca0b643a86f6c96667b6ccdf917a8915de451b67146b9efd14b6c3d89baf633a4fff3898e64cb7a214397d152f455578482f38de6fe11255c57efbf063cee2cffb258e9bcf3773ee98c44507facbca65a78fa03fcb71dd4e336afcbbe792c812678ffc02696c93573f1ba0d099dcfee8267a0b1b9ae2ae71c10be501558244b70127df59ac52700152eabb2e9437e12251dd7c34d7acb3183e687a327d4659a6ae25eba7301cbeb3627606e78d7ccae5b8fdbb6a3d82433e9c9b19705aa023b8f5f50044f839ce11b17a33d2bf4a43b6150a1314e023ae36b00c175811b1b2340233143a0089c6b0240b30da398c661fb4f76895b8bd52ae651b68df6f38c9b862fe452d4975328fc347cb87e8f8d3b5792bf475dae1cad645d93c0872b57265ae88e8fa2712faa743e645a23d06fb1320078599c6ee553285dc7e2f18368614dec7610f24a9fdee33fe0d34ee38ae07a92e30fb9b0ce6b416b5a8e852cf3f8cde28b4fe0bce696c2c9cbec56502353ecca2fd995caa1a54fa0f5f064118e3c1606ad32d6d53bc76a24f913d38dc06a7ec58ed4e6b61905095b5b55602934eb61228877cc12a624574673b60cd73d7367a6a9659fa47a2439e1f81b008dfa8bd6451db75212eabbe9cee46d87488bc9bc6fcbe5bfacfd2622891e509071136022076614908e8c3d24ea86b757f5022fb3b1cbbf70b80b5bca500b54c3096fd52e1e57617396b678138682c986fc53878230f0ca69622c23bca1723349dadfce9cd9b0396fd27b6ea2d62e920d0d87737d405e6aed34b4868a5fd2d911653bb6d5c9064e2a2bfaa48d085844ce149fccf43cb2ff59af907e37bf42708f3998a7b9040e1b781c5b3b085145f9cdbca5387a857b977b5ce3c68956ef64d521847dc5fe57e64b9ee7046967da6513d6a432e283fcb0fc21e33e87cae1965314237aa449b339f4a5248421059f5e069c04ccf3a7e33f418bfcd40d3be7e5298cab28d062e44a618165913908f3fce46e99423e643450c7afcda1215401e6158363dd9f8e02f133937f90493c657da21123eff8dfe91a8c3b89556e4c6d6152fbe9e3b693d5603765e65107ae6e9800a9de52f73d87921558979e4d61e7ca5ddf509edb76ee95a54401ad3f9f608ecd1dbc7c3b485eea6285399e8aa8a7e19278250fc8243946b2433dc0485d68faac17752035b83b7d4dbf8380d6dfa0525c67d1462055e28ffc09aeacf8dfd0b448e2e0e1da5a127c7941fa80b26be379f0514c182c43a70ed4934dc35d8b280c2e5aa1786020fbff567267826cbf031391be99881d6b34425c9cec34d52f7b9f2cc3d86ba09f398b6efff94c3d2a68ed6c919eab013605685f5b0fbbb984e37113e29d88bc51d23d32b75fd4f2e3135eaea850f2ed60ee00db4d594d11ece29302334b0bd116d4b08de4da26b68900589d55fcbaf1896113fd2d94dda3fa93ebe49187260b144ced6dd93e8c2d2905c4770f0e7d687445706f92fb6b04546f97676ad0743bdb54ddc904efaa3f173875f88a26ea1fca5a7997f057ded30f94316d5c559663c56259f62c930ca30554d7ca93b5f8588085967cdfbd7d08726d9dfebe465eaae191397cb3496fb96fa01da3460280772b16bed33ad92c00220822ea2a5cd3ebc87985ee45d6a0ec2961600d1c12306c62403735a88d9cbefbbd48f9625f3e5f169bf3103bda9f1ed3d7c817b54a87fef5aa41e3b3516f1cb80fb8d4d8609778ab3d5d1985abbfded172f2efeacecffb051312912d8d26514113da779d16881534a69bedb8aa8f6bd2d51df698221f5764f78539418779c7899a9d5faa915e4b139183bfb8e99ba24938c665b81936744453dcfd94e362813cc201751811d8459e62a3568061d151bf7e5608f78896aba78ebeec94f0dd3f7e94d232c3023afec434902c165fd0021942700e030ba2129660c49b3e214bbefae799794026b34cb55c1e457657bc805c2d8d89efed4c5acfc353617afa979598e32c90b7717473ba818e5d9041b2da9695b94a873fa681f4445a3c56de8c51899054d9c2d7d38371a88cb9ca429023fbaecd7e391cef65e1c436e2c4bcee3d41b62a0dba91f012472e25831c4b28b71606b7fc72f57f5f6c813301ec41514fe53b103780733affcb3d40aa1d219fe289a50e5b6b5810b9b9f1a8b72f825831fafd12117274fc9ae088c987ac03217381b707b8dcae93e272abc3fdcae1ed3b0d49577de69edac737df79a93ce6b3f37f59c8fd5831e73d045808175f757f988fa79153040c09292d4efda6f582b9197c54eb81d729c45fe02d35f16a9e10d4f02dd7dcc22082eb74adb79cb072dd5d6c58383bd03d3345b45d304794279114e9d6c97aa6c850290c7c77d4835b2d94b4b9eed04a6f7bf6daeaeb9363745f74f04a6a192dde324127dbd2e1b495cce16a3b25f61efe94289d1a393429cd9e38201cc698bf57309822764bef76cd6930c7f2002f57827348ef693accb1b087c22d5adeaa79a203eb011faed4bab1f8a9785e56eb8ebc43828d304d0332549c7afa304f691f7bf7efef3ca7e74b1509cc724e6a362ccea3566ee5f09c0ced68cbe50204b070690b7af425a437c963870e26dc98fc734796fed3c6c89d71446315eec0f4b8f3ebaf7c3f4131be43a6f1ad763ad390f90ced704619f33c0755bfbf7bcb04987d26dc524d976b9e87bcb712bb4b0a2458d1bb5cd6f1383e11a403879666d121b47e2c2d8a2a3e2bcc473683f199cd8f146e9e24e04a3953fc173bc30d724beb304930a4f93ce8e1d86df214a9dac21dd6337e55f442c1ff1acc09391954c60b224ea2e92fba6fa365cf1d2846462b765e48901e176abda1327aa52340b7b63675759fbffd97459e117d7563007f9aa9effd7838e26ef062aacd2466503134a3903fb0f478ad0cc297093c4b41dfee614be721985ee0634996e2a80bb7d9d91584bc17d9449fcf1c6ff89d19b7097f019719f528c9b6db8d7f67d54a673a280804d33b70bea252f49704d873ee2437668ad3ee6968441e7f59fd35ed1e67f16c256bfc9ccf3df530e4ecd57446882a1aee2857ea6a11ce0eeed420906a343b9c4d01d8ec00d2d91230be01f8009d1ac24c58098e4403e076639d6bcb298c44fc563b0b0d6afaeee63e08c312a50f51ce898e3983394731942ef9a34dece6fdda229cf9e49abd88c152a14c6f7cc3053bf1a4fd328c14a4b15ec922c9a0a5ab0647b0372e2a3fc5458cea69d7471e298597831e1e782d07fc68ffbef44cc6d8c92e93e8a206ac8abb1b7fe2e135ea5eca3775dd9179226992960526dd8c0bfa9d9791ed90590a167d40c3797c49cd586099c094e7a06a94c4303dc0d636e54340b1ffd022750f579ead7afbf43a656f932307d48ac5d0af1a720d89b9545d5cefaa2177b66a527692d6ed126a3a3f7f9ed654f72a0e7d31d20be21f02921228e777db5d724f8d6501de9a987f7ec11f3b45273193899f8a2dfc44fed52cd76e805781c29544a4901aa09cd3ecabf1278545e3a3e32a71f8a579ec3cc236197ef5fa73c31fb6d44a8d79897d61570d3d5c53647e4fcb25450c9bc96d7381f5ca66d78aae294f4baa7966a4b7460b1e9a2cf0c92aeb486091d1e03c3f78654d29ca28e98cde5e06abcb01407e4d4830099ead9f1739b43f0438b2561dcc05aef11df7714365df847739e048bd144807dd98bf6028546e3c47a79d5755241e54ca573d0c1a7d97bf7b581e9727743478f484b284aad82d15990319ccd3a66e33e5eed80bc42602ed2ec16c4ac972260baffd62f3070c0a7fc3faa487a93f52debd00ba307175a4945fe7b7f1a64409cb5168cf5307d70ee985c4cdd0a3028449953454978ef701db51dd12e017011b654ac1bd99cf0940370817841a3f751693a90c838ba8cc1778fb134430fd5b46b1e22a300eb8741cc06abb5f19e8a03b4799cd4346a3af66328095a0ec5d4940248173d6051a434052fd469172666e9af0dd83b07adf4dda010cfbec4a705c045c7472cdd11512ef71306f8c30dd2b991aa92e1c1b50dcc9931c0e0bc83dc45578953b660a6cb8734b3d87c6ed7efc83fe99218ea5d842cea2df127fa550411e4c9b1da0ef60d0f8a879824dfd5b8ec7ca8ec99c33c26b1163c305f2ccbdaceb01ff1959ee345d2690617c55e5361ad83ff28d0feb638566463c1db40984f23434a38fa88edebc6418c39395e50ecfa88e6190e180ea79fe958cc30fdd9fd9cd09b9fdb30f1ddf7b93200dbe59a8b6ce3ab5a73e08010f3a44eff0df2151549b3c6972ec298785dc085f767e4da25f30700cee4b9333fa8f0acf27f2afb1b4b205be284cae7ca3e79288242d8851c58fb3c7901fd1e008fadc9711c647c91c563c0674a3b972c97a3675aa9063edcf6919e1a2d875c735edb4b808892f132bf53b6908428dbaf5d8c9c3d3fc24c0ceaced1c7643a062380403fae84d7ae25e1891f9c03fb88887ee3becd9a646b6a503a880a25373eaa1e8654fbccd8e1247569949af33c7d1f952288f213c269a705d48e58fcd922dfda7e4ae879c9fb4f8efd7ef6e3c6cd4842d751b4687f59603e8154f5c21881f6064949b146d9ca8c1b961223f57ae816547972476028239f80d911de49c15c41ad1072ddcff6d265583ff6344a7a32cd5f8332f97e4a91fe63108a16870752a88b4f7b9d357878552c92117eeadb0ac029b473536d9f2475f5858585684c66fa3f55809fd59214ac36c46db1302125638cdef93a2dc62a99c25f3d9f1faf2ac53d45656282ea61ed216ae80d3376594244f9854ae346b65bd30121af92dcfc54029473cdae2864d113b69a35bc658c4216d60da748ffeed9ea2021e60bf2ebfe65268db4ff6151811a8b744d17a68c1c51ae3d824ed80076e58c1c111e70a0ce6b40750833348f7afb23a7c111cba230303ef2f22b9e5317b291c06dea354fb22c440b9da28203dec4664669ba5ebb1c41bb9106d8559396059652d5ed67d5148f7988dbfd18739d68645292a3ec0ebc16c8b6e887ff3542917ef96bf26ac92c6659a6d9d016b58a475bd7b2abdcb3f81c23d2faa24a3e19074428d81acfe9dc08dff223c48f9dfc2229fde7a6a36671a813bd7f2fbe6a3d64afc0f8a924de20afc139c6fa51f1aaa2d6a6ebd3a4f5ec471a85113882e2b05a2a43f56a909136894e6049b07ad3ade2502b0d728951680eada93a522994c2c41711788d7e58aa5bfc6721afd2b06c0010c604eb62472306e313bb1aaf0301b54502d6b31bb9823d446423b7c98adac67278a732b14fbce9efc75483d93092b8406c4616715dd65e9330b861c6e55fe5dedf3701513252d8040e78b3807c00b11272ff9f4a297730f960f13ea3cd8919029b07e4cc771e754ea67db534dfa7eac53ac3df064e5d3a54e61d03b06705ef51c236bed8ae7fd29442bf12a9c14fae157c27b53d7318ed99da32be3eb15cebd18381fddf9440fe6b66f235aba117344d55f78a7bbd16660dd48fe0de68eac4c6d858fe6de542dd8baafa45febd4e3e9a17f093c4878297ea3e02c59098a3d444ca9ec76700e2183b97ea077e8d9d604e922b5b57d240c1587fd5b90edbb1eb45c8ec8e8d5547907c95c2736f983ea84206f97a8251c3f51421d1dfcc483f91fe983aeea325383d3e4b356e962af61c781d48cf9f9c6a6ff6be8a9c3bf23ea2f4e0151109a685b7ad2361e43b744808413dbf7d6caa0c3671d60754d2a1a7f9efd1d4472e7874d61ae4c4d3bffb7c709c0beda5395e8cb796618d95710ed9d98b035fef6e11fe9b90620820d01309e43e76fea94b370d9b88825a7aa6aa94d881305894d73c7bd542a70365a7547b26e7dd96c60c4f0df3766a9378f9b21dc8f6849d1bd30f2dee0a126974076382eb2e9bbd111d107751a6b0b0c5b2e0075fa502b19856ba086cc04cb04cc0b2052f14df55509a449a86b10f4a586467016d926224b7a4929f84ae7544c69b7b74b2f08ba6e101b42d27f004ecacb81a6b8fa8513b3440009b6eb7c96f0c12bff338fa2b42b8448b2bd8dc75a174133e0fdfda23e9a78a54dd964cb178fc0954920dd765c190212d4d849fc020ce2b6657ff575fcf6964265d2312900055f5825a69c492c153ca522201a3c686988bd42166b3614768855f4480e31b89786bfde75a194264943f7adb9452579ea6609591adb6864fa5f53a70fca1bd9421220c3acafc017b2eb4b170da73273448ccd75a168f0465da09b85ce69ee8b56f0692c1be1e449ea2e8d557753a32e79a689391b2a2f505cb8e62afe02422d6e519c3bd2c5caca531b154f5da034502c1cb677fbb033761757dff2c3b8c67e1c31ac1f81a4c5e86919cd18396ea441758adccd15615dd889198e2b6bcc3d8b8ea6caf00755aecb78a855e6a5d0dc2bd7f6652f778c3386470c4fbf4f2f417c6407c1ffa9f11f6ffb7c68a3ad1ea6c8ba977a73599d298a370e0bccd2e479c33146e7c66619ab9dd4bf1a851b1063b70bb5c0b3c9ee6195f87af8b866739fce25cd9bea8b432f737239dec6e4ef7b21fa6987bfccf64adafbf41fef8b63072a6c70879d8af263e5e5422238a59a16ac8470de5cce80f2a3d33348fbaa3858908c9b37138caa99d82e9eeb6e86cebab022ef582601e3bb7b39793bc3459e16ba545ec3eaed9cd401353d7f89fe4a2a2ad0eef94b87d3e19fc2ee183963e507d7fb05dba389bd7de02be33880b0ca742b15a543bdca31ff21837e4e18c278b2427b1f304f2c3d1cd3af8970b48ebceb2d4570c683d4bff73d96b2fd01cea96618bdcf059871d1709e940d34a7dabb4cc74cc60d5e95c7efcdb794dcf88205fc9c65be84d0cb1a7b22ee6ace0fbc5c73b56e557ba201080b90184285d823324ddfb00f7a6b8f873e329c589d95d86f1ac22bd167ae0fd2043255650eac2a28652e9cd16842a2fef47ec19fbe693c483c21f8fa549af221aa996870afb6608b0909011971609aa076691fbb3e7f80a0353d1112b1fe2daf9e803cd37750482383c3fc01002aac8e35e6503de167e8723ad87f8101d14b12e1667ce32ba5752ca06957f8b060b978375ee6f1abe52505c2d40248a7de13d1dc19d83a07c6a0bddb84729dbd461310ddd9e4c1900a09591803abf787b9c606ebf9138fb4df305eccc559abc285c9fd257abe82f344a40a0dc759109a6ae8521ae2b028dc66ae35a4790f3bb27e2541265bbfefa48e187dbd8eca9e1412e8d4551244db6a763f244458cf1c641ca294ccacaea3f50142cebf4ab5782850503af9362157c01c5d224f4b42fc342323adfe0a1321a4d5f25d941b3b40ab8aadef13346431cb74d71ecd0225d1dd5b9d064fe6f83caf859d18bcbcde69508d1cd33f70401b0840ddcac02dfeebad3a07ed57b5b8e5e4c5c3559f42f1465948710146d91e165c0671d96247a58481fad539e2526df8d6ad149ee702d6d85ebfe010828181a3bc8e92df8050cbd503b593bcb2ade02f533579172df9929d2a1fb03a1e998ed22e3aa6711a2a090c84b6ae89dc41e4761df4bf1c7ee86476b5b81243ed53b9262a860114b76a54e11da73edc5f283e6373cefc61ea1480d5a5d6bff7aa20eb4db4ae17615e214524811f0ca31ac096c085e930af58fa616812bbf58a8283c087e2de628025edbbd21e5fbcb97b1d9867331c53b948c5b24f94b4e3531b57eccd45f6053fe701e66b3190932102d9664d517e3ed912560600956f5f6c196d8d7d438156f3f7f09633876c616e045574c26aeb5d7188900b6ce0ad1573b438022d1fd22545d68b8d45e1920d78679610ff55476ecbc555738d13120551346d48073334933854a9e7a5e82397fb01eb8679203462ca753c379b0af39e0848be5acc7d25a6883b7f21d98c4a27d700de91de238442db71e7ae037630c8350b2a3a10bf6d3c30cab1d4417330cd4c0a7f75b75a0a5dda52f6d2d8bf8d25577754d126b246b6a449655245336ff83ed83d0ac29d05a9c8fc5d831c0b20e55250aba6ad10f56c1b76a78710dad44d2a0a0ba40197e656fb236da3a204f19be1293483ffcc2665d76c9c4da284afa66ed70741acbeabe01c8f0a33b4ec4b4131d3837ae3736db6e818436449b5a75063ca4d24d2923f31b1c13a9dfb71e1ffcfb2741bbba841fe701f074591de2038ce68b3203e730dd9e99ebc7013fa8f19e69eb6da130f9dd2be9aedfbc1af0f1832b4f9e311d1990a791369903f529ba7498d36e47944caf445e29e0f29150652bf8b49ea1518f1aec71e121dccdd0af0399b1e17daccf4283b929b92f37847657dfa3a3063fa04e461c8447c192d4c99a760b3391a6a292632fe8bde1b7d4b0cf47744b7a0746602fe8bb55728da751debe41d2b6ce19c2ce407c427425db5950cdf52958ea302ae6d7100e1c032a7c39cfbf51b8c4880090c3f6eb9bd121dcf1dfda4fca9ac466444d842dfd5d69c3eccd2977702ed3ff3b7afeaf49c093e1a96fe414b9086cc9953338f5a45fcb61004cf7756c9d5e2f7fa3640becf933ed38f6b02826c216e7f32c6508340e000bfc250e46784c88cb1137720d01d9872eb134a26e6407b0f2777c02634b752b3b2f9783063358124948813b64c9973ce1464feb7ab9b88ad2b53710e4b017a5db74f7f41c1ce567881ce5a0d78f82909325eeb64f9dc2844aa4272ab020a98f2d3baa87c43784e330e936ade243e46053fedd00d5a8a8556dff9e0d6067e4a104b91f4d106748907fa4b7929472133804f6667b56f7e10f9a89083f46747c8e632f995a4ff396f29bf7546400b1878106d5a9cdc98f5daccf8fc1059822d70ec9fab7132853803892cbe64628abef990870cde143deeee5492a44ee9b0308d45eb0571697e10a42111ce08df1c17df0c52cb3f1f598267c13c3992b3fcb736b78a45167e3bee9d8916ad8f4f133d6f65dfdcfe595ef4ca5d16afbed6d6b2b10046e65e51365829be04e06e46ae558f13a64f227653d92e8f3568b26f2fd7304a5176b72272cd8255c22e8b0b3c1de9466ce02ace672fa873611a0fad668aae3297c9b17cb0b7c24975b7da9ff4397108447f078c5c1a52f4943ffbb7bd9ad661117cf20d122d991e104669fd35ba08eee54be243db2de23a9495fa03feec76f6cfce8cc404159fc821392be789b80b5abec89e232a6a81ca73a92f46a1732aedb259956b996941fb17f23f189dab397ea51930ff8ffe20401ccb1b6f559b0724d621ab8d8c7ca5b67720872df7cb65b57d2cb97aac188f71dec6f178b0e8ff310c4b6e8c2a47dc8c74629ed6631d0f6e634994f73078f2268ef0f8b0e3b4250a9e75133512aace00796f5b0bb7237b304f71a584a6db6af650d11ab8b05bab4e4d931e36fdc2d9ad31e9e16e548693b3acc7308726b261be78a1509f33bf169632abaccadd606c62f24dbc4f6d709ef0f94af7f84977ab51e671c1996246206c55f25e5e0e1cbf6f0281b18e5d960f3e4834f1ad49b40ea90dc34ca8bd856ef06db22121ac4ae9782411a3567766dafe3c8c6da1fa3e8ce151b51b599f8e0af92a5c14f06e20d68a4387f3f014d8dfb4ce087e973bce6680f2e73750431bf841087bd0e1a05b0d97a86fb0980351e6016192adfd9784761a8c494b34368c88e4bf2d150e43d9733395b824ebb1c8e0a56a43a934fe76b92e76b04bf599e3d36596f33d715ca617691fa34f7336315f01d1d6a5ddb47d03bb30e1f0db366439eb4ab3b5d4b266f8a654ee3306045a4fae747e9c3ec635c9bd313edbde7e98831b1dfc23452f9b16bf3ec03ff14c99eb4180d2fd7063df5a371d5961d7646b2da3e1374635eca17cc09e1d34ef7986aa41e237572ca54aa9e1708c921cf6c2cd6c1f3b1a9b023f7ce6c2d69e1589ea23814e7436d4cb3c78ad13744e6dde6e73a353607d28dd87f56ebcc52908551520a10688d6e609b81642b4c69a43e30f91e7dd4b800c8fc10160fc15ab4cb944fde02d55042d53014fffac26d13ce7e51cc4356eb55bcc7330ea9a0c19c622d6548adc25d9b150ce850eed527295ba95917c7b49ada5b59a759eeef2d18eed00015ec2653a0f7059ac30167b62858d71d284f93658717fd72f4087252a0adebe3945d66124e17f70de109636f8554ea3e4c17539cc2e76fec32a757fbbedc2150e0ad443bb8be46f8bd64bf22fb6bdb47e89532a8a74ac3756e0b7d67f460c86f56d1d6f4f6bec98dfcbd8d1192f9830cdd3b1c1a28f65941a48322e429279f9709e4dc0b8abea1dfc5917e2c21a65b7d690c2d6ee830f403141a24dd3f4baf800ea45b694477c29013d913005d5164ea23f54cbda0e5d614385b53219b189fd820fb7202e9c184c777ff6c7575ac01a45393865d4b111060a8773b5f2ae596b34800967fd664ac61e487d9e37f7ee99ce3d7e65ecb4ca3b6a0ac6b122298dfecea1b85192d14d2820914487c0210e3da208c65c26dc735d8ca0ad13fa90fe1241160a1accacc91e9a03cc0d647fb09840b14f2dd2d83ce01e9c19b32b8e168ccc8337cdb95131933ae93da727603bf6733d8a4c228285848626049b7bbfaf6dff2fe8a58c18baeb568e8a05dedf974b49788637ba18f1ba3a24c63b56faf4d84d93d8dcd676cd878989e043f2cff38e3a31cfc1aa25e0aee30390004c6978172ecd1b51c2b01ef26d47efcede15915b9fe484aad6e7371ac20c92ea10f26cf565293e347c092e2d41218bf4879c2c4e76ceb9a1fac60bbc1287817d8d9e5bc75d85eab910760fc7fe3a8d60053315f39ce5e7dbc0e49b4b152f1e80f507d713e54e013452010fe9eadfe9e9c445a3c15057d6262146857a1d1d88503f068b614dbe5230abe04f3bc22f0a2e260cca4e1e6fa4abdd110d1727f778d43cba4f4b1ea27cd96a497964875768ab5e1499125341ec13187e5ae5d9bab0cbb32fb9e0e0266f0c38ec6d7a3061cc88e034e31b25b559d76d2849aa729685937fcc9c3eee5cfa641bbc2bfbe61c609ff38906e6fa5fc8e66ea11e19c0add4e247fd8ce609cee6ba119b432f5094202791475fa644904a5e0d193c4d5081ac17b831513abcedf0a32a2db685dc63ca8540be3509e0799336cdc215c004076df17e20db31e9c8075c5fb587620e59354d9d86f6a69aafdf0db7bd4a78709607c2427e009e0fde4e322d5e1f620beec46e7bd7eb5ad464bab808f3e9fddb2c6d298abd30eac73b8bff68580f1a8bf3529462ba7f63358c8fc5502172ba9b8a18110a52c46a0a2da942ef66060592121cd35424bd3479a832cc77e30cfbd6cc51745e48230592a9d7761028f53ee7d8d37932a5464f18cd65b18309764fe55ad7ca01fc01821c04163bebabc37450ddc73b14cdd698b92a484fde2f7f80bf7571febb28775a85de85739c1f9f702f45e52e697a17dba1af4b0626fdc8f1b7b097daccd7488ccae7c71deb0d6120e1ab11f1e0330d973c0837574cde45b3eff6bef58f426ad4c8988ea4aab95e60a6fc62ab227ff6173fe032ef6c16754158ff28d8a36a664625af3562c22dc10d9d3900cdd18c67f798e159b8dbf095ecd381580430fc2643a81162ce708b3e4b07233653bb7bd251a5ffb8f0d7e6e962517e2a7a0dc15d24cb60b9a59e4477d94e71a6e181a2fcfc7e765a9fa601384f24fa8a79e697fe07966326527d5d307eefdd6dd2b68f8414714dc21b3fec0c1d42c4851175fabdf1e0cc47ca8142113eeb7b8f33187303c15491f56ce10db746570ffc8837c08efb110d4d60c9458d623904b281c0c4d2ac89daf0b4e1d17149d6508de08143fed149761c419ab6de4527f1adba14d5c6f5e28c1ede1cd52a62740001970e4f52278de661d46c1c77f93b47dd4e5b4a31c3f68189fae84c75ff70a186b28a1c2b1e98847fb2c7cef226200cd126cd555a55f0d72deba010f8ff39bdb73a0be51497003acb194dbedee1f4d771f16058ac7e971480987dea175f2c5ffb40b76add746a93ce543601d26ff458d3df2f17b142d886ceddde0d9ad6db22e047afded89b6d786b640b3e8d12783e1866e68af93c46777373e9d85aa5356228a57a4ee46a8f3ae1e29933b9b194588e84b85e67629ee8cfb918a5b5501b85265d8846fb4f74460cf886eeaec4a8a59c4d86e6a2d3163ad95063c38d718fad332d30839063e73250c7544521fa5cc903ce4f68486d42e21852924432a70cd0eaa7f73d2f57a94312dd580e9d4dcb8c5f16e0e1492e03e10442c154fc3adbc074435107a95ad8d9648b3c534912f3d64f86472bb390a99c0722a8a96d70da28e3ff29fbdf5ef7a2caa23abccd9b74fb9dcfc6c9ffcdc93a2c6de0e9ca1a401c92fc7d7ee32e8322815f3182b3ab5afd442541d8e9b500112910016a5be55f348f5b4a284a87eedb3cbd2cd5bef1298a439c969695e028c38358536ee426c14d258173ec94e0ba7d87ead9b95eb4c6ce63b0f5851391d0560df9b9a2ff0ef489a177981a615d8e5d30679c480c2a0b8a9f1f727e62b5fef1497cdd8667d417c99960fb78d580ed7c7dc2147eb670b7ccef2915a6a976e5aa0fe073c3246e49b4df5c623f81f43ba982dbcad25d2ae2e5b2a42d6ad532e3a6aabffd6be32712f710fea3692bcb4e0b76d6dfabe85677c20cded5d5c9d50100d0ddb7f4ec99bf67f13912162f9d9eaf077cbcb3522a7dfe8a3b36c15eda475a4565b0a56ef1df47a00e7504bf8ef46687420e8c61674faa11af8b38d8c499e7160cefd1b671b541dd9b9c819fd0160fcf8a86109739ad75c517b962d35f2d7e070bf02fb0e276c55d46739ac7924cdaaf7a6c4fd101a220451c22bce2d48df1b1823cf43eaab527c94eed0d894a3af998931f7590faf4434f3ed36e69e059d14e096b31fcf54510e2f2c3e20de4dec1c12959a13bf461601db33b23e5f937fb2e391b7dafb75184286192be27a37a6cd02ef626d1536aea073da3258b78fb2cdcc4b64b7f1193001786e6eb30a4aafe9121097241245105f5456026d6ac566a52ab936048e113b0268702e26e1048bbf71b643b592c49ea90eb788fb5cb354176c3d2a9f40caea0189ab07723735b1a0f2967a98827fec2cffd0954d876d4846f1c7d3261165cbf04b4aef2c7369661fd3e396d94545478ae97e0be6c6aea6bd9f971dd4070ac8143618e0bf90ff36d19019f999b98ef2461f944eff9350cea2944cb86bd30419ec9fd5a43fc86f7b33914954371b604c07ae4fa1468c2343d4dbdec1691cd27939487569dfae50eda99ddf3c769583c19311ae360feaec32512cad9e2df151dc5ab58746487c8eacb3dee5c827cabadf3e79403bbe66e8c9fd2b6259296013db972915bf9d9534c868db6ad8ce50248dea956171685889d337c430e33381b795dd87514a2317d876c33731e0d2445e4cf919c2d42ee255708f0470e3488e96f9ba6586578c090b62ba78f979d8033ced5318c1386c87934c5dae32a81af4469c73233e097d99a08904b0969127ed8e1e55160c9efe71f6f53436ec6237b61dd5cdd6af369bd731e1f87d849d891e39e3867c0308143aa4800d7157c2649a5d97c19b14b749897db93e77841800c9fa8027cf4652e09be7460db3ca54fec64af35022e943d7a8b8d960c49b1aea7ef10416d8928e1bd0532cb5b8f68202127f2255ca7ba026437ee9102059291de38e69b5f186280ae4249b3114e6581ac1f34c61099a7242e5d61734d7ad9bb2f47a130ec612d870b1e5c5939393950eb082181dcd87b0df453e1a4e821aef94a480892c1865c86abb34d29ae1e4e85a6ca91a6158cc7f1b0bc869a13fc5473e2f6925c355525766fd0d2983604287d345d5bb310b51c844a119aec9673c885d85afe00f3a2cfdde520ecf07e1bb6a3949eab41de19ad141608e39cabc105e57c17032619b370d0044f23a5e97257211d68399d9f2e865f93c6cbb5cb8377bbe3447659c5054613fa7f872e6aaae4ad73a564dea09abe24c127da1406a539e2ba0841116993e7e658b7d5c53701325a50f33a605b1b905c758816701987e73ddb0b90301df9c857de1b194962fdec068ee16c915757547a355bdd725208f2f0a3b728b733b733f39e128c7705eae905d8605fa36ba5f179373ff457c43bdf69fec1c43d6848a87abf8b1ff65647c5b4d732468f1d8ff37bd77c4709144023e1c8626345bbfee247dd85faf9c5a91cac57b0e3a09ff37cc5be73f9622cbf0bdcbff16a891e3ef22b82fa08224783422b12ef81c0b766a5b55bb1b3fc28140290d06351e1ac011e0ba97e3579ecf0689ccd8c7da9f89cd26a5cc67e4f14bb376b1d841d095bda0c8bb9ac237ad37e2ece1bbb7fd388c6aa474476f64788092789093e5c6322573f75b5c4923482ab17d9fdc6afc0e4522a88e58e15b99090b79ce7d681b776460b3733f6c5193d577434fa3e542b63dc7bd1b7bf6b2f4499877252beda1c935ca509a5dfc8d431ada84f50d3dc76929374102ba38fb5c93effe4f945a930d5b368ae2cd8ea8df2adb18e01f90e8c268455eeaa7df3ac20ce59c182590239281474a8134f3054b8d0266926ae6c77b0767c679baf79487af8788ead51706fcd6688f2a833e22ed2f385ca88fe4f15ffd4d8a2226d1119755b64a3bd753cbf79c4b082ca9d353d4aa5b67c84f6358a3e0cd79e2bb56c9f2907c7edfe5b580fab8a4ed7db64d297d911ef34f7985c3a869221822c840e10d0c276e6c86551f0001ba095148ee93011c2c004aae8f39f8b6087636058b15496ed96a1d22d0d2494f0464df4214304839332fb79ca95dad164dc14787efdfd962a39933e1a15164d9eca78568251a9fb19359e0c9e2ddd1090f45d62241bc567b38ee17fea230157008a5fbad8385accd91d1af617a5f2c47a38238f5739e41131ce2bfd7e4b64d6a92b330c025ec78edff018e4721f6a03cd0221033b8b0246bbb17876ea0772</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>吴恩达机器学习笔记</title>
    <url>/2020/07/07/%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="一-引言（Introduction"><a href="#一-引言（Introduction" class="headerlink" title="一.引言（Introduction)"></a>一.引言（Introduction)</h2><h3 id="1-1什么是机器学习"><a href="#1-1什么是机器学习" class="headerlink" title="1.1什么是机器学习"></a>1.1什么是机器学习</h3><p>第一个机器学习定义来源于<strong>Arthur Samuel</strong>,他定义为： 在特定的编程情况下，给予计算机学习能力。<br>另一个年代近一点的定义，由   <strong>Tom Mitchell</strong> 提出，来自卡内基梅隆大学，Tom 定义的机器学习是，一个好的学习问题定义如下，他说，一个程序被认为能从经验 E 中学习，解决任务 T，达到性能度量值P，当且仅当，有了经验 E 后，经过 P 评判，程序在处理 T 时的性能有所提升。我认为经验E 就是程序上万次的自我练习的经验而任务 T 就是下棋。性能度量值 P 呢，就是它在与一些新的对手比赛时，赢得比赛的概率。<strong>简单来说就是从E中学习，解决任务T，达到性能度量值P。并且在经过P评判，和不断学习的过程中，程序在处理T时的性能有所提升.</strong></p>
<a id="more"></a>
<h3 id="1-2监督学习"><a href="#1-2监督学习" class="headerlink" title="1.2监督学习"></a>1.2监督学习</h3><p>我们用一个例子介绍什么是监督学习把正式的定义放在后面介绍。假如说你想预测房价。</p>
<p>前阵子，一个学生从波特兰俄勒冈州的研究所收集了一些房价的数据。你把这些数据画出来，看起来是这个样子：横轴表示房子的面积，单位是平方英尺，纵轴表示房价，单位是千美元。那基于这组数据，假如你有一个朋友，他有一套750平方英尺房子，现在他希望把房子卖掉，他想知道这房子能卖多少钱。</p>
<p>那么关于这个问题，机器学习算法将会怎么帮助你呢？</p>
<p><img src="/images/image-20210216224108606.png" alt="image-20210216224108606"></p>
<p>我们应用学习算法，可以在这组数据中画一条直线，或者换句话说，拟合一条直线，根据这条线我们可以推测出，这套房子可能卖$$150,000$，当然这不是唯一的算法。可能还有更好的，比如我们不用直线拟合这些数据，用二次方程去拟合可能效果会更好。根据二次方程的曲线，我们可以从这个点推测出，这套房子能卖接近$$200,000$。稍后我们将讨论如何选择学习算法，如何决定用直线还是二次方程来拟合。两个方案中有一个能让你朋友的房子出售得更合理。这些都是学习算法里面很好的例子。以上就是监督学习的例子。</p>
<p>可以看出，<strong>监督学习指的就是我们给学习算法一个数据集。这个数据集由“正确答案”组成。</strong>在房价的例子中，我们给了一系列房子的数据，我们给定数据集中每个样本的正确价格，即它们实际的售价然后运用学习算法，算出更多的正确答案。比如你朋友那个新房子的价格。用术语来讲，这叫做回归问题。我们试着推测出一个连续值的结果，即房子的价格。</p>
<p>一般房子的价格会记到美分，所以房价实际上是一系列离散的值，但是我们通常又把房价看成实数，看成是标量，所以又把它看成一个连续的数值。</p>
<p>回归这个词的意思是，我们在试着推测出这一系列连续值属性。</p>
<p>我再举另外一个监督学习的例子。我和一些朋友之前研究过这个。假设说你想通过查看病历来推测乳腺癌良性与否，假如有人检测出乳腺肿瘤，恶性肿瘤有害并且十分危险，而良性的肿瘤危害就没那么大，所以人们显然会很在意这个问题。</p>
<p><img src="/images/image-20210216225057126.png" alt="image-20210216225057126"></p>
<p>让我们来看一组数据：这个数据集中，横轴表示肿瘤的大小，纵轴上，我标出1和0表示是或者不是恶性肿瘤。我们之前见过的肿瘤，如果是恶性则记为1，不是恶性，或者说良性记为0。</p>
<p>我有5个良性肿瘤样本，在1的位置有5个恶性肿瘤样本。现在我们有一个朋友很不幸检查出乳腺肿瘤。假设说她的肿瘤大概这么大，那么机器学习的问题就在于，你能否估算出肿瘤是恶性的或是良性的概率。用术语来讲，这是一个分类问题。</p>
<p>分类指的是，我们试着推测出离散的输出值：0或1良性或恶性，而事实上在分类问题中，输出可能不止两个值。比如说可能有三种乳腺癌，所以你希望预测离散输出0、1、2、3。0 代表良性，1 表示第1类乳腺癌，2表示第2类癌症，3表示第3类，但这也是分类问题。</p>
<p>因为这几个离散的输出分别对应良性，第一类第二类或者第三类癌症，在分类问题中我们可以用另一种方式绘制这些数据点。</p>
<p>现在我用不同的符号来表示这些数据。既然我们把肿瘤的尺寸看做区分恶性或良性的特征，那么我可以这么画，我用不同的符号来表示良性和恶性肿瘤。或者说是负样本和正样本现在我们不全部画<strong>X</strong>，良性的肿瘤改成用 <strong>O</strong> 表示，恶性的继续用 <strong>X</strong> 表示。来预测肿瘤的恶性与否。</p>
<p>在其它一些机器学习问题中，可能会遇到不止一种特征。举个例子，我们不仅知道肿瘤的尺寸，还知道对应患者的年龄。在其他机器学习问题中，我们通常有更多的特征，我朋友研究这个问题时，通常采用这些特征，比如肿块密度，肿瘤细胞尺寸的一致性和形状的一致性等等，还有一些其他的特征。这就是我们即将学到最有趣的学习算法之一。</p>
<p>那种算法不仅能处理2种3种或5种特征，即使有无限多种特征都可以处理。</p>
<p><img src="/images/image-20210216225452470.png" alt="image-20210216225452470"></p>
<p>上图中，我列举了总共5种不同的特征，坐标轴上的两种和右边的3种，但是在一些学习问题中，你希望不只用3种或5种特征。相反，你想用无限多种特征，好让你的算法可以利用大量的特征，或者说线索来做推测。那你怎么处理无限多个特征，甚至怎么存储这些特征都存在问题，你电脑的内存肯定不够用。<strong>我们以后会讲一个算法，叫支持向量机，里面有一个巧妙的数学技巧，能让计算机处理无限多个特征。</strong>想象一下，我没有写下这两种和右边的三种特征，而是在一个无限长的列表里面，一直写一直写不停的写，写下无限多个特征，事实上，我们能用算法来处理它们。</p>
<p><strong>现在来回顾一下，这节课我们介绍了监督学习。其基本思想是，我们数据集中的每个样本都有相应的“正确答案”。再根据这些样本作出预测，就像房子和肿瘤的例子中做的那样。我们还介绍了回归问题，即通过回归来推出一个连续的输出，之后我们介绍了分类问题，其目标是推出一组离散的结果。</strong></p>
<h3 id="1-3无监督学习"><a href="#1-3无监督学习" class="headerlink" title="1.3无监督学习"></a>1.3无监督学习</h3><p>本次视频中，我们将介绍第二种主要的机器学习问题。叫做无监督学习。</p>
<p><img src="/images/image-20210216225824075.png" alt="image-20210216225824075"></p>
<p>上个视频中，已经介绍了监督学习。回想当时的数据集，如图表所示，这个数据集中每条数据都已经标明是阴性或阳性，即是良性或恶性肿瘤。所以，对于监督学习里的每条数据，我们已经清楚地知道，训练集对应的正确答案，是良性或恶性了。</p>
<p>在无监督学习中，我们已知的数据。看上去有点不一样，不同于监督学习的数据的样子，<strong>即无监督学习中没有任何的标签或者是有相同的标签或者就是没标签。</strong>所以我们已知数据集，却不知如何处理，也未告知每个数据点是什么。别的都不知道，就是一个数据集。你能从数据中找到某种结构吗？针对数据集，无监督学习就能判断出数据有两个不同的聚集簇。这是一个，那是另一个，二者不同。是的，<strong>无监督学习算法可能会把这些数据分成两个不同的簇。所以叫做聚类算法。</strong>事实证明，它能被用在很多地方。</p>
<h2 id="二-单变量线性回归-Linear-Regression-with-One-Variable"><a href="#二-单变量线性回归-Linear-Regression-with-One-Variable" class="headerlink" title="二.单变量线性回归(Linear Regression with One Variable)"></a>二.单变量线性回归(Linear Regression with One Variable)</h2><h3 id="2-1模型表示"><a href="#2-1模型表示" class="headerlink" title="2.1模型表示"></a>2.1模型表示</h3><p>我们的第一个学习算法是线性回归算法。在这段视频中，你会看到这个算法的概况，更重要的是你将会了解监督学习过程完整的流程。</p>
<p>让我们通过一个例子来开始：这个例子是预测住房价格的，我们要使用一个数据集，数据集包含俄勒冈州波特兰市的住房价格。在这里，我要根据不同房屋尺寸所售出的价格，画出我的数据集。比方说，如果你朋友的房子是1250平方尺大小，你要告诉他们这房子能卖多少钱。那么，你可以做的一件事就是构建一个模型，也许是条直线，从这个数据模型上来看，也许你可以告诉你的朋友，他能以大约220000(美元)左右的价格卖掉这个房子。这就是监督学习算法的一个例子。</p>
<p><img src="/images/image-20210216232328225.png" alt="image-20210216232328225"></p>
<p>它被称作监督学习是因为对于每个数据来说，我们给出了“正确的答案”，即告诉我们：根据我们的数据来说，房子实际的价格是多少，而且，更具体来说，这是一个回归问题。回归一词指的是，我们根据之前的数据预测出一个准确的输出值，对于这个例子就是价格，同时，还有另一种最常见的监督学习方式，叫做分类问题，当我们想要预测离散的输出值，例如，我们正在寻找癌症肿瘤，并想要确定肿瘤是良性的还是恶性的，这就是0/1离散输出的问题。更进一步来说，在监督学习中我们有一个数据集，这个数据集被称训练集。</p>
<p><strong>我将在整个课程中用小写的$m$来表示训练样本的数目。</strong></p>
<p>以之前的房屋交易问题为例，假使我们回归问题的训练集（<strong>Training Set</strong>）如下表所示：</p>
<p><img src="/images/image-20210216232438960.png" alt="image-20210216232438960"></p>
<p>我们将要用来描述这个回归问题的标记如下:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$m$ 代表训练集中实例的数量</span><br><span class="line"></span><br><span class="line">$x$  代表特征/输入变量</span><br><span class="line"></span><br><span class="line">$y$ 代表目标变量/输出变量</span><br><span class="line"></span><br><span class="line">$\left( x,y \right)$ 代表训练集中的实例</span><br><span class="line"></span><br><span class="line">$(&#123;&#123;x&#125;^&#123;(i)&#125;&#125;,&#123;&#123;y&#125;^&#123;(i)&#125;&#125;)$ 代表第$i$ 个观察实例</span><br><span class="line"></span><br><span class="line">$h$  代表学习算法的解决方案或函数也称为假设（<span class="strong">**hypothesis**</span>）</span><br></pre></td></tr></table></figure>
<p><img src="/images/image-20210216232605293.png" alt="image-20210216232605293"></p>
<p>这就是一个监督学习算法的工作方式，我们可以看到这里有我们的训练集里房屋价格<br>我们把它喂给我们的学习算法，学习算法的工作了，然后输出一个函数，通常表示为小写 $h$  表示。$h$  代表<strong>hypothesis</strong>(<strong>假设</strong>)，$h$表示一个函数，输入是房屋尺寸大小，就像你朋友想出售的房屋，因此 $h$ 根据输入的 $x$值来得出 $y$ 值，$y$ 值对应房子的价格 因此，$h$ 是一个从$x$ 到 $y$ 的函数映射。</p>
<p>我将选择最初的使用规则$h$代表<strong>hypothesis</strong>，因而，要解决房价预测问题，我们实际上是要将训练集“喂”给我们的学习算法，进而学习得到一个假设$h$，然后将我们要预测的房屋的尺寸作为输入变量输入给$h$，预测出该房屋的交易价格作为输出变量输出为结果。那么，对于我们的房价预测问题，我们该如何表达 $h$？</p>
<p>一种可能的表达方式为：$h_\theta \left( x \right)=\theta_{0} + \theta_{1}x$，因为只含有一个特征/输入变量，因此这样的问题叫作单变量线性回归问题。</p>
<h3 id="2-2代价函数"><a href="#2-2代价函数" class="headerlink" title="2.2代价函数"></a>2.2代价函数</h3><p>在这段视频中我们将定义代价函数的概念，这有助于我们弄清楚如何把最有可能的直线与我们的数据相拟合。如图：</p>
<p><img src="/images/image-20210216234140487.png" alt="image-20210216234140487"></p>
<p>在线性回归中我们有一个像这样的训练集，$m$代表了训练样本的数量，比如 $m = 47$。而我们的假设函数，也就是用来进行预测的函数，是这样的线性函数形式：$h_\theta \left( x \right)=\theta_{0}+\theta_{1}x$。</p>
<p>接下来我们会引入一些术语我们现在要做的便是为我们的模型选择合适的<strong>参数</strong>（<strong>parameters</strong>）$\theta_{0}$ 和 $\theta_{1}$，在房价问题这个例子中便是直线的斜率和在$y$ 轴上的截距。</p>
<p>我们选择的参数决定了我们得到的直线相对于我们的训练集的准确程度，模型所预测的值与训练集中实际值之间的差距（下图中蓝线所指）就是<strong>建模误差</strong>（<strong>modeling error</strong>）。</p>
<p><img src="/images/image-20210216234256392.png" alt="image-20210216234256392"></p>
<p>我们的目标便是选择出可以使得建模误差的平方和能够最小的模型参数。 即使得代价函数 $J \left( \theta_0, \theta_1 \right) = \frac{1}{2m}\sum\limits_{i=1}^m \left( h_{\theta}(x^{(i)})-y^{(i)} \right)^{2}$最小。</p>
<p>我们绘制一个等高线图，三个坐标分别为$\theta_{0}$和$\theta_{1}$ 和$J(\theta_{0}, \theta_{1})$：</p>
<p><img src="/images/image-20210216234547570.png" alt="image-20210216234547570"></p>
<p><strong>通过不断调节theta_{0}, theta_{1}的值，使代价函数的值最小，此时得到的theta_{0}, theta_{1}变是我们期望得到的值。</strong></p>
<p>则可以看出在三维空间中存在一个使得$J(\theta_{0}, \theta_{1})$最小的点。</p>
<p>代价函数也被称作平方误差函数，有时也被称为平方误差代价函数。我们之所以要求出误差的平方和，是因为误差平方代价函数，对于大多数问题，特别是回归问题，都是一个合理的选择。还有其他的代价函数也能很好地发挥作用，但是平方误差代价函数可能是解决回归问题最常用的手段了。</p>
<p>在后续课程中，我们还会谈论其他的代价函数，但我们刚刚讲的选择是对于大多数线性回归问题非常合理的。</p>
<p>也许这个函数$J(\theta_{0}, \theta_{1})$有点抽象，可能你仍然不知道它的内涵，在接下来的几个视频里，我们要更进一步解释代价函数J的工作原理，并尝试更直观地解释它在计算什么，以及我们使用它的目的。</p>
<h3 id="2-3代价函数的直观理解"><a href="#2-3代价函数的直观理解" class="headerlink" title="2.3代价函数的直观理解|"></a>2.3代价函数的直观理解|</h3><p>参考视频: 2 - 3 - Cost Function - Intuition I (11 min).mkv</p>
<p>在上一个视频中，我们给了代价函数一个数学上的定义。在这个视频里，让我们通过一些例子来获取一些直观的感受，看看代价函数到底是在干什么。</p>
<p><img src="/images/image-20210216235141468.png" alt="image-20210216235141468"></p>
<p><img src="/images/image-20210216235152322.png" alt="image-20210216235152322"></p>
<h3 id="2-4代价函数的直观理解"><a href="#2-4代价函数的直观理解" class="headerlink" title="2.4代价函数的直观理解||"></a>2.4代价函数的直观理解||</h3><p><img src="/images/image-20210216235528290.png" alt="image-20210216235528290"></p>
<p>代价函数的样子，等高线图，则可以看出在三维空间中存在一个使得$J(\theta_{0}, \theta_{1})$最小的点。</p>
<p><img src="/images/image-20210216235547767.png" alt="image-20210216235547767"></p>
<p>通过这些图形，我希望你能更好地理解这些代价函数$ J$所表达的值是什么样的，它们对应的假设是什么样的，以及什么样的假设对应的点，更接近于代价函数$J$的最小值。</p>
<p>当然，我们真正需要的是一种有效的算法，能够自动地找出这些使代价函数$J$取最小值的参数$\theta_{0}$和$\theta_{1}$来。</p>
<p>我们也不希望编个程序把这些点画出来，然后人工的方法来读出这些点的数值，这很明显不是一个好办法。我们会遇到更复杂、更高维度、更多参数的情况，而这些情况是很难画出图的，因此更无法将其可视化，因此我们真正需要的是编写程序来找出这些最小化代价函数的$\theta_{0}$和$\theta_{1}$的值，在下一节视频中，我们将介绍一种算法，能够自动地找出能使代价函数$J$最小化的参数$\theta_{0}$和$\theta_{1}$的值。</p>
<h3 id="2-5梯度下降"><a href="#2-5梯度下降" class="headerlink" title="2.5梯度下降"></a>2.5梯度下降</h3><p>梯度下降是一个用来求函数最小值的算法，我们将使用梯度下降算法来求出代价函数$J(\theta_{0}, \theta_{1})$ 的最小值。</p>
<p>梯度下降背后的思想是：开始时我们随机选择一个参数的组合$\left( {\theta_{0}},{\theta_{1}},……,{\theta_{n}} \right)$，计算代价函数，然后我们寻找下一个能让代价函数值下降最多的参数组合。我们持续这么做直到找到一个局部最小值（<strong>local minimum</strong>），因为我们并没有尝试完所有的参数组合，所以不能确定我们得到的局部最小值是否便是全局最小值（<strong>global minimum</strong>），选择不同的初始参数组合，可能会找到不同的局部最小值。</p>
<p><img src="/images/image-20210216235758941.png" alt="image-20210216235758941"></p>
<p>想象一下你正站立在山的这一点上，站立在你想象的公园这座红色山上，在梯度下降算法中，我们要做的就是旋转360度，看看我们的周围，并问自己要在某个方向上，用小碎步尽快下山。这些小碎步需要朝什么方向？如果我们站在山坡上的这一点，你看一下周围，你会发现最佳的下山方向，你再看看周围，然后再一次想想，我应该从什么方向迈着小碎步下山？然后你按照自己的判断又迈出一步，重复上面的步骤，从这个新的点，你环顾四周，并决定从什么方向将会最快下山，然后又迈进了一小步，并依此类推，直到你接近局部最低点的位置。</p>
<p>批量梯度下降（<strong>batch gradient descent</strong>）算法的公式为：</p>
<p><img src="/images/image-20210217000026099.png" alt="image-20210217000026099"></p>
<p>其中$a$是学习率（<strong>learning rate</strong>），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大，在批量梯度下降中，我们每一次都同时让所有的参数减去学习速率乘以代价函数的导数。</p>
<p><img src="/images/image-20210217000338121.png" alt="image-20210217000338121"></p>
<p>在梯度下降算法中，还有一个更微妙的问题，梯度下降中，我们要更新${\theta_{0}}$和${\theta_{1}}$ ，当 $j=0$ 和$j=1$时，会产生更新，所以你将更新$J\left( {\theta_{0}} \right)$和$J\left( {\theta_{1}} \right)$。实现梯度下降算法的微妙之处是，在这个表达式中，如果你要更新这个等式，你需要同时更新${\theta_{0}}$和${\theta_{1}}$，我的意思是在这个等式中，我们要这样更新：</p>
<p>${\theta_{0}}$:= ${\theta_{0}}$ ，并更新${\theta_{1}}$:= ${\theta_{1}}$。</p>
<p>实现方法是：你应该计算公式右边的部分，通过那一部分计算出${\theta_{0}}$和${\theta_{1}}$的值，然后同时更新${\theta_{0}}$和${\theta_{1}}$。</p>
<p>让我进一步阐述这个过程：</p>
<p><img src="/images/image-20210217000401134.png" alt="image-20210217000401134"></p>
<p>在梯度下降算法中，这是正确实现同时更新的方法。我不打算解释为什么你需要同时更新，同时更新是梯度下降中的一种常用方法。我们之后会讲到，同步更新是更自然的实现方法。当人们谈到梯度下降时，他们的意思就是同步更新。</p>
<p>在接下来的视频中，我们要进入这个微分项的细节之中。我已经写了出来但没有真正定义，如果你已经修过微积分课程，如果你熟悉偏导数和导数，这其实就是这个微分项：</p>
<p><img src="/images/image-20210217002837122.png" alt="image-20210217002837122"></p>
<p>如果你不熟悉微积分，不用担心，即使你之前没有看过微积分，或者没有接触过偏导数，在接下来的视频中，你会得到一切你需要知道，如何计算这个微分项的知识。</p>
<p>下一个视频中，希望我们能够给出实现梯度下降算法的所有知识 。</p>
<h3 id="2-6梯度下降的直观理解"><a href="#2-6梯度下降的直观理解" class="headerlink" title="2.6梯度下降的直观理解"></a>2.6梯度下降的直观理解</h3><p>在之前的视频中，我们给出了一个数学上关于梯度下降的定义，本次视频我们更深入研究一下，更直观地感受一下这个算法是做什么的，以及梯度下降算法的更新过程有什么意义。梯度下降算法如下：</p>
<p>${\theta_{j}}:={\theta_{j}}-\alpha \frac{\partial }{\partial {\theta_{j}}}J\left(\theta \right)$</p>
<p>描述：对$\theta $赋值，使得$J\left( \theta  \right)$按梯度下降最快方向进行，一直迭代下去，最终得到局部最小值。其中$a$是学习率（<strong>learning rate</strong>），它决定了我们沿着能让代价函数下降程度最大的方向向下迈出的步子有多大。</p>
<p><img src="/images/image-20210217000534228.png" alt="image-20210217000534228"></p>
<p>对于这个问题，求导的目的，基本上可以说取这个红点的切线，就是这样一条红色的直线，刚好与函数相切于这一点，让我们看看这条红色直线的斜率，就是这条刚好与函数曲线相切的这条直线，这条直线的斜率正好是这个三角形的高度除以这个水平长度，现在，这条线有一个正斜率，也就是说它有正导数，因此，我得到的新的${\theta_{1}}$，${\theta_{1}}$更新后等于${\theta_{1}}$减去一个正数乘以$a$。</p>
<p>这就是我梯度下降法的更新规则：${\theta_{j}}:={\theta_{j}}-\alpha \frac{\partial }{\partial {\theta_{j}}}J\left( \theta  \right)$</p>
<p>让我们来看看如果$a$太小或$a$太大会出现什么情况：</p>
<p>如果$a$太小了，即我的学习速率太小，结果就是只能这样像小宝宝一样一点点地挪动，去努力接近最低点，这样就需要很多步才能到达最低点，所以如果$a$太小的话，可能会很慢，因为它会一点点挪动，它会需要很多步才能到达全局最低点。</p>
<p>如果$a$太大，那么梯度下降法可能会越过最低点，甚至可能无法收敛，下一次迭代又移动了一大步，越过一次，又越过一次，一次次越过最低点，直到你发现实际上离最低点越来越远，所以，如果$a$太大，它会导致无法收敛，甚至发散。</p>
<p>现在，我还有一个问题，当我第一次学习这个地方时，我花了很长一段时间才理解这个问题，如果我们预先把${\theta_{1}}$放在一个局部的最低点，你认为下一步梯度下降法会怎样工作？</p>
<p>假设你将${\theta_{1}}$初始化在局部最低点，在这儿，它已经在一个局部的最优处或局部最低点。结果是局部最优点的导数将等于零，因为它是那条切线的斜率。这意味着你已经在局部最优点，它使得${\theta_{1}}$不再改变，也就是新的${\theta_{1}}$等于原来的${\theta_{1}}$，因此，如果你的参数已经处于局部最低点，那么梯度下降法更新其实什么都没做，它不会改变参数的值。这也解释了为什么即使学习速率$a$保持不变时，梯度下降也可以收敛到局部最低点。</p>
<p>我们来看一个例子，这是代价函数$J\left( \theta  \right)$。</p>
<p><img src="/images/image-20210217000553809.png" alt="image-20210217000553809"></p>
<p>我想找到它的最小值，首先初始化我的梯度下降算法，在那个品红色的点初始化，如果我更新一步梯度下降，也许它会带我到这个点，因为这个点的导数是相当陡的。现在，在这个绿色的点，如果我再更新一步，你会发现我的导数，也即斜率，是没那么陡的。随着我接近最低点，我的导数越来越接近零，所以，梯度下降一步后，新的导数会变小一点点。然后我想再梯度下降一步，在这个绿点，我自然会用一个稍微跟刚才在那个品红点时比，再小一点的一步，到了新的红色点，更接近全局最低点了，因此这点的导数会比在绿点时更小。所以，我再进行一步梯度下降时，我的导数项是更小的，${\theta_{1}}$更新的幅度就会更小。所以随着梯度下降法的运行，你移动的幅度会自动变得越来越小，直到最终移动幅度非常小，你会发现，已经收敛到局部极小值。</p>
<p>回顾一下，在梯度下降法中，当我们接近局部最低点时，梯度下降法会自动采取更小的幅度，这是因为当我们接近局部最低点时，很显然在局部最低时导数等于零，所以当我们接近局部最低时，导数值会自动变得越来越小，所以梯度下降将自动采取较小的幅度，这就是梯度下降的做法。所以实际上没有必要再另外减小$a$。</p>
<p>这就是梯度下降算法，你可以用它来最小化任何代价函数$J$，不只是线性回归中的代价函数$J$。</p>
<p>在接下来的视频中，我们要用代价函数$J$，回到它的本质，线性回归中的代价函数。也就是我们前面得出的平方误差函数，结合梯度下降法，以及平方代价函数，我们会得出第一个机器学习算法，即线性回归算法。</p>
<p><img src="/images/image-20210217002957464.png" alt="image-20210217002957464"></p>
<p><img src="/images/image-20210217003019388.png" alt="image-20210217003019388"></p>
<p><img src="/images/image-20210217003035133.png" alt="image-20210217003035133"></p>
<p>则算法改写成：</p>
<h3 id><a href="#" class="headerlink" title></a><img src="/images/image-20210217002906737.png" alt="image-20210217002906737"></h3><h3 id="2-7梯度下降算法更多内容"><a href="#2-7梯度下降算法更多内容" class="headerlink" title="2.7梯度下降算法更多内容"></a>2.7梯度下降算法更多内容</h3><p>请参考<a href="https://blog.csdn.net/qq_41800366/article/details/86583789?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161349126216780261954075%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161349126216780261954075&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-86583789.first_rank_v2_pc_rank_v29&amp;utm_term=%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95&amp;spm=1018.2226.3001.4187">链接</a></p>
<h2 id="三-线性代数回顾-Linear-Algebra-Review"><a href="#三-线性代数回顾-Linear-Algebra-Review" class="headerlink" title="三.线性代数回顾(Linear Algebra Review)"></a>三.线性代数回顾(Linear Algebra Review)</h2><h2 id="四-多变量线性回归-Linear-Regression-with-Multiple-Variables"><a href="#四-多变量线性回归-Linear-Regression-with-Multiple-Variables" class="headerlink" title="四.多变量线性回归(Linear Regression with Multiple Variables)"></a>四.多变量线性回归(Linear Regression with Multiple Variables)</h2><h3 id="4-1多维特征"><a href="#4-1多维特征" class="headerlink" title="4.1多维特征"></a>4.1多维特征</h3><p>目前为止，我们探讨了单变量/特征的回归模型，现在我们对房价模型增加更多的特征，例如房间数楼层等，构成一个含有多个变量的模型，模型中的特征为</p>
<script type="math/tex; mode=display">
\left( {x_{1}},{x_{2}},...,{x_{n}} \right)</script><p><img src="/images/image-20210217135149679.png" alt="image-20210217135149679"></p>
<p>增添更多特征后，我们引入一系列新的注释：</p>
<p>n代表特征的数量</p>
<p><img src="/images/image-20210217135313151.png" alt="image-20210217135313151">代表第 i 个训练实例，是特征矩阵中的第i行，是一个<strong>向量</strong>（<strong>vector</strong>）。</p>
<p>比方说，上图的</p>
<script type="math/tex; mode=display">
{x}^{(2)}\text{=}\begin{bmatrix} 1416\\\ 3\\\ 2\\\ 40 \end{bmatrix}</script><p><img src="/images/image-20210217135736845.png" alt="image-20210217135736845">代表特征矩阵中第 $i$ 行的第 $j$ 个特征，也就是第 $i$ 个训练实例的第 $j$ 个特征。</p>
<p>如上图的<img src="/images/image-20210217135935284.png" alt="image-20210217135935284"></p>
<p>支持多变量的假设 h表示为：<img src="/images/image-20210217140013223.png" alt="image-20210217140013223"></p>
<p>这个公式中有n+1个参数和n个变量，为了使得公式能够简化一些，引入<img src="/images/image-20210217140116234.png" alt="image-20210217140116234">则公式转化为：<img src="/images/image-20210217140159797.png" alt="image-20210217140159797"></p>
<p>此时模型中的参数是一个n+1维的向量,任何一个训练实例也都是n+1维的向量,特征矩阵X的维度是m*(n+1).因此公式可以简化为：</p>
<script type="math/tex; mode=display">
h_{\theta} \left( x \right)={\theta^{T}}X</script><p>其中上标T代表矩阵转置。</p>
<h3 id="4-2-多变量梯度下降"><a href="#4-2-多变量梯度下降" class="headerlink" title="4.2 多变量梯度下降"></a>4.2 多变量梯度下降</h3><p>与单变量线性回归类似，在多变量线性回归中，我们也构建一个代价函数，则这个代价函数是所有建模误差的平方和，即：</p>
<p><img src="/images/image-20210217141700534.png" alt="image-20210217141700534"></p>
<p>其中<img src="/images/image-20210217141916558.png" alt="image-20210217141916558"></p>
<p>我们的目标和单变量线性回归问题中一样，是要找出使得代价函数最小的一系列参数。<br>多变量线性回归的批量梯度下降算法为：</p>
<p><img src="/images/image-20210217141936436.png" alt="image-20210217141936436"></p>
<p>即：</p>
<p><img src="/images/image-20210217141947358.png" alt="image-20210217141947358"></p>
<p>当n&gt;=1时:</p>
<p><img src="/images/image-20210217142148319.png" alt="image-20210217142148319"></p>
<p><img src="/images/image-20210217142153897.png" alt="image-20210217142153897"></p>
<p><img src="/images/image-20210217142200423.png" alt="image-20210217142200423"></p>
<p>我们开始随机选择一系列的参数值，计算所有的预测结果后，再给所有的参数一个新的值，如此循环直到收敛。</p>
<p><strong>Python</strong> 代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span>(<span class="params">X, y, theta</span>):</span></span><br><span class="line">    inner = np.power(((X * theta.T) - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">sum</span>(inner) / (<span class="number">2</span> * <span class="built_in">len</span>(X))</span><br></pre></td></tr></table></figure>
<h3 id="4-3梯度下降法实践1-特征缩放"><a href="#4-3梯度下降法实践1-特征缩放" class="headerlink" title="4.3梯度下降法实践1-特征缩放"></a>4.3梯度下降法实践1-特征缩放</h3><p>在我们面对多维特征问题的时候，我们要保证这些特征都具有相近的尺度，这将帮助梯度下降算法更快地收敛。</p>
<p>以房价问题为例，假设我们使用两个特征，房屋的尺寸和房间的数量，尺寸的值为 0-2000平方英尺，而房间数量的值则是0-5，以两个参数分别为横纵坐标，绘制代价函数的等高线图能，看出图像会显得很扁，梯度下降算法需要非常多次的迭代才能收敛。</p>
<p><img src="/images/image-20210217144009670.png" alt="image-20210217144009670"></p>
<p>解决的方法是尝试将所有特征的尺度都尽量缩放到-1到1之间。如图：</p>
<p><img src="/images/image-20210217144026104.png" alt="image-20210217144026104"></p>
<p>最简单的方法是令：</p>
<p><img src="/images/image-20210217144136166.png" alt="image-20210217144136166"></p>
<p>其中<img src="/images/image-20210217144228881.png" alt="image-20210217144228881">是平均值，<img src="/images/image-20210217144303006.png" alt="image-20210217144303006">是标准差</p>
<h3 id="4-4梯度下降法实践2-学习率"><a href="#4-4梯度下降法实践2-学习率" class="headerlink" title="4.4梯度下降法实践2-学习率"></a>4.4梯度下降法实践2-学习率</h3><p>梯度下降算法收敛所需要的迭代次数根据模型的不同而不同，我们不能提前预知，我们可以绘制迭代次数和代价函数的图表来观测算法在何时趋于收敛。</p>
<p><img src="/images/image-20210217144426235.png" alt="image-20210217144426235"></p>
<p>也有一些自动测试是否收敛的方法，例如将代价函数的变化值与某个阀值（例如0.001）进行比较，但通常看上面这样的图表更好。</p>
<p>梯度下降算法的每次迭代受到学习率的影响，如果学习率$a$过小，则达到收敛所需的迭代次数会非常高；如果学习率$a$过大，每次迭代可能不会减小代价函数，可能会越过局部最小值导致无法收敛。</p>
<p>通常可以考虑尝试些学习率：</p>
<script type="math/tex; mode=display">
\alpha=0.01，0.03，0.1，0.3，1，3，10</script><h3 id="4-5-特征和多项式回归"><a href="#4-5-特征和多项式回归" class="headerlink" title="4.5 特征和多项式回归"></a>4.5 特征和多项式回归</h3><p>如房价预测问题，</p>
<p><img src="/images/image-20210218161127888.png" alt="image-20210218161127888"></p>
<p><img src="/images/image-20210218161153908.png" alt="image-20210218161153908"></p>
<p><img src="/images/image-20210218161321350.png" alt="image-20210218161321350"></p>
<p><img src="/images/image-20210218161337520.png" alt="image-20210218161337520"></p>
<p>则：</p>
<p><img src="/images/image-20210218161351222.png" alt="image-20210218161351222"></p>
<p>线性回归并不适用于所有数据，有时我们需要曲线来适应我们的数据，比如一个二次方模型：</p>
<p><img src="/images/image-20210218161449597.png" alt="image-20210218161449597"></p>
<p>或者三次方模型:</p>
<p><img src="/images/image-20210218161519095.png" alt="image-20210218161519095"></p>
<p><img src="/images/image-20210218161533113.png" alt="image-20210218161533113"></p>
<p>通常我们需要先观察数据然后再决定准备尝试怎样的模型。 另外，我们可以令：<img src="/images/image-20210218161643826.png" alt="image-20210218161643826">从而将模型转化为线性回归模型。</p>
<p>根据函数图形特性，我们还可以使：<img src="/images/image-20210218161726641.png" alt="image-20210218161726641"></p>
<p>或者:<img src="/images/image-20210218161742466.png" alt="image-20210218161742466"></p>
<p>注：如果我们采用多项式回归模型，在运行梯度下降算法前，特征缩放非常有必要。</p>
<h3 id="4-6正规方程"><a href="#4-6正规方程" class="headerlink" title="4.6正规方程"></a>4.6正规方程</h3><p>到目前为止，我们都在使用梯度下降算法，但是对于某些线性回归问题，正规方程方法是更好的解决方案。如：</p>
<p><img src="/images/image-20210218162307180.png" alt="image-20210218162307180"></p>
<p>正规方程是通过求解下面的方程来找出使得代价函数最小的参数的：</p>
<p><img src="/images/image-20210218162409718.png" alt="image-20210218162409718"></p>
<p>假设我们的训练集特征矩阵为X(包含了x0=1)并且我们的训练集结果为向量y,则利用正规方程解出向量</p>
<p><img src="/images/image-20210218162601709.png" alt="image-20210218162601709"></p>
<p>设<img src="/images/image-20210218162658334.png" alt="image-20210218162658334">则：<img src="/images/image-20210218162722849.png" alt="image-20210218162722849"></p>
<p><img src="/images/image-20210218162755926.png" alt="image-20210218162755926"></p>
<p><img src="/images/image-20210218162804677.png" alt="image-20210218162804677"></p>
<p>运用正规方程方法求解参数：</p>
<p><img src="/images/image-20210218162820290.png" alt="image-20210218162820290"></p>
<p>注：对于那些不可逆的矩阵（通常是因为特征之间不独立，如同时包含英尺为单位的尺寸和米为单位的尺寸两个特征，也有可能是特征数量大于训练集的数量），正规方程方法是不能用的。</p>
<p>梯度下降与正规方程的比较：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>梯度下降</th>
<th>正规方程</th>
</tr>
</thead>
<tbody>
<tr>
<td>需要选择学习率$\alpha$</td>
<td>不需要</td>
</tr>
<tr>
<td>需要多次迭代</td>
<td>一次运算得出</td>
</tr>
<tr>
<td>当特征数量$n$大时也能较好适用</td>
<td>需要计算<img src="/images/image-20210218162916440.png" alt="image-20210218162916440"> 如果特征数量n较大则运算代价大，因为矩阵逆的计算时间复杂度为<img src="/images/image-20210218162943804.png" alt="image-20210218162943804">，通常来说当$n$小于10000 时还是可以接受的</td>
</tr>
<tr>
<td>适用于各种类型的模型</td>
<td>只适用于线性模型，不适合逻辑回归模型等其他模型</td>
</tr>
</tbody>
</table>
</div>
<p>总结一下，只要特征变量的数目并不大，标准方程是一个很好的计算参数$\theta $的替代方法。具体地说，只要特征变量数量小于一万，我通常使用标准方程法，而不使用梯度下降法。</p>
<p>随着我们要讲的学习算法越来越复杂，例如，当我们讲到分类算法，像逻辑回归算法，我们会看到，实际上对于那些算法，并不能使用标准方程法。对于那些更复杂的学习算法，我们将不得不仍然使用梯度下降法。因此，梯度下降法是一个非常有用的算法，可以用在有大量特征变量的线性回归问题。或者我们以后在课程中，会讲到的一些其他的算法，因为标准方程法不适合或者不能用在它们上。但对于这个特定的线性回归模型，标准方程法是一个比梯度下降法更快的替代算法。所以，根据具体的问题，以及你的特征变量的数量，这两种算法都是值得学习的。</p>
<p>正规方程的python 实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    </span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">normalEqn</span>(<span class="params">X, y</span>):</span></span><br><span class="line">    </span><br><span class="line">   theta = np.linalg.inv(X.T@X)@X.T@y <span class="comment">#X.T@X等价于X.T.dot(X)</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure>
<h3 id="4-7正规方程的不可逆过程"><a href="#4-7正规方程的不可逆过程" class="headerlink" title="4.7正规方程的不可逆过程"></a>4.7正规方程的不可逆过程</h3><h2 id="四-逻辑回归-Logistic-Regression"><a href="#四-逻辑回归-Logistic-Regression" class="headerlink" title="四.逻辑回归(Logistic Regression)"></a>四.逻辑回归(Logistic Regression)</h2><h3 id="6-1分类问题"><a href="#6-1分类问题" class="headerlink" title="6.1分类问题"></a>6.1分类问题</h3><p>在这个以及接下来的几个视频中，开始介绍分类问题。</p>
<p>在分类问题中，你要预测的变量 $y$ 是离散的值，我们将学习一种叫做逻辑回归 (<strong>Logistic Regression</strong>) 的算法，这是目前最流行使用最广泛的一种学习算法。</p>
<p>在分类问题中，我们尝试预测的是结果是否属于某一个类（例如正确或错误）。分类问题的例子有：判断一封电子邮件是否是垃圾邮件；判断一次金融交易是否是欺诈；之前我们也谈到了肿瘤分类问题的例子，区别一个肿瘤是恶性的还是良性的。</p>
<p>我们从二元的分类问题开始讨论。</p>
<p>我们将因变量(<strong>dependent variable</strong>)可能属于的两个类分别称为负向类（<strong>negative class</strong>）和正向类（<strong>positive class</strong>），则因变量$y\in { 0,1 \\}$ ，其中 0 表示负向类，1 表示正向类。</p>
<p><img src="/images/image-20210219205008736.png" alt="image-20210219205008736"></p>
<p><img src="/images/image-20210219205031615.png" alt="image-20210219205031615"></p>
<p>如果我们要用线性回归算法来解决一个分类问题，对于分类， $y$ 取值为 0 或者1，但如果你使用的是线性回归，那么假设函数的输出值可能远大于 1，或者远小于0，即使所有训练样本的标签  $y$ 都等于 0 或 1。尽管我们知道标签应该取值0 或者1，但是如果算法得到的值远大于1或者远小于0的话，就会感觉很奇怪。所以我们在接下来的要研究的算法就叫做逻辑回归算法，这个算法的性质是：它的输出值永远在0到 1 之间。</p>
<p>顺便说一下，逻辑回归算法是分类算法，我们将它作为分类算法使用。有时候可能因为这个算法的名字中出现了“回归”使你感到困惑，但逻辑回归算法实际上是一种分类算法，它适用于标签  $y$ 取值离散的情况，如：1 0 0 1。</p>
<p>在接下来的视频中，我们将开始学习逻辑回归算法的细节。</p>
<h3 id="6-2假说表示"><a href="#6-2假说表示" class="headerlink" title="6.2假说表示"></a>6.2假说表示</h3><p>在这段视频中，我要给你展示假设函数的表达式，也就是说，在分类问题中，要用什么样的函数来表示我们的假设。此前我们说过，希望我们的分类器的输出值在0和1之间，因此，我们希望想出一个满足某个性质的假设函数，这个性质是它的预测值要在0和1之间。</p>
<p>回顾在一开始提到的乳腺癌分类问题，我们可以用线性回归的方法求出适合数据的一条直线：</p>
<p><img src="/images/image-20210219205335962.png" alt="image-20210219205335962"></p>
<p>根据线性回归模型我们只能预测连续的值，然而对于分类问题，我们需要输出0或1，我们可以预测：</p>
<p><img src="/images/image-20210219205424685.png" alt="image-20210219205424685"></p>
<p><img src="/images/image-20210219205431707.png" alt="image-20210219205431707"></p>
<p>对于上图所示的数据，这样的一个线性模型似乎能很好地完成分类任务。假使我们又观测到一个非常大尺寸的恶性肿瘤，将其作为实例加入到我们的训练集中来，这将使得我们获得一条新的直线。</p>
<p><img src="/images/image-20210219205839015.png" alt="image-20210219205839015"></p>
<p>这时，再使用0.5作为阀值来预测肿瘤是良性还是恶性便不合适了。可以看出，线性回归模型，因为其预测的值可以超越[0,1]的范围，并不适合解决这样的问题。</p>
<p>我们引入一个新的模型，逻辑回归，该模型的输出变量范围始终在0和1之间。</p>
<p>逻辑回归模型的假设是： </p>
<p><img src="/images/image-20210219205921075.png" alt="image-20210219205921075"></p>
<p>$X$ 代表特征向量<br>$g$ 代表逻辑函数（<strong>logistic function</strong>)是一个常用的逻辑函数为<strong>S</strong>形函数（<strong>Sigmoid function</strong>），公式为：<img src="/images/image-20210219205956276.png" alt="image-20210219205956276"></p>
<p><strong>python</strong>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">z</span>):</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure>
<p>该函数的图像为：</p>
<p><img src="/images/image-20210219210047848.png" alt="image-20210219210047848"></p>
<p>合起来，我们得到逻辑回归模型的假设：</p>
<p>对模型的理解：<img src="/images/image-20210219210219689.png" alt="image-20210219210219689"></p>
<p>的作用是，对于给定的输入变量，根据选择的参数计算输出变量=1的可能性,即<img src="/images/image-20210219210322856.png" alt="image-20210219210322856"></p>
<p>例如，如果对于给定的$x$，通过已经确定的参数计算得出</p>
<p><img src="/images/image-20210219213349970.png" alt="image-20210219213349970"></p>
<p>则表示有70%的几率$y$为正向类，相应地$y$为负向类的几率为1-0.7=0.3。</p>
<h3 id="6-3-判定边界"><a href="#6-3-判定边界" class="headerlink" title="6.3 判定边界"></a>6.3 判定边界</h3><p>现在讲下决策边界(<strong>decision boundary</strong>)的概念。这个概念能更好地帮助我们理解逻辑回归的假设函数在计算什么。</p>
<p><img src="/images/image-20210219223428799.png" alt="image-20210219223428799"></p>
<p>在逻辑回归中，我们预测：</p>
<p>当${h_\theta}\left( x \right)&gt;=0.5$时，预测 $y=1$。</p>
<p>当${h_\theta}\left( x \right)&lt;0.5$时，预测 $y=0$ 。</p>
<p>根据上面绘制出的 <strong>S</strong> 形函数图像，我们知道当</p>
<p>$z=0$ 时 $g(z)=0.5$</p>
<p>$z&gt;0$ 时 $g(z)&gt;0.5$</p>
<p>$z&lt;0$ 时 $g(z)&lt;0.5$</p>
<p>又 $z={\theta^{T}}x$ ，即：<br>${\theta^{T}}x&gt;=0$  时，预测 $y=1$<br>${\theta^{T}}x&lt;0$  时，预测 $y=0$</p>
<p>现在假设我们有一个模型：</p>
<p><img src="/images/image-20210219223559321.png" alt="image-20210219223559321"></p>
<p>并且参数$\theta$ 是向量[-3 1 1]。 则当<img src="/images/image-20210219223750629.png" alt="image-20210219223750629">模型将预测 $y=1$。</p>
<p>我们可以绘制直线${x_1}+{x_2} = 3$，这条线便是我们模型的分界线，将预测为1的区域和预测为 0的区域分隔开。</p>
<p><img src="/images/image-20210219223822684.png" alt="image-20210219223822684"></p>
<p>假使我们的数据呈现这样的分布情况，怎样的模型才能适合呢？</p>
<p><img src="/images/image-20210219223838732.png" alt="image-20210219223838732"></p>
<p>因为需要用曲线才能分隔 $y=0$ 的区域和 $y=1$ 的区域，我们需要二次方特征：<img src="/images/image-20210219223947040.png" alt="image-20210219223947040"></p>
<p>是[-1 0 0 1 1]，则我们得到的判定边界恰好是圆点在原点且半径为1的圆形。</p>
<p>我们可以用非常复杂的模型来适应非常复杂形状的判定边界。</p>
<h3 id="6-4代价函数"><a href="#6-4代价函数" class="headerlink" title="6.4代价函数"></a>6.4代价函数</h3><p>在这段视频中，我们要介绍如何拟合逻辑回归模型的参数$\theta$。具体来说，我要定义用来拟合参数的优化目标或者叫代价函数，这便是监督学习问题中的逻辑回归模型的拟合问题。</p>
<p><img src="/images/image-20210220072049273.png" alt="image-20210220072049273"></p>
<p>对于线性回归模型，我们定义的代价函数是所有模型误差的平方和。理论上来说，我们也可以对逻辑回归模型沿用这个定义，但是问题在于，当我们将<img src="/images/image-20210220072158178.png" alt="image-20210220072158178">带入到这样定义了的代价函数中时，我们得到的代价函数将是一个非凸函数（<strong>non-convexfunction</strong>）。</p>
<p><img src="/images/image-20210220072214334.png" alt="image-20210220072214334"></p>
<p>这意味着我们的代价函数有许多局部最小值，这将影响梯度下降算法寻找全局最小值。</p>
<p>线性回归的代价函数为：<img src="/images/image-20210220072332215.png" alt="image-20210220072332215">我们重新定义逻辑回归的代价函数为：<img src="/images/image-20210220072402181.png" alt="image-20210220072402181"></p>
<p>其中<img src="/images/image-20210220072422304.png" alt="image-20210220072422304"></p>
<p><img src="/images/image-20210220072449078.png" alt="image-20210220072449078">之间的关系如下图所示：<img src="/images/image-20210220072503337.png" alt="image-20210220072503337"></p>
<p>这样构建的<img src="/images/image-20210220072549402.png" alt="image-20210220072549402">函数的特点是：当实际的  $y=1$ 且<img src="/images/image-20210220072641331.png" alt="image-20210220072641331">也为 1 时误差为 0</p>
<p>当 $y=1$ 但<img src="/images/image-20210220072807366.png" alt="image-20210220072807366">不为1时误差随着<img src="/images/image-20210220072846545.png" alt="image-20210220072846545"></p>
<p>变小而变大；</p>
<p>当实际的 $y=0$ 且<img src="/images/image-20210220073104414.png" alt="image-20210220073104414">也为 0 时代价为 0，当$y=0$ 但<img src="/images/image-20210220073132499.png" alt="image-20210220073132499">不为 0时误差随着<img src="/images/image-20210220073214585.png" alt="image-20210220073214585">的变大而变大。将构建的<img src="/images/image-20210220073336344.png" alt="image-20210220073336344">简化如下：</p>
<p><img src="/images/image-20210220073534877.png" alt="image-20210220073534877"></p>
<p>带入代价函数得到：</p>
<p><img src="/images/image-20210220073624074.png" alt="image-20210220073624074"></p>
<p>即：<img src="/images/image-20210220073636614.png" alt="image-20210220073636614"></p>
<p><strong>Python</strong>代码实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span>(<span class="params">theta, X, y</span>):</span></span><br><span class="line">    </span><br><span class="line">  theta = np.matrix(theta)</span><br><span class="line">  X = np.matrix(X)</span><br><span class="line">  y = np.matrix(y)</span><br><span class="line">  first = np.multiply(-y, np.log(sigmoid(X* theta.T)))</span><br><span class="line">  second = np.multiply((<span class="number">1</span> - y), np.log(<span class="number">1</span> - sigmoid(X* theta.T)))</span><br><span class="line">  <span class="keyword">return</span> np.<span class="built_in">sum</span>(first - second) / (<span class="built_in">len</span>(X))</span><br></pre></td></tr></table></figure>
<p>在得到这样一个代价函数以后，我们便可以用梯度下降算法来求得能使代价函数最小的参数了。算法为：</p>
<p><img src="/images/image-20210220074848320.png" alt="image-20210220074848320"></p>
<p>求导后得到：</p>
<p><img src="/images/image-20210220074927936.png" alt="image-20210220074927936"></p>
<p>在这个视频中，我们定义了单训练样本的代价函数，凸性分析的内容是超出这门课的范围的，但是可以证明我们所选的代价值函数会给我们一个凸优化问题。代价函数$J(\theta)$会是一个凸函数，并且没有局部最优值。</p>
<p>推导过程：</p>
<p><img src="/images/image-20210220075005570.png" alt="image-20210220075005570"></p>
<p>考虑：<img src="/images/image-20210220075041803.png" alt="image-20210220075041803">则：<img src="/images/image-20210220075116773.png" alt="image-20210220075116773"></p>
<p><img src="/images/image-20210220075154821.png" alt="image-20210220075154821"></p>
<p><img src="/images/image-20210220075217278.png" alt="image-20210220075217278"></p>
<p>所以：</p>
<p><img src="/images/image-20210220075622898.png" alt="image-20210220075622898"></p>
<p>注：虽然得到的梯度下降算法表面上看上去与线性回归的梯度下降算法一样，但是这里的<img src="/images/image-20210220075658606.png" alt="image-20210220075658606">与线性回归中不同，所以实际上是不一样的。另外，在运行梯度下降算法之前，进行特征缩放依旧是非常必要的。</p>
<p>一些梯度下降算法之外的选择：<br>除了梯度下降算法以外，还有一些常被用来令代价函数最小的算法，这些算法更加复杂和优越，而且通常不需要人工选择学习率，通常比梯度下降算法要更加快速。这些算法有：<strong>共轭梯度</strong>（<strong>Conjugate Gradient</strong>），<strong>局部优化法</strong>(<strong>Broyden fletcher goldfarb shann,BFGS</strong>)和<strong>有限内存局部优化法</strong>(<strong>LBFGS</strong>) .</p>
<h3 id="6-5-简化的成本函数和梯度下降"><a href="#6-5-简化的成本函数和梯度下降" class="headerlink" title="6.5 简化的成本函数和梯度下降"></a>6.5 简化的成本函数和梯度下降</h3>]]></content>
      <categories>
        <category>AI</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>机器学习</tag>
        <tag>MachineLearning</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法</title>
    <url>/2021/04/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="第一章绪论"><a href="#第一章绪论" class="headerlink" title="第一章绪论"></a>第一章绪论</h2><hr>
<a id="more"></a>
<ul>
<li>程序=数据结构+算法</li>
</ul>
<blockquote>
<p>数据结构又分为物理结构和逻辑结构</p>
<p>逻辑结构：数据对象中元素之间相互之间的关系</p>
<p>物理结构：数据的逻辑结构在计算机中的存储形式</p>
</blockquote>
<ul>
<li>四大逻辑结构</li>
</ul>
<blockquote>
<p>集合结构: (集合中的元素除了同属于一个集合外他们之间没有其他的关系)</p>
<p>线性结构:(元素有一对一的关系)</p>
<p>树形结构: (树形结构中元素存在一对多的层次关系)</p>
<p>图形结构:(存在多对多关系)</p>
</blockquote>
<ul>
<li>数据元素的两种存储结构形式</li>
</ul>
<blockquote>
<p>顺序存储:(把数据存储到连续的存储单元里其数据之间的逻辑关系和物理关系是一直一致的,例如数组结构)</p>
<p>链式存储:(把元素存放到任意的存储单元中，存储单元可以是连续的也可以是不连续的。很显然链式存储结构不能反映其逻辑关系，因此需要一个存放数据元素的地址，这样可以通过地址找到相关联的元素。)</p>
</blockquote>
<ul>
<li>算法的特性</li>
</ul>
<blockquote>
<p>输入、输出、有穷性、确定性和可行性</p>
</blockquote>
<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li><p>是<strong>n(n≥0)</strong>个<strong>相同类型</strong>的<strong>数据元素</strong>构成的<strong>有限</strong>序列.</p>
</li>
<li><p>线性表中的元素具有相同的性质</p>
</li>
<li>关系为线性关系</li>
</ul>
<h3 id="数学表达"><a href="#数学表达" class="headerlink" title="数学表达"></a>数学表达</h3><ul>
<li>(a1，a2，…，an)</li>
<li>其中，n为线性表的长度，当n=0时，表示线性表是一个空表，即表中不包含任何元素。</li>
<li>对任意一对相邻元素<ai,ai+1>（1≤i&lt;n），ai称为ai+1的<strong>前驱</strong>，ai+1称为ai的<strong>后继</strong></ai,ai+1></li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>除第一个和最后一个元素为，每一个元素都有一个前驱和后继元素</li>
<li>分有序表和无序表，有序表按照递增排列，无序表无规律</li>
</ul>
<h3 id="抽象数据类型ADT-Abstract-data-type"><a href="#抽象数据类型ADT-Abstract-data-type" class="headerlink" title="抽象数据类型ADT(Abstract data type)"></a>抽象数据类型ADT(Abstract data type)</h3><p>&gt;<br>&gt;</p>
<blockquote>
<p>因为一个抽象数据类型是按它的行为定义的，所以实现抽象数据类型的程序员可以自由地改变它的基本表示方式。通常，一个抽象数据类型是由一个接口输出，并有一组定义其行为方式的函数。</p>
<p>比如定义一个队列抽象，就需要有创建新队列、出队、入队、查询等功能函数，这些函数都要包含在队列ADT中。</p>
<p>表示方式是抽象数据类型实现的属性之一。对于任何抽象来说，只要保持接口不变，我们可以改变其实现方式。<br>————————————————<br>版权声明：本文为CSDN博主「吉大秦少游」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zhanshen112/article/details/80279847">https://blog.csdn.net/zhanshen112/article/details/80279847</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ADT List</span><br><span class="line">&#123;</span><br><span class="line">    Data:</span><br><span class="line">    Operation:</span><br><span class="line">        InitList(&amp;L)</span><br><span class="line">        CreateList(&amp;L)</span><br><span class="line">        ListEmpty(L)</span><br><span class="line">        ListLength(L)</span><br><span class="line">        LocateElem(L,e)</span><br><span class="line">        PriorElem(L,cur_e,&amp;pre_e)</span><br><span class="line">        NextElem(L,cur_e,&amp;pre_e) </span><br><span class="line">        ListInsert(&amp;L,i,e)</span><br><span class="line">        ListDelete(&amp;L,i,&amp;e)</span><br><span class="line">        GetElem(L,i,&amp;e)</span><br><span class="line">        ListTraverse(L)</span><br><span class="line">        DestroyList(&amp;L)</span><br><span class="line">    &#125;<span class="comment">//ADT List</span></span><br></pre></td></tr></table></figure>
<h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul>
<li>顺序存储结构：用一组地址连续的存储单元依次存储<strong>数据结构</strong>(在这里是线性表)里各个元素，这种存储结构称为线性表的顺序存储结构。</li>
<li>顺序表：按照顺序存储结构存储的线性表。</li>
</ul>
<h3 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h3><ul>
<li><p>同线性表</p>
</li>
<li><p>求址 </p>
<p>每个元素占用k个存储单元，则<br><br>LOC(ai)= LOC(a1)+(i-1)*k   (1≤i ≤n)<br><br>LOC(ai+1)= LOC(ai)+k       (1≤i ≤n)<br></p>
</li>
</ul>
<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ul>
<li>访问顺序表中任意元素的时间都相等，具有这一特点的存储结构称为<strong>随机存取结构</strong></li>
</ul>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>围城</title>
    <url>/2020/02/15/%E5%9B%B4%E5%9F%8E/</url>
    <content><![CDATA[<p>围城<br>钱锺书<br>21个想法</p>
<p>◆ 重印前记</p>
<p>围在城里的人想逃出来，城外的人想冲进去，对婚姻也罢，职业也罢，人生的愿望大都如此。</p>
<a id="more"></a>
<p>>[插图]<br>《围城》一九四七年在上海初版，一九四八年再版，一九四九年三版，以后国内没有重印过。偶然碰见它的新版，那都是香港的“盗印”本。没有看到台湾的“盗印”本，据说在那里它是禁书。美国哥伦比亚大学夏志清教授的英文著作里对它作了过高的评价，导致了一些西方语言的译本。日本京都大学荒井健教授很久以前就通知我他要翻译，近年来也陆续在刊物上发表了译文。现在，人民文学出版社建议重新排印，以便原著在国内较易找着，我感到意外和忻幸。<br>我写完《围城》，就对它不很满意。出版了我现在更不满意的一本文学批评以后，我抽空又写长篇小说，命名《百合心》，也脱胎于法文成语（Le coeur d’artichaut），中心人物是一个女角。大约已写成了两万字。一九四九年夏天，全家从上海迁居北京，手忙脚乱中，我把一叠看来像乱纸的草稿扔到不知哪里去了。兴致大扫，一直没有再鼓起来，倒也从此省心省事。年复一年，创作的冲动随年衰减，创作的能力逐渐消失——也许两者根本上是一回事，我们常把自己的写作冲动误认为自己的写作才能，自以为要写就意味着会写。</p>
<p>>&gt; 事情没有做成的人老有这类根据不充分的信念；我们对采摘不到的葡萄，不但想象它酸，也很可能想象它是分外地甜。</p>
<p>◆ 一</p>
<p>>&gt; 忠厚老实人的恶毒，像饭里的砂砾或者出骨鱼片里未净的刺，会给人一种不期待的伤痛。</p>
<p>>&gt; 方鸿渐从此死心不敢妄想，开始读叔本华，常聪明地对同学们说：“世间哪有恋爱？压根儿是生殖冲动。</p>
<p>>&gt; 一个可爱的女人说你像她的未婚夫，等于表示假使她没订婚，你有资格得她的爱。刻薄鬼也许要这样解释，她已经另有未婚夫了，你可以享受她未婚夫的权利而不必履行跟她结婚的义务</p>
<p>◆ 二</p>
<p>>&gt; 为什么可爱的女孩子全有父亲呢？她孤独的一个人可以藏匿在心里温存，拖泥带水地牵上了父亲、叔父、兄弟之类，这女孩子就不伶俐洒脱，心里不便窝藏她了，她的可爱里也就搀和渣滓了。许多人谈婚姻，语气仿佛是同性恋爱，不是看中女孩子本人，是羡慕她的老子或她的哥哥。</p>
<p>>&gt; ‘嫁女必须胜吾家，娶妇必须不若吾家’，一个道理。”</p>
<p>>&gt; 方鸿渐那时候宛如隆冬早晨起床的人，好容易用最大努力跳出被窝，只有熬着冷穿衣下床，断无缩回去的道理。</p>
<p>原文 “伯牛有疾，子问之，自牖执其手，曰：“亡之，命矣夫！斯人也而有斯疾也！斯人也而有斯疾也！” (《论语·雍也第六》) “斯人也，而有斯疾也”意思就是说“这样的好人竟会得这样的恶疾啊”<br>>斯人也而有斯疾也</p>
<p>>&gt; 斯人也而有斯疾也</p>
<p>>&gt; 张太太等他饭毕走了，便说：“这种人家排场太小了！只吃那么多钱一天的菜！我女儿舒服惯的，过去吃不来苦！”</p>
<p>>&gt; 张先生跟外国人来往惯了，说话有个特征——也许在洋行、青年会、扶轮社等圈子里，这并没有什么奇特——喜欢中国话里夹无谓的英文字。他并无中文难达的新意，需要借英文来讲；所以他说话里嵌的英文字，还比不得嘴里嵌的金牙，因为金牙不仅妆点，尚可使用，只好比牙缝里嵌的肉屑，表示饭菜吃得好，此外全无用处。他仿美国人读音，维妙维肖，也许鼻音学得太过火了，不像美国人，而像伤风塞鼻子的中国人。</p>
<p>>&gt; snappy</p>
<p>◆ 三</p>
<p>>&gt; 好比睡不着的人，顾不得安眠药片的害处，先要图眼前的舒服。</p>
<p>>&gt; 世界上大事情像可以随便应付，偏是小事倒丝毫假借不了。</p>
<p>>&gt; Search me!</p>
<p>>&gt; 唐小姐感觉方鸿渐说这些话，都为着引起自己对他的注意，心中暗笑，说：“我不知道方先生是侮辱政治还是侮辱女人，至少都不是好话。”</p>
<p>>&gt; 苏小姐初到家，开口闭口都是方鸿渐，第五天后忽然绝口不提，</p>
<p>>&gt; 设想自己是唐小姐，用她的眼睛来审定着衣镜里自己的仪表。回国不到一年，额上添了许多皱纹，昨天没睡好，脸色眼神都萎靡黯淡。他这两天有了意中人以后，对自己外表上的缺点，知道得不宽假地详尽，仿佛只有一套出客衣服的穷人知道上面每一个斑渍和补钉。其实旁人看来，他脸色照常，但他自以为今天特别难看，花领带补得脸黄里泛绿，换了三次领带才下去吃早饭。</p>
<p>>&gt; 不是快乐，而是感激</p>
<p>>&gt; 教育愈普遍，而写信的人愈少；并非商业上的要务，大家还是怕写信，宁可打电话。我想这因为写信容易出丑，地位很高，讲话很体面的人往往笔动不来。可是，电话可以省掉面目可憎者的拜访，文理不通者的写信，也算是个功德无量的发明。”</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>活着</title>
    <url>/2021/02/15/%E6%B4%BB%E7%9D%80/</url>
    <content><![CDATA[<p>活着（葛优、巩俐主演）<br>余华<br>12个想法</p>
<p>◆ 中文版自序</p>
<p>>&gt; 人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。</p>
<p>◆ 麦田新版自序</p>
<p>>&gt; 生活是属于每个人自己的感受，不属于任何别人的看法。</p>
<a id="more"></a>
<p>◆ 活着</p>
<p>>&gt; 这个嫖和赌，就像是胳膊和肩膀连在一起，怎么都分不开。</p>
<p>◆ 1</p>
<p>>&gt; 我在水田里站着，看着我娘弯腰叫我的模样，她太使劲了，两只手撑在腿上，免得上面的身体掉到地上。</p>
<p>祸兮福所倚，福兮祸所伏。<br>>龙二从我身边走过时看了我一眼，我觉得他没认出我来，可走了几步他硬是回过头来，哭着鼻子对我喊道：<br>“福贵，我是替你去死啊。”</p>
<p>>&gt; 龙二从我身边走过时看了我一眼，我觉得他没认出我来，可走了几步他硬是回过头来，哭着鼻子对我喊道：“福贵，我是替你去死啊。”</p>
<p>◆ 2</p>
<p>>&gt; “大伙放心吧，县长说了，只要他不饿死，大伙也都饿不死。”</p>
<p>◆ 3</p>
<p>>&gt; “做人不能忘记四条，话不要说错，床不要睡错，门槛不要踏错，口袋不要摸错。”</p>
<p>>&gt; 少年去游荡，中年想掘藏，老年做和尚。</p>
<p>◆ 外文版评论摘要</p>
<p>人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。——余华<br>>当这部沉重的小说结束时，活着的意志，是福贵身上唯一不能被剥夺走的东西。</p>
<p>>&gt; 当这部沉重的小说结束时，活着的意志，是福贵身上唯一不能被剥夺走的东西。</p>
<p>◆ 点评</p>
<p>认为好看<br>人是为活着本身而活着的，而不是为了活着之外的任何事物所活着。——余华</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习实战</title>
    <url>/2021/04/22/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="一-KNN"><a href="#一-KNN" class="headerlink" title="一.KNN"></a>一.KNN</h3>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>月亮与六便士</title>
    <url>/2021/02/07/%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB/</url>
    <content><![CDATA[<p>π 2021/2/7 22:01:52<br>月亮与六便士<br>毛姆<br>63个笔记</p>
<p>◆ 作家榜推荐词</p>
<p>>&gt; 爱自已，是一生浪漫的开始。</p>
<p>◆ 导读</p>
<p>>&gt; “我不想谋生。我想生活。”</p>
<p>>&gt; 什么是生活？生活的意义是什么？这些没有人能真正告诉你，需要你自己满怀勇气，像小说主人公那样抛弃一切，用整个灵魂去探索。</p>
<a id="more"></a>
<p>>&gt; 在这个以物质为上帝的时代，用浅薄的幸福、成功来量死你的世界，你该怎样过完你的人生？人生如梦，你是希望枕着月亮还是六便士？很多人渴望名声，追求利益，很多人希望名利双收；大多数人按部就班，过着平庸乏味的生活；也有一些人忽然如梦方醒，一骨碌爬起，去寻找真正有价值的生活。所以无论如何，这部警世的小说都值得一读。正像小说第五十章中所说： 做自己最想做的事，过自己想过的生活，心平气和，怎么能叫作践自己？做一个有名的外科医生，一年赚一万英镑，娶一位漂亮的妻子，就是成功？我想，这取决于你如何看待生活的意义……</p>
<p>◆ 第一章</p>
<p>>&gt; 制造神话，是人类的天性。像那些出类拔萃的名人，人们总是对他们生活中的意外或神秘紧抓不放，深信不疑，缔造传奇，无限狂热。这是对平凡生活的浪漫抗议。</p>
<p>◆ 第二章</p>
<p>>&gt; 想不起来是谁说过：为了使灵魂安宁，一个人每天至少该做两件他不喜欢的事。</p>
<p>◆ 第四章</p>
<p>>&gt; “她觉得他们有意思。她想跟随潮流。我看她头脑简单，真可怜，她认为我们都很好。反正，她喜欢请我们吃饭，我们对吃饭也不反感。我喜欢她，不外乎这一点。”</p>
<p>>&gt; “为什么漂亮的女人总是嫁给无趣的男人？”<br>“因为有脑子的男人不娶漂亮的女人。”</p>
<p>◆ 第七章</p>
<p>>&gt; 我承认这种生活的社会价值，我也看到它井然有序的幸福，但是，我的血液里有一种强烈的冲动，渴望一种桀骜不驯的旅程。这样的安逸总让我惊惧。我的心渴望更加惊险的生活。只要我能有所改变——改变和不可预知的冒险，我将踏上嶙峋怪石，哪怕激流险滩。</p>
<p>◆ 第八章</p>
<p>>&gt; 那时，我还不了解女人根深蒂固的恶习：与任何愿意倾听的人谈论自己的私事。</p>
<p>◆ 第九章</p>
<p>>&gt; 既然他把这些秘密和盘托出，那我不妨继续问问。</p>
<p>>&gt; 事情变得更加复杂，上校怒火中烧，骂骂咧咧，颠三倒四，似乎并不是为了告诉我什么，只图发泄。谢天谢地，当他看到陆海军商店上面的大钟，忽然想起约好了要去俱乐部打牌。于是，他和我分手，穿过圣詹姆斯公园，自己走了。</p>
<p>◆ 第十章</p>
<p>>&gt; “只有一种解释，他真的变了。我不知道，是哪个女人控制了他，却把他变成了另一个人。很明显，已经很长时间了。”</p>
<p>>&gt; 我以为他在俱乐部，实际上，他是在和那个女人鬼混。</p>
<p>>&gt; 心里藏着如此意外的秘密，却能装作漫不经心，若无其事，很不容易；还得集中精力，打点孩子们上学，真是煞费苦心。斯特里克兰夫人又哽咽了。</p>
<p>◆ 第十一章</p>
<p>>&gt; 我那时还不懂得，人性有多矛盾；我不知道，真诚中有多少虚伪，高尚中有多少卑鄙，或者，邪恶中有多少善良。</p>
<p>>&gt; 那里叫比利时旅馆。但出乎意料，门房说没听过。我听斯特里克兰夫人说过，这家旅馆很大，很豪华，在里沃利大街后边。我们在旅馆名录中找。叫这个名字的旅馆只有一家，在摩纳街。它既不时尚，也不是有钱人住的地方。我摇摇头。</p>
<p>>&gt; 我上次见他，他整洁一新，可看上去并不自在；现在，他这般邋遢，却神态自若。我不知道，他听了我要讲的一番话后，会作何反应。</p>
<p>◆ 第十二章</p>
<p>>&gt; “要是顶多你只能当个三流画家，是不是还要孤注一掷？不管怎样，如果是其他行业，你才华平平，关系不大，可以得过且过；但是，当一个艺术家，完全不同。”<br>“你他妈真是个傻瓜。”他说。<br>“我不知道你为什么这么说，除非我言过其实。”</p>
<p>>&gt; “我告诉你，我必须画画。我身不由己。一个人掉进水里，他游泳游得好不好没关系，反正他得挣扎，不然就得淹死。”</p>
<p>◆ 第十三章</p>
<p>>&gt; 只有诗人和圣贤才会相信，在柏油马路上辛勤浇灌，能培育出百合花来。</p>
<p>◆ 第十四章</p>
<p>>&gt; 真是蠢话。不是每个人都会像我这样。大多数人，平平淡淡，知足常乐。</p>
<p>◆ 第十五章</p>
<p>>&gt; “只要他是和女人跑的，就还有可能回来。我不相信什么是绝对的。三个月，他就烦死她了。但如果，他不是因为恋爱跑的，那一切都完了。”</p>
<p>>&gt; “你也不明白吗？”她喊道。<br>“我不敢肯定。你的意思是说：如果他是为了女人离开你，你可以原谅；但如果他是为了理想离开你，你就不能？你觉得前者仿佛比赛，而后者你便无能为力，对吧？”</p>
<p>>&gt; 你丈夫的行为，也许是情非得已。我想，他已经不是他自己。他似乎鬼迷心窍，被一股力量抓住，朝着别的方向跑去；他就像落入蛛网的苍蝇，已经无力挣扎。他仿佛着了魔。这让我想起，人们常说的那些离奇故事：一个人的身体被另一个人的灵魂占据，将他自己的赶了出去。这个灵魂在体内很不安分，神秘地变来变去。要是过去，大家就会说，查尔斯·斯特里克兰被魔鬼附身了。”</p>
<p>◆ 第十七章</p>
<p>>&gt; 常言说，痛苦使人高贵，这不对；让人行动高尚的，有时是自满得意；而痛苦，往往使人变得心胸狭窄，充满仇恨。</p>
<p>◆ 第十八章</p>
<p>>&gt; 而我认为，这始终是他挥之不去的幻想，这幻想让他目眩，看不见真相；尽管真相残酷，他却依然用幻想的目光凝望着自己的意大利：浪漫的侠盗，美丽的废墟。他画的是他的理想，尽管贫乏、平庸、陈旧，但终究是理想；这就赋予了他一种独特的魅力。</p>
<p>◆ 第十九章</p>
<p>>&gt; 很奇怪，在评判别人的作品时，他的意识如此精准、不落俗套，可他自己陈腐、平庸的画作也让他感到满意，真是难以置信。</p>
<p>>&gt; “我什么时候走过眼？”德克说，“告诉你，他很有天分。肯定的。一百年以后，如果还有人记得你和我，那是因为我们认识查尔斯·斯特里克兰。”</p>
<p>>&gt; 不，没有名气。我想，他一幅画也没卖出去。你要是和别人谈起他，没有一个不笑的。可是我知道，他是非常好的画家。说到底，他们不是也笑过马奈嘛。柯罗一张画也没卖出去。</p>
<p>>&gt; 为什么你认为美——这世上最宝贵的东西，会像沙滩上的卵石，一个漫不经心的路人，随随便便就能捡到？美是美妙，是奇异，艺术家唯有通过灵魂的煎熬，才能从宇宙的混沌中创造出美。而当美出现，它并非为了让每个人都认出它自己。要认识它，你必须重复和艺术家一样的奇异之旅。这是一支他唱给你的旋律，要想再次用心聆听，就需要智慧、感觉以及丰富的想象力。</p>
<p>◆ 第二十一章</p>
<p>>&gt; “我不想过去。唯一重要的，是永恒的现在。”</p>
<p>◆ 第二十二章</p>
<p>>&gt; 我把大把的时间耗在卢浮宫，因为这是巴黎所有画廊中我感觉最亲切的，也最适合冥想。要不然就是在塞纳河边闲逛，翻一翻路边的旧书，但从来不买。</p>
<p>◆ 第二十四章</p>
<p>>&gt; “他大概生病了。”斯特洛夫说。<br>“可能吧，”门房漠不关心地说，“反正，我好几天没看见他了。”</p>
<p>◆ 第二十五章</p>
<p>转：王尔德的话，每个人理解不同，举个例子，苏格拉底就因为在当时与众不同的思想，被判处了死刑；意大利思想家布鲁诺因为反对欧洲宗教的地心说，被判为异端，活活烧死；王尔德自己本身，因为坚持同性恋的合法性而进了监狱……真理的蜡烛，常常会烫伤那些举烛人的手。<br>>&gt; 天才是世上最奇妙的东西。但对天才自己而言，却是很大的负担。我们应该容忍他们，要很有耐心。</p>
<p>>&gt; 天才是世上最奇妙的东西。但对天才自己而言，却是很大的负担。我们应该容忍他们，要很有耐心。</p>
<p>◆ 第二十八章</p>
<p>>&gt; “你不知道。她爱上斯特里克兰了。”</p>
<p>>&gt; “你知道啊，她受不了斯特里克兰。”<br>“你不了解。”他呜咽着说。</p>
<p>>&gt; “你能把我的衣服收拾一下，放门房那儿吗？明天我过来取。”他强颜欢笑。“再见，亲爱的。谢谢你过去带给我的幸福。”</p>
<p>◆ 第二十九章</p>
<p>转：先自沉稳，而后爱人。爱情是双向的奔赴，爱来自骨子里，而非卑微到尘土里。我爱我自己的灵魂，我懂得如何去爱自己，我才能去更好的爱你。<br>>&gt; 我爱她，远远胜过爱我自己。要我说，爱情中如果考虑自尊，只能说明你更爱自己。</p>
<p>>&gt; 我爱她，远远胜过爱我自己。要我说，爱情中如果考虑自尊，只能说明你更爱自己。</p>
<p>π 2021/2/7 22:02:42<br>◆ 第三十一章</p>
<p>转：这世界本就没有感同身受，只有冷暖自知，如果没办法自己默默消化悲痛那只能转移注意力培养新爱好，时间会帮你抚平你的伤痛<br>>&gt; 我想，他是希望他们没有收拾他的东西，这样他就可以见到妻子，没准儿还能劝她回到自己身边。但是当他回去，东西已经在门房那儿了，门房告诉他，布兰奇出去了。要说，他能不向她吐自己的一肚子苦水，我才不信呢。我发现，每个他认识的人，他都会向人家诉说他的不幸；他以为能博得同情，结果只引来嘲笑。</p>
<p>>&gt; 我想，他是希望他们没有收拾他的东西，这样他就可以见到妻子，没准儿还能劝她回到自己身边。但是当他回去，东西已经在门房那儿了，门房告诉他，布兰奇出去了。要说，他能不向她吐自己的一肚子苦水，我才不信呢。我发现，每个他认识的人，他都会向人家诉说他的不幸；他以为能博得同情，结果只引来嘲笑。</p>
<p>>&gt; 有时候，一个人的外表和他的灵魂并不相称，这实在糟糕。</p>
<p>◆ 第三十七章</p>
<p>>&gt; 巴黎的街头重新带给我欣喜，看着来来往往的行人，我禁不住微笑起来。这一天，天气晴朗，阳光明媚，我感到自己心中有着更为强烈的生之喜悦。我按捺不住；我把斯特洛夫和他的不幸赶出胸中。我要享受生活。</p>
<p>◆ 第三十八章</p>
<p>>&gt; 世界冰冷而残酷。没有人知道我们从哪里来，到哪里去。我们必须深怀谦卑。我们必须看到宁静之美。我们必须隐忍地生活，这样命运之神才不会注目我们。让我们去寻求淳朴、善良者的爱吧。他们的无知比我们的知识更可贵。让我们保持沉默，满足于我们小小的角落，像他们一样平静温顺吧。这才是生活的智慧。</p>
<p>◆ 第四十二章</p>
<p>>&gt; 这些画，很多后来我又看过，有些见过复制品，都相当熟悉；奇怪的是，当初看到它们时，我居然非常失望。我没感觉到艺术本该带给我的欣喜若狂。</p>
<p>孤独，从来都是一个人的事，没有人能真切地懂得另一个人的感受，甚至，在别人眼里，这些都是无关痛痒的事，当有一天，你学会了自己咀嚼自己的孤独，你也就不在乎别人的眼光了。<br>>&gt; 我们每个人都孤独地生活在世界上。谁都被囚禁在一座铁塔里，只能凭一些符号与人交流，但这些符号并没有共同的价值，所以它们的意义模糊不定。我们可怜地想把心灵的珍宝传递给别人，但他们却无力接受，因此我们只能踽踽独行，虽然紧挨着，却并不真正在一起，既无法了解别人，也不被别人所了解。我们就像身在异国他乡的陌生人，对他们的语言知之甚少，想表达那些美妙而深刻的事物，只能局限于会话指南上一点平庸的词句。我们的大脑充满了奇想，却只会说“花匠的姑姑有把雨伞在屋里”。</p>
<p>>&gt; 我们每个人都孤独地生活在世界上。谁都被囚禁在一座铁塔里，只能凭一些符号与人交流，但这些符号并没有共同的价值，所以它们的意义模糊不定。我们可怜地想把心灵的珍宝传递给别人，但他们却无力接受，因此我们只能踽踽独行，虽然紧挨着，却并不真正在一起，既无法了解别人，也不被别人所了解。我们就像身在异国他乡的陌生人，对他们的语言知之甚少，想表达那些美妙而深刻的事物，只能局限于会话指南上一点平庸的词句。我们的大脑充满了奇想，却只会说“花匠的姑姑有把雨伞在屋里”。</p>
<p>◆ 第四十四章</p>
<p>>&gt; 在他的笔下，人物都很怪诞，他对这种怪诞感到非常生气；生活不过是一场混乱，充满了种种的荒谬和污秽，只能引人发笑，未免乐极生悲。</p>
<p>◆ 第四十七章</p>
<p>>&gt; “更难抽的烟我也用烟斗抽过。”他自嘲地耸了耸肩，补充道。说着，又从我递给他的烟盒里拿了几支雪茄，一根叼在嘴上，其他的揣进了口袋。</p>
<p>>&gt; 在这里，他们结交了不少和他们一样饥寒交迫的朋友，当他们有时身上一个子儿都没了，晚上又出奇的冷，就会毫不犹豫地向白天偶然赚到一法郎的人借钱交住宿费。这些流浪汉都不吝啬，不管谁有了钱，都会乐于和大家一起花。他们来自不同的国家，但这并不妨碍他们成为朋友；因为他们感觉，他们是同一个国度的自由民，这个国度宽广无垠——一个伟大的安乐之乡。</p>
<p>◆ 第四十八章</p>
<p>当理想与现世安稳碰撞，总有些东西被遗弃，被撞碎。也许是小时候的玻璃球，也许是小时候立志成为怎样的人，也许只是春天的一场梦。梦总要醒，但是梦想可以一直都被拥有、追逐。他的行动告诉世人，只要有勇气出发，永远都不会晚，灵魂与梦想经过碰撞，会发现一个极少数人能到达的新世界<br>>&gt; 他那孤独的灵魂怀着怎样的奇想，最终向着激发了他幻想的未知岛屿出发了。我喜欢这样的画面，他的人生在四十七岁定格，当大多数人享受着中年生活的安稳，斯特里克兰却去寻找一个新世界。</p>
<p>◆ 第五十章</p>
<p>>&gt; 每当一个人有了意外之举，他周围的人总会认定，原因肯定很丢脸。</p>
<p>每个人对成功的定义不同。有的人想在自己从事的领域成为专家型的人才；有的人想挣足够几辈子花的钱；有的人想要在官场上步步高升；也有的人想要一辈子平平淡淡做着自己喜欢做的事即可。。。<br>>&gt; “我过得很好，”他说，“但说来奇怪，这一切都是因为我交了好运。”</p>
<p>>&gt; 做自己最想做的事，过自己想过的生活，心平气和，怎么能叫作践自己？做一个有名的外科医生，一年赚一万英镑，娶一位漂亮的妻子，就是成功？我想，这取决于你如何看待生活的意义，取决于你对社会应尽什么义务，你对自己有什么要求。</p>
<p>◆ 第五十三章</p>
<p>>&gt; 我住在环礁岛上，周围是潟湖环绕的低矮小岛，那里的美是碧海蓝天，湖光山色，以及随风摇曳的椰子树；而斯特里克兰住的地方，美得就像伊甸园。啊，我真希望自己能将那儿的魅力说给你听。与世隔绝的偏僻一隅，头顶是湛蓝的天空，到处是郁郁葱葱的树木。这里色彩无尽，馥郁芬芳，清爽无比。真是人间天堂，难以用语言形容。他就住在那儿，与世无争，优哉游哉。</p>
<p>◆ 第五十五章</p>
<p>>&gt; 他只不过是一个游手好闲的无赖，宁愿和一个当地女人同居，也不想像别人那样好好干活儿吃饭。天哪，我当时怎么知道，有一天全世界都承认他是天才？</p>
<p>>&gt; 恐惧让人变得残酷无情……</p>
<p>◆ 第五十六章</p>
<p>>&gt; 四面墙上，从地板一直到天花板，一幅幅奇特的、精心绘制的图画铺展开来，那种奇妙、神秘，简直难以形容。库特拉斯几乎屏住了呼吸。一种难以理解、无法参透的感情攫住了他。他感觉，这种敬畏和欣喜，就像一个人看到开天辟地时怀着的那种敬畏和欣喜。这壁画巨大无比，既耽于肉欲，又充满激情，同时，也包含某种恐怖，让他看着十分害怕。绘制这巨作的人，已经深入到大自然的隐秘深处，发现了美妙而惊人的秘密。他知晓了人类从不知晓的事物。他画出的是某种原始的、可怕的东西。这并不属于人类。库特拉斯模糊地感到，这就像巫术，既美丽，又污秽。</p>
<p>◆ 第五十七章</p>
<p>>&gt; 他从不抱怨命运，从未失去勇气。直到最后一刻，他依然坦然、平静。</p>
<p>>&gt; “我想，斯特里克兰也知道，这是一幅杰作。他已经得到了他所追求的东西。他无怨无悔。他创造了一个世界，也看到了这个世界的美好。之后，带着傲慢和不屑，又将它完全毁掉了。”</p>
<p>◆ 第五十八章</p>
<p>>&gt; 我生命的一页翻过去了，我感觉，我离不可避免的死亡，又近了一步。</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>第七天</title>
    <url>/2021/02/15/%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
    <content><![CDATA[<p>第七天（2018版）<br>余华<br>16个想法</p>
<p>◆ 第一天</p>
<p>人的一生，要死去三次，第一次，当你的心跳停止，呼吸消逝，那么你在生物学上被宣告死亡；第二次，当你下葬，人们穿着黑衣出席你的葬礼，怀念你的一生，然后你在社会上被宣告死亡；而第三次死亡，是在这个世界上最后一个记得你的人把你忘记，于是，你真正的死去。<br>他只有一次死亡，太孤单了。<br>>我是孤零零一个人。给予我养育之恩的父亲杨金彪一年多前身患绝症不辞而别，我的生父生母远在千里之外的北方城市，他们不知道此时此刻我已置身另外一个世界。</p>
<a id="more"></a>
<p>>&gt; 我是孤零零一个人。给予我养育之恩的父亲杨金彪一年多前身患绝症不辞而别，我的生父生母远在千里之外的北方城市，他们不知道此时此刻我已置身另外一个世界。</p>
<p>>&gt; “为什么非要等到市长烧了，才烧我们？”那个候烧者问。</p>
<p>>&gt; 市长微微点点头，跟随身穿蓝色衣服的向前走去，大厅里面有两扇巨大的门徐徐打开，市长走进去之后，两扇门徐徐合上。沙发那边的贵宾们没有了声音，豪华贵宾室镇住了沙发贵宾区，金钱在权力面前自惭形秽。</p>
<p>>&gt; 他声音里的无奈很像我的无奈，我说每小时三十元吧，他停顿一会儿后连着说了三声谢谢。</p>
<p>>&gt; 父亲得了绝症后为了不拖累我，独自一人走了</p>
<p>>&gt; 然后一位教授出现在电视画面上，他是我曾经就读过的大学的法律系教授，他侃侃而谈，先是指责下午发生的暴力事件，此后说了一堆民众应该相信政府理解政府支持政府的话。</p>
<p>有时候当别人不舒服的时候一定不要再多嘴的去问候，也许在你看来是关心可在他看来那是赤裸裸的嘲讽，想告诉你的必然会告诉你不想告诉你的问了也会说 没事。你只可默默的陪在身边 沉默。<br>>我点点头。可能是我神色暗淡，他没有像往常那样坐下来和我说话，将果盘放下后转身离去。</p>
<p>◆ 第四天</p>
<p>事不关己，高高挂起。<br>>有网友劝她别跳河，说是大冬天的，河水冰冷刺骨，应该找个暖和的地方自杀，说自杀也得善待自己。她问这个网友怎么才能暖和地自杀，这个网友建议她买两瓶安眠药，一口气吞下去，裹着被子做着美梦死去。别的网友说这是胡扯，医院一次只会给她十来片安眠药，她要攒足两瓶的话，自杀时间起码推迟半年。她表示不会推迟自杀时间，她决定穿上羽绒服跳楼自杀，地点定在她地下住处出口对面的居民楼的楼顶，她说出这个居民小区后，有两个住在那里的网友求她别死在他们家门口，说是会给他们带来晦气的。其中一个建议她想办法爬到市政府大楼顶上往下跳，说那样才威武，其他网友说不可能，市政府门口有武警把守，会把她当成上访的给拘押起来。她最终选择鹏飞大厦，这幢五十八层的商务楼是我们这个城市的地标建筑，这次没有网友反对了，还有网友称赞那个地方不错，说死之前可以高瞻远瞩一下。</p>
<p>>&gt; 有一个警察对他的几个朋友说，平日里背着包来公安局的都是送礼的，谁也没想到这个人从包里拿出来的不是礼物，是一把杀人的刀。</p>
<p>◆ 第五天</p>
<p>除去皮囊，又有几个人认识你？<br>>我看着那些瘦到只剩下骨骼的人，不知道如何描述我的父亲了。</p>
<p>◆ 第六天</p>
<p>他和自己的影子站在一起<br>>这里车来人往，声音喧哗，他和自己的影子站在一起。</p>
<p>>&gt; 这里车来人往，声音喧哗，他和自己的影子站在一起。</p>
<p>现实…<br>>他告诉伍超，他在农村老家有一个相处了三年的女朋友，他想娶她，可是女方家里提出来要先盖好一幢楼房，才可以娶她过去。他就出来打工，打工挣到的钱少得可怜，他要干上八年十年才能挣到盖一幢楼房的钱。那时候他的女朋友早就被别人娶走了，他急需盖楼的钱，所以就来卖肾，他说：<br>“这钱来得快。”</p>
<p>>&gt; “只要一家人在一起，在哪里都一样。”</p>
<p>◆ 点评</p>
<p>认为好看<br>人的一生，要死去三次，第一次，当你的心跳停止，呼吸消逝，那么你在生物学上被宣告死亡；第二次，当你下葬，人们穿着黑衣出席你的葬礼，怀念你的一生，然后你在社会上被宣告死亡；而第三次死亡，是在这个世界上最后一个记得你的人把你忘记，于是，你真正的死去。<br>他只有一次死亡，太孤单了。</p>
<p>我是孤零零一个人。给予我养育之恩的父亲杨金彪一年多前身患绝症不辞而别，我的生父生母远在千里之外的北方城市，他们不知道此时此刻我已置身另外一个世界。</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>霍乱时期的爱情</title>
    <url>/2021/02/15/%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85/</url>
    <content><![CDATA[<p>霍乱时期的爱情<br>加西亚·马尔克斯<br>37个想法</p>
<p>◆ 1</p>
<p>想说的话不要拖到后面，想做的事情不要拖到明天，想去表达爱的意思就要乘早，时光很短暂，我们要舒服的度过一生。<br>>她恳求上帝能够给她哪怕片刻的时间，好让丈夫在离去之前知道，无论两人间有过什么样的猜疑，她始终是那么爱他。她感到一种无法抗拒的强烈愿望，希望能与他从头再来，重新开始生活，好让两人把所有没说出口的话都告诉对方，把所有过去做错了的事重新做好。但面对毫不让步的死神，她只得投降。</p>
<a id="more"></a>
<p>◆ 3</p>
<p>>&gt; 有时，他会用这样的信念来安慰自己：在醉人的婚礼中，甚至在火热的蜜月里，费尔明娜·达萨会有那么片刻的心痛，至少有片刻，无论怎样，一定会有那么片刻，她的心里会浮现出这个被嘲弄，被侮辱，被唾弃了的恋人的影子，而她的幸福也将会荡然无存。</p>
<p>>&gt; 。从那一刻起，他就再没有闻到海湾的臭气，只闻到弥漫在城市中的费尔明娜·达萨特有的气息。一切都散发着她的味道。</p>
<p>◆ 4</p>
<p>>&gt; 人不是从娘胎里出来就一成不变的，相反，生活会逼迫他一次又一次地脱胎换骨。</p>
<p>>&gt; 他明白了一个人意识到自己开始变老，是源于他发现自己开始长得像父亲了。</p>
<p>>&gt; 直到他们有了第一个孩子，才在一次偶然的谈话中发现，原来两人的信是同一位代笔先生所写。</p>
<p>>&gt; 。若干年后，当弗洛伦蒂诺·阿里萨终于自己有钱出版这部书时，又费了很大努力才接受了这些情书已经过时的现实。</p>
<p>>&gt; 他变成了另外一个人：虽然他抱着坚定的决心，也付出了热切的努力，想回到遭受爱情致命打击前的那个他，但事与愿违。</p>
<p>>&gt; 此后的很多年，他都一直在猎捕夜间的孤鸟，幻想能减轻费尔明娜·达萨之痛。但到后来，他已说不清这绝望的通奸习惯到底是出于内心需要，还是单纯的身体恶习。</p>
<p>>&gt; 这个女人用她那老狗一样的智慧，将他上下左右结结实实地调教了一番，让他彻头彻尾地重生了一次，同时，也击碎了他那些精妙绝伦的理论，给他上了一堂唯一该上的爱之课——谁也别妄图当生活的老师。</p>
<p>>&gt; 然而他知道，易得的幸福无法持久，这点体会更多地是源自教训而非经验。</p>
<p>易得的幸福无法持久。<br>>然而他知道，易得的幸福无法持久，这点体会更多地是源自教训而非经验。</p>
<p>>&gt; 弗洛伦蒂诺·阿里萨又一次感到自卑得恶心。</p>
<p>>&gt; 弗洛伦蒂诺·阿里萨无法忍受他那种与生俱来的出众。他用词精准流畅，身上散发出隐隐的樟脑味，魅力独特，风度翩翩，谈吐高雅，就连最为轻浮的言词，只因从他口中说出，也变得精妙无穷。</p>
<p>>&gt; 她辩解说，爱情，首先是一种本能，“要么生下来就会，要么永远都不会”。</p>
<p>>&gt; 他一口咽下白兰地，尽一切可能表达他的怒火，然后没有告别便扬长而去了。从此再没有见过面。<br>同萨拉·诺列加在一起是弗洛伦蒂诺·阿里萨最为持久和稳定的一段关系，虽说并不是他那五年中唯一的关系。他发现自己虽然在她身边感觉也挺不错，尤其是在床上，但她始终无法取代费尔明娜·达萨，于是他夜晚孤独狩猎的毛病又犯了。他把自己的时间和体力分配得井井有条，以让它们物尽其用。但无论如何，萨拉·诺列加曾一度奇迹般地减轻了他的痛楚。至少现在，他见不到费尔明娜·达萨也能正常生活了，不像从前，常常要随时放下手中的事，凭着自己的猜想四处去寻找她的踪迹，漫无目的地徘徊在一些最不可能的街道，以及她无论如何也不会出现的虚幻之地，只要一刻见不到她，他内心的渴望便一刻不能停歇。</p>
<p>>&gt; 社交生活的关键在于学会控制恐惧，夫妻生活的关键在于学会控制厌恶。</p>
<p>是啊，人们总是对不能得到的东西充满了好奇。<br>>但与她猜想的不同，事实上，弗洛伦蒂诺·阿里萨还活着。当她和丈夫、儿子乘着金色四轮马车到达法国远洋轮船的码头时，他就在那里看着他们从车上走下来，与他曾无数次在公共庆典上看见他们的样子分毫不差：依旧是那么完美无瑕。他们带着儿子同行，从那男孩现在的教养便能看出，他成年后将会是什么模样。胡维纳尔·乌尔比诺医生高兴地向弗洛伦蒂诺·阿里萨脱帽致意：“我们要去远征弗兰德。”费尔明娜·达萨向他点了点头。弗洛伦蒂诺·阿里萨脱下帽子，微微鞠躬。她看着他，对他那过早谢顶的惨状没有半点同情的表示。他就像她所看见的那样，是某个她从不认识的人的影子。<br>那段日子也不是弗洛伦蒂诺·阿里萨最走运的时期。工作日益繁重，对偷欢之事也日益厌倦，岁月蹉跎。此外，特兰西多·阿里萨也已到了生命的最后时光，她已丧失了记忆：几乎是一片空白。</p>
<p>◆ 5</p>
<p>>&gt; 他爱恋的形象曾在那里占据了两个小时之久。</p>
<p>爱得疯狂<br>>他爱恋的形象曾在那里占据了两个小时之久。</p>
<p>>&gt; 人们从窗口撒下暴风雨般的彩带和花瓣，两人则挥手回应人们的欢呼。她是如此炫目，从脚上精致的高跟鞋，到颈上的狐尾围脖，再到头上的钟形帽，全身上下都闪耀着属于皇室的金色，在人群中显得格外出挑。</p>
<p>>&gt; 。但就在那天下午，他发挥了无边的想象力，问自己这种残酷的冷漠会不会是一种掩饰，底下隐藏的其实是一场爱情的风暴？仅仅是这样一个设想便使他旧梦复苏。他又开始在费尔明娜·达萨的别墅周围徘徊，怀着多年以前盘桓在福音花园时同样的渴望。但他心里盘算的并非是让她看见自己，而只是想看看她，知道她还活在这个世界上。</p>
<p>>&gt; 在这座城市里，一切都保不了密，甚至有很多事在发生之前就尽人皆知，特别是有关富人的事。</p>
<p>>&gt; 可几乎两年过去了，无论他，还是她，都没有找到一条回头之路，因为每条路都被他们的骄傲暗中捣毁。</p>
<p>>&gt; 弗洛伦蒂诺·阿里萨一想到自己多年来的努力很可能因为这个意想不到的状况在最后关头功亏一篑，不禁浑身发抖。他宁愿放弃一切、丢开一切，宁愿死，也不愿有负于费尔明娜·达萨。</p>
<p>>&gt; 然而，这个时刻终于来临，他却并不像他在无数个不眠之夜中预见的那样，因胜利的激动而颤抖万分，相反，他颤抖是因为被一种恐惧感所包围：他以某种令人难以置信的清醒意识到，如果他死了，丧钟也会这样为他而敲。</p>
<p>>&gt; 他甚至相信自己闻到了凋谢的栀子花的夜间芬芳，因为在惊喜的第一瞬间，他的心就把一切告诉了他：这就是半个多世纪以来，他一刻也无法平静地等待的，那封信。</p>
<p>◆ 6</p>
<p>>&gt; 当她在成为寡妇后的第一个早晨醒来，闭着眼睛在床上翻了个身，想找一个更舒服的姿势继续睡下去，就在这一刻，她才真正意识到他死了。</p>
<p>>&gt; 女人们对问题中隐含的意思比对问题本身想得更多</p>
<p>>&gt; 他唯一感兴趣的是这封信本身给了他机会，甚至是承认了他有权回复。进一步说，她其实是在要求他做出答复。这样一来，生活此刻正处于他期望中的转捩点。剩下的一切就看他的了，他十分确信，自己那持续了半个多世纪的私人地狱还会将很多生死考验摆到他面前，而他也准备好了带着前所未有的热情、痛苦和爱去面对它们，因为这将是最后的考验。</p>
<p>>&gt; 你要永远记住，对于一对恩爱夫妻，最重要的不是幸福，而是稳定。</p>
<p>>&gt; 让时间流逝吧，我们会看到它究竟带来了什么。</p>
<p>>&gt; 他在灾难的瓦砾中找到了一线希望之光，因为他觉得，费尔明娜·达萨的不幸使她得到升华，愤怒使她更加美丽，对世界的怨恨使她恢复了二十岁时那桀骜的个性。</p>
<p>>&gt; 乌尔比诺·达萨医生没有勇气和她对峙，从来如此。但他的妻子为他解了围，平静地辩解道，任何年龄的爱情都是合情合理的。奥菲利娅失去了控制。“我们这个年龄的爱情已属荒唐，”她叫喊道，“到了他们那个年龄，那就是卑鄙！”</p>
<p>>&gt; 一个世纪前，人们毁掉了我和这个可怜男人的生活，因为我们太年轻；现在，他们又想在我们身上故伎重施，因为我们太老了。</p>
<p>>&gt; 他像遭遇了海难一般向妻子投去求助的一瞥，想为自己的彷徨无助寻找支点，但遇到的却是一双冰冷的眼睛。她严厉地低声说：“难道你也一样？”是的，他也一样，同他的妹妹奥菲利娅一样，认为爱情到一定年龄就变得不体面了。</p>
<p>◆ 点评</p>
<p>认为好看</p>
]]></content>
      <categories>
        <category>阅读笔记</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
</search>
